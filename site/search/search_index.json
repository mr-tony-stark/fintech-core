{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Storo Docs","text":"<p>Welcome to the Storo payments nucleus documentation.</p> <ul> <li>Start with the Overview to understand architecture and concepts.</li> <li>Browse Components for service-level docs.</li> <li>See Specs for APIs, events, and posting rules.</li> <li>Diagrams include component maps and lifecycles.</li> </ul> <p>Quick links: - Overview - Components - Specs - Diagrams - Runbooks</p>"},{"location":"sprint-001/","title":"Sprint 001 \u2013 Kickoff","text":"<p>Dates: YYYY\u2011MM\u2011DD \u2192 YYYY\u2011MM\u2011DD Team: 2 devs (Sprint Master/System Design + Developer) Focus: Bootstrapping Storo nucleus with contracts, infra scaffolding, and first end\u2011to\u2011end slice.</p>"},{"location":"sprint-001/#goals-sprint-outcome","title":"\ud83c\udfaf Goals (Sprint Outcome)","text":"<ul> <li>Have a working docs + specs foundation (clear contracts, posting rules, glossary).</li> <li>Bring up devstack with CTS + USDC Gateway + Ledger (thin slice).</li> <li>CI/CD pipelines in place (lint, test, contract\u2011validate, build).</li> <li>First happy\u2011path transfer flows documented and testable.</li> </ul>"},{"location":"sprint-001/#scope-stories","title":"\ud83d\uddc2 Scope (Stories)","text":""},{"location":"sprint-001/#1-documentation-specs","title":"1. Documentation &amp; Specs","text":"<ul> <li>[ ] Finalize <code>20-specs/events.md</code> with explicit <code>\"v\": 1</code> field.</li> <li>[ ] Link <code>posting-rules.md</code> into <code>ledger-service.md</code>.</li> <li>[ ] Draft <code>glossary.md</code> (with Moov.io + finance/accounting terms).</li> <li>[ ] ADR\u20110001 (outbox pattern), ADR\u20110002 (double\u2011entry ledger).</li> </ul>"},{"location":"sprint-001/#2-infra-devstack","title":"2. Infra &amp; Devstack","text":"<ul> <li>[ ] <code>storo-devstack</code> repo skeleton (Docker Compose + LocalStack + Postgres + Prometheus + Grafana).</li> <li>[ ] CTS + Ledger + USDC GW images wired into devstack.</li> <li>[ ] Local override example documented in <code>local-dev.md</code>.</li> </ul>"},{"location":"sprint-001/#3-cicd","title":"3. CI/CD","text":"<ul> <li>[ ] Apply standard <code>.github/workflows/ci.yml</code> to CTS repo.</li> <li>[ ] Contract validation step wired to <code>storo-specs</code>.</li> <li>[ ] First green pipeline run.</li> </ul>"},{"location":"sprint-001/#4-endtoend-slice-happy-path","title":"4. End\u2011to\u2011End Slice (Happy Path)","text":"<ul> <li>[ ] Client POST <code>/v1/transfers</code> to CTS (devstack).</li> <li>[ ] CTS emits <code>transfers.submitted.usdc</code>.</li> <li>[ ] USDC Gateway consumes, emits <code>accepted</code> + <code>settled</code>.</li> <li>[ ] Ledger posts debit/credit entries.</li> <li>[ ] Verify balances via <code>GET /balances</code>.</li> </ul>"},{"location":"sprint-001/#definition-of-done","title":"\u2705 Definition of Done","text":"<ul> <li>Docs: published in repo under <code>/docs</code> (renderable on GitHub).</li> <li>Specs: validated with golden fixtures in CI.</li> <li>Infra: <code>docker compose up</code> starts stack; Grafana accessible.</li> <li>Flow: running curl against CTS \u2192 events \u2192 ledger visible in logs.</li> </ul>"},{"location":"sprint-001/#out-of-scope","title":"\ud83d\udea7 Out of Scope","text":"<ul> <li>Zimswitch &amp; OPPWA gateways (future sprints).</li> <li>Reconciliation service (later sprint).</li> <li>Operator Console UI (later sprint).</li> </ul>"},{"location":"sprint-001/#risks-mitigation","title":"\ud83d\udd2e Risks &amp; Mitigation","text":"<ul> <li>Spec churn: mitigate by freezing contracts after ADR sign\u2011off.</li> <li>Infra drift: mitigate with Terraform baseline next sprint.</li> <li>Dev confusion: mitigate by docs-first (glossary, component pages).</li> </ul>"},{"location":"sprint-001/#metrics","title":"\ud83d\udcca Metrics","text":"<ul> <li>Sprint velocity = 4 stories completed.</li> <li>CI pass rate = 100% on <code>main</code>.</li> <li>Devstack start\u2011to\u2011happy\u2011path = &lt; 15 min setup.</li> </ul>"},{"location":"sprint-001/#ownership","title":"\ud83d\udc65 Ownership","text":"<ul> <li>Sprint Master/System Design: contracts, ADRs, devstack infra, CI template.</li> <li>Developer: implement CTS service skeleton, USDC GW skeleton, integrate with specs.</li> </ul>"},{"location":"sprint-001/#next-sprint-preview","title":"\ud83d\udcdd Next Sprint Preview","text":"<ul> <li>Add OPPWA Gateway with strict validators.</li> <li>Implement reconciliation ingest for USDC.</li> <li>Introduce Operator Console (timeline + exceptions).</li> </ul>"},{"location":"00-overview/","title":"Storo Documentation","text":"<p>Welcome to the Storo Docs \u2014 the single source of truth for how the Storo payments nucleus is designed, built, and operated.</p> <p>This repository is structured for both engineers (who need precise specifications and diagrams) and stakeholders (who need a high-level view of what Storo does and how it connects to the outside world).</p>"},{"location":"00-overview/#what-is-storo","title":"\ud83c\udf0d What is Storo?","text":"<p>Storo is a payments nucleus for the Southern Africa \u2194 global corridor. It provides:</p> <ul> <li>Unified API for payments, payouts, and transfers.</li> <li>Ledger for strict double-entry accounting and balance tracking.</li> <li>Router that connects to multiple rails (USDC on Algorand, Zimswitch/OPPWA, mobile money, EFT).</li> <li>Compliance and reconciliation as first-class components, not afterthoughts.</li> </ul> <p>Think of it as the boring but unbreakable center of our payment universe.</p>"},{"location":"00-overview/#whats-in-this-documentation","title":"\ud83e\udde9 What\u2019s in this Documentation?","text":"<p>This docs repo is organized into clear layers:</p>"},{"location":"00-overview/#1-overview-you-are-here","title":"1. Overview (you are here)","text":"<ul> <li><code>index.md</code> \u2192 This page: big-picture introduction, how to use the docs.</li> <li><code>nucleus.md</code> \u2192 Detailed description of the Storo nucleus (all components together).</li> <li><code>glossary.md</code> \u2192 Domain terms (rails, ledger, reconciliation, returns, etc.).</li> <li><code>architecture-decisions/</code> \u2192 ADRs (Architecture Decision Records) documenting why we made key choices.</li> </ul>"},{"location":"00-overview/#2-components","title":"2. Components","text":"<p>Each nucleus component has its own page: - Canonical Transfer Service (CTS) - Rail Gateways (Zimswitch, OPPWA, USDC/Algorand) - Ledger Service - Compliance Screening - Directory &amp; Routing - Reconciliation &amp; Returns - Event Bus + Outbox - Platform/Base - Operator Console</p> <p>Each page explains Purpose \u2192 Responsibilities \u2192 Interfaces \u2192 Data \u2192 Diagrams \u2192 Failure Modes \u2192 Ops.</p>"},{"location":"00-overview/#3-specs","title":"3. Specs","text":"<ul> <li>Event envelope &amp; catalog</li> <li>Canonical Transfer API schema (<code>POST /transfers</code>)</li> <li>Posting rules (event \u2192 debit/credit accounts)</li> <li>Data retention &amp; PII handling</li> </ul>"},{"location":"00-overview/#4-diagrams","title":"4. Diagrams","text":"<ul> <li>Component diagram of the nucleus</li> <li>Transfer lifecycle state machine</li> <li>Sequence diagrams for common flows (e.g. USDC payment, OPPWA return, reconciliation match)</li> </ul>"},{"location":"00-overview/#5-ops","title":"5. Ops","text":"<ul> <li>Runbooks (returns, reconciliation triage, compliance freeze/unfreeze)</li> <li>Observability (metrics, dashboards, logs, SLOs)</li> <li>Security (secrets, IAM, PII redaction)</li> </ul>"},{"location":"00-overview/#6-templates","title":"6. Templates","text":"<p>Reusable templates for: - New component docs - Sequence diagrams - State diagrams - ADRs</p>"},{"location":"00-overview/#how-to-read-this-repo","title":"\ud83d\udcd6 How to Read this Repo","text":"<ul> <li>If you\u2019re an engineer \u2192 dive into <code>10-components/</code> and <code>20-specs/</code>.  </li> <li>If you\u2019re an operator \u2192 check <code>40-ops/runbooks.md</code>.  </li> <li>If you\u2019re reviewing a design decision \u2192 see <code>00-overview/architecture-decisions/</code>.</li> </ul>"},{"location":"00-overview/#diagram-standards","title":"\ud83d\udcd0 Diagram Standards","text":"<p>We use Mermaid diagrams in Markdown. GitHub renders them directly; you can also export with <code>@mermaid-js/mermaid-cli</code>.</p> <ul> <li>Component diagrams \u2192 boxes + arrows (what services exist, how they talk).  </li> <li>State diagrams \u2192 transfer lifecycle (INITIATED \u2192 SETTLED \u2192 RETURNED).  </li> <li>Sequence diagrams \u2192 end-to-end message flows (client \u2192 CTS \u2192 rail gateway \u2192 ledger).  </li> </ul> <p>Example:</p> <p>```mermaid flowchart LR   Client --&gt; CTS[Canonical Transfer Service]   CTS --&gt; GW[Rail Gateway]   GW --&gt; EB[(Event Bus)]   EB --&gt; L[Ledger]</p>"},{"location":"00-overview/glossary/","title":"Glossary","text":"<p>Shared domain language for Storo. Sources include our design docs and Moov.io\u2019s terms-dictionary. This file should be the first stop for new contributors.</p>"},{"location":"00-overview/glossary/#a","title":"A","text":"<p>ACH Automated Clearing House. Batch-based payment network in the U.S. Not directly used in Storo, but referenced via Moov patterns.</p> <p>Account A ledger entity that holds balances and records postings. Types include: User, Merchant, Liquidity, Fees, FX, Settlement.</p> <p>ADR (Architecture Decision Record) Lightweight doc capturing a key architectural choice, its context, decision, and consequences.</p> <p>Authorization (AUTH) A request to place a hold on funds. In Storo, represented in the canonical transfer intent.</p>"},{"location":"00-overview/glossary/#b","title":"B","text":"<p>BAI2 Bank Administration Institute format for statement files. Used by Moov and referenced as a model for Storo\u2019s reconciliation exports.</p> <p>Balance The net amount for an account at a given time, derived from postings.</p> <p>BIN (Bank Identification Number) The first digits of a card number, identifying the issuer. Stored in the Directory service.</p> <p>Bus (Event Bus) Pub/sub system (SNS+SQS in dev) delivering domain events between services.</p>"},{"location":"00-overview/glossary/#c","title":"C","text":"<p>Canonical Transfer Service (CTS) Front-door API and orchestrator for transfers in Storo. Ensures idempotency, normalization, compliance, and routing.</p> <p>Chargeback / Return Reversal of a prior settlement, with reason codes. Modeled as state transitions in CTS and reversal postings in the Ledger.</p> <p>Compliance Screening Process of checking payer/payee against watchlists (OFAC, UN, EU, SA FIC). Implemented as a local fast index.</p> <p>Cutoff Time of day after which payments are queued for next business day. Defined in Directory service.</p>"},{"location":"00-overview/glossary/#d","title":"D","text":"<p>Directory Service Component maintaining authoritative data on institutions, BINs, fees, and settlement windows.</p> <p>Double-entry Accounting principle: every debit has an equal credit. Enforced in Storo Ledger.</p> <p>DLQ (Dead Letter Queue) Queue for events that failed processing and need operator intervention.</p>"},{"location":"00-overview/glossary/#e","title":"E","text":"<p>Event Immutable record emitted by a service (e.g., <code>transfers.settled</code>). Structured by the event envelope spec.</p> <p>Event Envelope Standard wrapper for all events: <code>{ eventId, type, occurredAt, transferId, tenantId, payload }</code>.</p> <p>External Reference Rail- or partner-provided identifier (e.g., auth code, transaction ref). Stored in transfers table.</p>"},{"location":"00-overview/glossary/#f","title":"F","text":"<p>FBO (For Benefit Of) Banking account structure where a custodian holds funds for multiple end-users. Modeled in Ledger accounts.</p> <p>Fixture (Golden Test) Sample payload used in tests to ensure round-trip parsing and validation stability.</p>"},{"location":"00-overview/glossary/#g","title":"G","text":"<p>Gateway Adapter for a payment rail (Zimswitch, OPPWA, USDC/Algorand). Translates canonical transfers into rail-specific requests.</p> <p>GL (General Ledger) The book of record. Storo Ledger service maintains the general ledger.</p> <p>Glossary This file. Shared terms and definitions.</p>"},{"location":"00-overview/glossary/#i","title":"I","text":"<p>Idempotency Ensuring a request (e.g., <code>POST /transfers</code>) can be safely retried without duplication.</p> <p>ISO 8583 International standard for card payment messages. Zimswitch uses this; Storo validates payloads via strict schemas.</p> <p>ISO 20022 XML/JSON standard for financial messaging. Referenced for future-proofing rails.</p>"},{"location":"00-overview/glossary/#l","title":"L","text":"<p>Ledger The authoritative record of postings, balances, and statements. Event-driven, double-entry, append-only.</p> <p>Lifecycle (Transfer) State machine: INITIATED \u2192 SUBMITTED \u2192 ACCEPTED \u2192 SETTLED \u2192 (RETURNED | FAILED).</p> <p>Liquidity Account Special ledger account representing pooled liquidity held for customer settlements.</p>"},{"location":"00-overview/glossary/#o","title":"O","text":"<p>Observability The ability to measure, trace, and debug system behavior via metrics, logs, and tracing.</p> <p>OFAC Office of Foreign Assets Control. U.S. sanctions list. Indexed locally alongside UN/EU/SA lists.</p> <p>Operator Console Internal UI for handling returns, recon exceptions, and compliance flags.</p>"},{"location":"00-overview/glossary/#p","title":"P","text":"<p>PII (Personally Identifiable Information) Sensitive data (names, IDs, PANs). Must be encrypted, redacted in logs, and retained per policy.</p> <p>Posting Atomic debit/credit entry in the ledger. Immutable, append-only.</p> <p>Posting Rules Mapping from transfer events to specific ledger postings (accounts, amounts, memos).</p>"},{"location":"00-overview/glossary/#r","title":"R","text":"<p>Rail A payment network (e.g., Zimswitch, OPPWA, Algorand/USDC).</p> <p>Reconciliation Process of matching partner statements or on-chain events with internal transfers. Runs nightly.</p> <p>Return Negative state transition; undo of a prior settlement with reason codes.</p>"},{"location":"00-overview/glossary/#s","title":"S","text":"<p>Settlement Final movement of funds on a rail. In Storo, confirmed by events and reconciled against statements.</p> <p>Specs Repo Dedicated repo holding event schemas, API definitions, and fixtures (<code>storo-specs</code>). Source of truth for contracts.</p> <p>State Diagram Visual representation of lifecycle states and transitions (Mermaid).</p>"},{"location":"00-overview/glossary/#t","title":"T","text":"<p>Tenant Isolated namespace for a customer/institution using Storo. All transfers are scoped by tenantId.</p> <p>Trace ID Identifier used for distributed tracing across services.</p> <p>Transfer Core unit of money movement in Storo, defined by canonical schema (payer, payee, amount, rail, intent, etc.).</p>"},{"location":"00-overview/glossary/#w","title":"W","text":"<p>Watchlist Sanctions/risk list (OFAC, UN, EU, SA FIC). Ingested and indexed locally for compliance screening.</p> <p>This glossary evolves with the system. Always update it alongside specs and ADRs.</p>"},{"location":"00-overview/nucleus/","title":"Storo Nucleus","text":"<p>The Storo nucleus is the boring, strict, event-driven core of the platform. It orchestrates all money movement across rails (USDC/Algorand, Zimswitch/OPPWA, EFT, mobile money) while enforcing compliance, ledger discipline, and reconciliation.</p>"},{"location":"00-overview/nucleus/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>The nucleus exists to: - Provide a single canonical model for all transfers. - Keep rail-specific logic isolated in gateways. - Guarantee double-entry correctness via the ledger. - Ensure compliance and reconciliation are first-class, not bolted on. - Emit domain events so every change is observable and auditable.  </p>"},{"location":"00-overview/nucleus/#components-at-a-glance","title":"\ud83e\udde9 Components at a Glance","text":"<ul> <li>Canonical Transfer Service (CTS) \u2192 orchestrates transfer lifecycle, idempotency, emits events.  </li> <li>Rail Gateways \u2192 adapters for each rail, strict spec validation, submit &amp; emit rail outcomes.  </li> <li>Ledger Service \u2192 double-entry postings, balances, statements.  </li> <li>Compliance Screening \u2192 fast local allow/deny; pre-submit &amp; delta re-screens.  </li> <li>Directory &amp; Routing \u2192 institutions, BINs, fees, settlement windows.  </li> <li>Reconciliation &amp; Returns \u2192 ingest statements, match transfers, manage returns/exceptions.  </li> <li>Event Bus + Outbox \u2192 exactly-once event delivery; glue between services.  </li> <li>Platform/Base \u2192 shared utilities (admin, time, IDs, error handling, migrations).  </li> <li>Operator Console \u2192 human control surface for exceptions, flags, returns.  </li> </ul>"},{"location":"00-overview/nucleus/#component-diagram","title":"\ud83c\udfd7\ufe0f Component Diagram","text":"<pre><code>flowchart LR\n  subgraph Client/Partners\n    A[Client Apps / Merchants / WhatsApp Bot]\n  end\n\n  subgraph Core[\"Storo Nucleus\"]\n    direction LR\n\n    subgraph API[\"Canonical Transfer Service (API)\"]\n      CTS[POST /transfers&lt;br/&gt;GET /transfers/:id&lt;br/&gt;Idempotency]\n    end\n\n    subgraph GW[\"Rail Gateways\"]\n      ZG[Zimswitch Gateway]\n      OG[OPPWA Gateway]\n      UG[USDC/Algorand Gateway]\n    end\n\n    subgraph L[\"Ledger Service\"]\n      LJ[Journal &amp; Postings]\n      LB[Balances &amp; Statements]\n    end\n\n    subgraph C[\"Compliance Screening\"]\n      CS[Local Watchlist Index&lt;br/&gt;/screen]\n    end\n\n    subgraph D[\"Directory &amp; Routing\"]\n      DR[Institutions/BINs&lt;br/&gt;Fees &amp; Windows]\n    end\n\n    subgraph R[\"Reconciliation &amp; Returns\"]\n      RC[Statement Ingest&lt;br/&gt;Unmatched Queue]\n    end\n\n    subgraph B[\"Event Bus + Outbox\"]\n      EB[(Topics: transfers.*, ledger.*, recon.*)]\n    end\n\n    subgraph O[\"Operator Console\"]\n      OC[Ops UI&lt;br/&gt;Returns/Recon/Flags]\n    end\n\n    subgraph PL[\"Platform/Base\"]\n      AD[/ /live /ready /metrics /version /]\n      TM[Banking Time &amp; Holidays]\n      IDG[ID/Tracing &amp; Errors]\n    end\n  end\n\n  A --&gt;|create intent| CTS\n  CTS --&gt;|pre-screen| CS\n  CS --&gt;|allow/deny| CTS\n  CTS --&gt;|route| D\n  D --&gt; CTS\n  CTS --&gt;|submit| ZG\n  CTS --&gt;|submit| OG\n  CTS --&gt;|submit| UG\n\n  ZG --&gt; EB\n  OG --&gt; EB\n  UG --&gt; EB\n\n  EB --&gt; CTS\n  EB --&gt; L\n  EB --&gt; R\n  EB --&gt; O\n\n  L &lt;--&gt; R\n  R --&gt;|nightly ingest| EB\n\n  OC --- O\n  PL --- CTS\n  PL --- GW\n  PL --- L\n  PL --- C\n  PL --- D\n  PL --- R</code></pre>"},{"location":"00-overview/nucleus/#transfer-lifecycle-state-machine","title":"\ud83d\udd04 Transfer Lifecycle (State Machine)","text":"<pre><code>stateDiagram-v2\n  [*] --&gt; INITIATED\n  INITIATED --&gt; SUBMITTED: CTS submits.&lt;rail&gt;\n  SUBMITTED --&gt; ACCEPTED: rail reference received\n  ACCEPTED --&gt; SETTLED: funds final\n  ACCEPTED --&gt; RETURNED: return/chargeback code\n  SUBMITTED --&gt; FAILED: technical failure\n  SETTLED --&gt; [*]\n  RETURNED --&gt; [*]\n  FAILED --&gt; [*]</code></pre>"},{"location":"00-overview/nucleus/#contracts","title":"\ud83d\udcdc Contracts","text":""},{"location":"00-overview/nucleus/#event-envelope","title":"Event Envelope","text":"<pre><code>{\n  \"eventId\": \"uuid\",\n  \"type\": \"transfers.settled\",\n  \"occurredAt\": \"2025-08-26T10:15:01Z\",\n  \"transferId\": \"tr_12345\",\n  \"tenantId\": \"tn_67890\",\n  \"payload\": { \"amount\": { \"value\": 100, \"currency\": \"ZAR\" }, \"rail\": \"zimswitch\" }\n}\n</code></pre>"},{"location":"00-overview/nucleus/#canonical-transfer","title":"Canonical Transfer","text":"<pre><code>{\n  \"transferId\": \"tr_12345\",\n  \"tenantId\": \"tn_67890\",\n  \"payer\": { \"accountId\": \"acct_001\" },\n  \"payee\": { \"accountId\": \"acct_999\" },\n  \"amount\": { \"value\": 1000, \"currency\": \"USD\" },\n  \"rail\": \"usdc-algo\",\n  \"intent\": \"PUSH\",\n  \"externalRef\": \"ext_abc123\",\n  \"metadata\": { \"invoiceId\": \"inv_555\" },\n  \"state\": \"SUBMITTED\"\n}\n</code></pre>"},{"location":"00-overview/nucleus/#posting","title":"Posting","text":"<pre><code>{\n  \"postingId\": \"pst_001\",\n  \"transferId\": \"tr_12345\",\n  \"debitAccountId\": \"acct_001\",\n  \"creditAccountId\": \"acct_999\",\n  \"amount\": { \"value\": 1000, \"currency\": \"USD\" },\n  \"memo\": \"Payment settlement\",\n  \"occurredAt\": \"2025-08-26T10:15:01Z\"\n}\n</code></pre>"},{"location":"00-overview/nucleus/#non-negotiables","title":"\u2705 Non-Negotiables","text":"<ul> <li>Strict validation at rail gateways (no malformed messages pass).  </li> <li>Exactly-once events (via outbox + idempotent consumers).  </li> <li>Double-entry always balanced.  </li> <li>Compliance pre-screen mandatory before submission.  </li> <li>Reconciliation nightly, exceptions reviewed before books close.  </li> <li>Operator console required for human resolution.  </li> </ul>"},{"location":"00-overview/nucleus/#slos","title":"\ud83d\udcc8 SLOs","text":"<ul> <li>API latency (P99, <code>POST /transfers</code>): \u2264 250 ms (excluding rail response).  </li> <li>Event publish lag (P99): \u2264 1 s.  </li> <li>Ledger posting latency (P99): \u2264 1 s after <code>settled</code>.  </li> <li>Reconciliation match rate: \u2265 99.8% same day, 100% by T+1.  </li> <li>Idempotency collision rate: 0%.  </li> </ul> <p>Next step: See ../10-components/canonical-transfer-service.md for detailed pages on each service.</p>"},{"location":"00-overview/storo-vs-mojaloop/","title":"Storo Nucleus vs Mojaloop Hub - Visual Contrast","text":"<p>This note shows how Storo is inspired by Mojaloop while keeping a modular, rail-agnostic nucleus. Two diagrams: 1) Component landscape comparison 2) Transaction flow (Request-to-Pay) mapped to each architecture</p>"},{"location":"00-overview/storo-vs-mojaloop/#1-component-landscape","title":"1) Component Landscape","text":"<pre><code>flowchart LR\n  subgraph S[\"Storo Nucleus (Modular, Rail-Agnostic)\"]\n    direction LR\n    S1[CTS&lt;br/&gt;(Canonical Transfer Service)]\n    S2[Rail Gateways&lt;br/&gt;(EcoCash/PayShap/OPPWA/USDC)]\n    S3[Ledger Service&lt;br/&gt;(Double-Entry)]\n    S4[Compliance&lt;br/&gt;(Screening/Lists)]\n    S5[Directory &amp; Routing&lt;br/&gt;(ALS/Fees/Windows)]\n    S6[Reconciliation &amp; Returns]\n    S7[Event Bus + Outbox]\n    S8[Operator Console]\n    S9[Platform/Base&lt;br/&gt;(Admin/Time/Errors/IDs)]\n  end\n\n  subgraph M[\"Mojaloop Hub (Switch + Scheme Services)\"]\n    direction LR\n    M1[Account Lookup Service&lt;br/&gt;(ALS / Discovery)]\n    M2[Quoting Service&lt;br/&gt;(FX / Fees Agreement)]\n    M3[Central Ledger&lt;br/&gt;(Clearing/Positions)]\n    M4[Settlement Module&lt;br/&gt;(RTGS/Net/Prefund)]\n    M5[Scheme Rules &amp; Auth&lt;br/&gt;(PKI, Signatures, Consent)]\n    M6[Fraud/Risk Hooks]\n    M7[FSPIOP API Gateway]\n    M8[ILP Coordinator&lt;br/&gt;(Conditions/Fulfillment)]\n  end\n\n  %% Storo internals\n  S1 --&gt; S4\n  S1 --&gt; S5\n  S1 --&gt; S2\n  S2 --&gt; S7\n  S7 --&gt; S3\n  S7 --&gt; S6\n  S8 --- S7\n  S9 --- S1\n  S9 --- S2\n  S9 --- S3\n\n  %% Mojaloop internals\n  M7 --&gt; M1\n  M7 --&gt; M2\n  M7 --&gt; M8\n  M8 --&gt; M3\n  M3 --&gt; M4\n  M5 --- M7\n  M6 --- M7</code></pre> <p>Key differences - Storo separates rail adapters (gateways) from the core; ledger is internal SoT. - Mojaloop is a shared switch: it offers discovery, quoting, clearing &amp; settlement to external DFSPs. - Both use directories (ALS), FX/fees agreement, security (PKI), and fraud hooks \u2014 but Storo keeps them inside its nucleus; Mojaloop exposes them as scheme services.</p>"},{"location":"00-overview/storo-vs-mojaloop/#2-request-to-pay-r2p-flow-side-by-side","title":"2) Request-to-Pay (R2P) Flow \u2014 Side-by-Side","text":"<pre><code>sequenceDiagram\n  autonumber\n  participant Client as Merchant App / POS\n  participant Storo as Storo CTS\n  participant Dir as Directory (ALS)\n  participant GW as Rail Gateway (e.g., EcoCash/PayShap/USDC)\n  participant Ledger as Ledger Service\n\n  Note over Client,Ledger: Storo \u2014 Rail-agnostic nucleus\n\n  Client-&gt;&gt;Storo: POST /transfers (payer alias, amount, rail)\n  Storo-&gt;&gt;Dir: Resolve alias -&gt; provider/route\n  Dir--&gt;&gt;Storo: Provider &amp; fees/windows\n  Storo-&gt;&gt;GW: transfers.submitted.&lt;rail&gt;\n  GW--&gt;&gt;Storo: transfers.accepted (prompt delivered / tx observed)\n  GW--&gt;&gt;Storo: transfers.settled (funds final)\n  Storo-&gt;&gt;Ledger: Postings (Dr/Cr + fees/FX)\n  Ledger--&gt;&gt;Storo: Balances updated\n  Storo--&gt;&gt;Client: 200 OK (state: SETTLED)</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  participant PayerApp as Payer DFSP App\n  participant Hub as Mojaloop Hub (FSPIOP)\n  participant ALS as Account Lookup (Discovery)\n  participant Quote as Quoting (FX/Fees)\n  participant ILP as ILP/Transfer Orchestrator\n  participant PayeeApp as Payee DFSP App\n  participant Settle as Settlement/RTGS\n\n  Note over PayerApp,Settle: Mojaloop \u2014 Shared scheme with DFSPs\n\n  PayerApp-&gt;&gt;Hub: POST /parties (discover payee alias)\n  Hub-&gt;&gt;ALS: Lookup alias -&gt; DFSP\n  ALS--&gt;&gt;Hub: Payee DFSP\n  Hub-&gt;&gt;PayeeApp: GET /quotes?amount,currency\n  PayeeApp--&gt;&gt;Hub: Quote (amountIn/Out, fees, FX, ILP condition)\n  Hub--&gt;&gt;PayerApp: Quote (approve?)\n  PayerApp-&gt;&gt;Hub: POST /transfers (attach ILP condition)\n  Hub-&gt;&gt;ILP: Coordinate conditional transfer\n  ILP-&gt;&gt;PayeeApp: Fulfill if terms met\n  PayeeApp--&gt;&gt;Hub: Transfer success\n  Hub-&gt;&gt;Settle: (Net/Gross) settlement instruction\n  Hub--&gt;&gt;PayerApp: Transfer completed</code></pre> <p>Interpretation - Storo treats R2P as an internal orchestration; gateways perform the last-mile prompt/observe/settle. - Mojaloop formalizes Discovery -&gt; Quote -&gt; Transfer across multiple DFSPs, with ILP ensuring atomicity and a separate settlement layer.</p>"},{"location":"00-overview/storo-vs-mojaloop/#when-to-use-which-ideas","title":"When to use which ideas","text":"<ul> <li>Use Storo\u2019s modular gateways when you must integrate diverse rails (EcoCash, PayShap, OPPWA, USDC) and keep a single internal ledger of record.  </li> <li>Use Mojaloop patterns (FSPIOP, ILP, ISO 20022 mapping, scheme rules) to standardize cross-institution flows and future-proof for regional interop.</li> </ul> <p>Draft v1 \u2014 for internal architecture review.</p>"},{"location":"00-overview/architecture-decisions/ADR-0001-events-outbox/","title":"ADR-0001: Outbox Pattern Mandatory","text":"<p>Status: Accepted Date: 2025-08-26</p>"},{"location":"00-overview/architecture-decisions/ADR-0001-events-outbox/#context","title":"Context","text":"<p>Storo is an event-driven system. Each service must emit domain events when its state changes (e.g., <code>transfers.submitted</code>, <code>ledger.balance.updated</code>). We need to guarantee exactly-once delivery of these events despite crashes, retries, or network failures.</p> <p>Na\u00efve approaches (publishing to the bus inside app logic) risk double-emits, message loss, or divergence between DB state and events.</p>"},{"location":"00-overview/architecture-decisions/ADR-0001-events-outbox/#decision","title":"Decision","text":"<p>Every service must implement the Outbox pattern:</p> <ul> <li>State change + outbox row are persisted in the same database transaction.  </li> <li>A background dispatcher process reads the outbox table and publishes events to the bus (SNS/SQS).  </li> <li>Consumers are idempotent (dedupe by <code>eventId</code> and <code>transferId+state</code>).  </li> <li>Failed publishes are retried with exponential backoff.  </li> <li>DLQ (dead-letter queue) captures poison events.  </li> </ul>"},{"location":"00-overview/architecture-decisions/ADR-0001-events-outbox/#consequences","title":"Consequences","text":"<ul> <li>Strong delivery semantics: events are published exactly once if possible, at least once otherwise, never zero.  </li> <li>Event consumers may see duplicates, so idempotency is required.  </li> <li>Storage overhead: each service maintains its own outbox table.  </li> <li>Operationally: requires monitoring dispatch lag, DLQ size, and retries.  </li> </ul>"},{"location":"00-overview/architecture-decisions/ADR-0001-events-outbox/#alternatives-considered","title":"Alternatives Considered","text":"<ul> <li>Two-phase commit with DB + broker \u2192 rejected (complex, brittle).  </li> <li>\"Best effort\" publish outside txn \u2192 rejected (event loss possible).  </li> </ul> <p>Next Steps: - Scaffold outbox table schema in <code>platform-base</code>. - Provide Go lib for services to use out-of-the-box (insert, dispatch, metrics).  </p>"},{"location":"00-overview/architecture-decisions/ADR-0002-double-entry-ledger/","title":"ADR-0002: Ledger is Double-Entry and Append-Only","text":"<p>Status: Accepted Date: 2025-08-26</p>"},{"location":"00-overview/architecture-decisions/ADR-0002-double-entry-ledger/#context","title":"Context","text":"<p>Storo must provide an authoritative record of money movement across rails. Financial correctness requires:</p> <ul> <li>Balances that always reconcile.  </li> <li>Auditability of every change.  </li> <li>Ability to reverse but never delete.  </li> </ul>"},{"location":"00-overview/architecture-decisions/ADR-0002-double-entry-ledger/#decision","title":"Decision","text":"<p>The Ledger Service is a strict double-entry, append-only system:</p> <ul> <li>Every posting is a pair: debit one account, credit another, amounts equal.  </li> <li>Postings are immutable. Reversals are represented as new entries.  </li> <li>Balances are derived from postings (materialized views are allowed).  </li> <li>Accounts include User, Merchant, Liquidity, Fees, FX, Settlement, Reserves.  </li> <li>Ledger consumes events (accepted, settled, returned) and applies posting rules.  </li> </ul>"},{"location":"00-overview/architecture-decisions/ADR-0002-double-entry-ledger/#consequences","title":"Consequences","text":"<ul> <li>Strong audit trail. No hidden state.  </li> <li>Easy reconciliation with external statements.  </li> <li>Slightly more complex reversal flows (explicit contra postings).  </li> <li>Storage grows unbounded (mitigated with archiving, partitioning).  </li> </ul>"},{"location":"00-overview/architecture-decisions/ADR-0002-double-entry-ledger/#alternatives-considered","title":"Alternatives Considered","text":"<ul> <li>Single-entry balances updated in place \u2192 rejected (non-auditable, error-prone).  </li> <li>Event-sourcing without explicit double-entry \u2192 rejected (money truth must be explicit).  </li> </ul> <p>Next Steps: - Define posting rules in <code>20-specs/posting-rules.md</code>. - Provide Go lib for posting validation (debits == credits).  </p>"},{"location":"00-overview/architecture-decisions/ADR-0003-contracts-first/","title":"ADR-0003: Contracts-First via storo-specs Repo","text":"<p>Status: Accepted Date: 2025-08-26</p>"},{"location":"00-overview/architecture-decisions/ADR-0003-contracts-first/#context","title":"Context","text":"<p>Multiple services (CTS, gateways, ledger, compliance) need to interoperate. To avoid coupling and drift, we must define shared contracts (events, APIs) in a single source of truth.</p> <p>Moov\u2019s practice and our nucleus design both point to contract-first development.  </p>"},{"location":"00-overview/architecture-decisions/ADR-0003-contracts-first/#decision","title":"Decision","text":"<p>We establish a dedicated repo: storo-specs. It will contain:</p> <ul> <li>Event Schemas (JSON Schema) for all domain events.  </li> <li>API Definitions (OpenAPI/Swagger) for HTTP APIs (e.g., CTS).  </li> <li>Golden Fixtures (JSON) for canonical test cases.  </li> <li>Codegen scripts to publish:  </li> <li>Go structs/validators \u2192 <code>github.com/storo/specs-go</code> </li> <li>TS types/clients \u2192 <code>@storo/specs</code> (npm)</li> </ul> <p>Services must pin to tagged releases of <code>storo-specs</code> and validate at CI.  </p>"},{"location":"00-overview/architecture-decisions/ADR-0003-contracts-first/#consequences","title":"Consequences","text":"<ul> <li>Ensures consistency: all services emit/consume the same event shapes.  </li> <li>Enables language-agnostic clients (Go + TS at minimum).  </li> <li>Introduces one more repo to manage.  </li> <li>Requires discipline around versioning and compatibility (semver).  </li> </ul>"},{"location":"00-overview/architecture-decisions/ADR-0003-contracts-first/#alternatives-considered","title":"Alternatives Considered","text":"<ul> <li>Duplicating schemas in each repo \u2192 rejected (guaranteed drift).  </li> <li>Informal \u201cREADME spec\u201d \u2192 rejected (non-machine-verifiable).  </li> </ul> <p>Next Steps: - Scaffold <code>storo-specs</code> with <code>events/</code>, <code>api/</code>, <code>fixtures/</code>. - Add CI to validate schemas + generate Go/TS packages. - Update service templates to import from <code>storo-specs</code>.  </p>"},{"location":"10-components/canonical-transfer-service/","title":"Canonical Transfer Service (CTS)","text":"<p>The Canonical Transfer Service (CTS) is the front door and conductor of Storo. It provides a single API for creating and managing transfers, normalizes requests into a canonical format, enforces idempotency, screens entities, routes transfers, and emits domain events.</p>"},{"location":"10-components/canonical-transfer-service/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Provide a unified API for all transfers (payments, payouts, pushes, pulls).  </li> <li>Normalize requests into a canonical model independent of rail quirks.  </li> <li>Act as the orchestrator for transfer lifecycle events.  </li> <li>Enforce idempotency across client submissions.  </li> <li>Ensure compliance screening before any transfer reaches a rail.  </li> <li>Emit domain events (<code>transfers.*</code>) so all state changes are visible and auditable.  </li> </ul>"},{"location":"10-components/canonical-transfer-service/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Accept API requests (<code>POST /transfers</code>, <code>GET /transfers/:id</code>).  </li> <li>Deduplicate requests using idempotency keys and hashes.  </li> <li>Validate and normalize inputs into the canonical transfer schema.  </li> <li>Pre-screen payer and payee using the Compliance service.  </li> <li>Route transfers through the Directory &amp; Routing service.  </li> <li>Emit events (<code>initiated</code>, <code>submitted.&lt;rail&gt;</code>) via the outbox.  </li> <li>Track lifecycle state for each transfer.  </li> </ul>"},{"location":"10-components/canonical-transfer-service/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/canonical-transfer-service/#api-endpoints","title":"API Endpoints","text":"<ul> <li><code>POST /transfers</code> </li> <li>Create a new transfer.  </li> <li>Requires <code>Idempotency-Key</code> header.  </li> <li> <p>Body: canonical transfer schema.  </p> </li> <li> <p><code>GET /transfers/:id</code> </p> </li> <li>Fetch transfer details including timeline of events.  </li> </ul>"},{"location":"10-components/canonical-transfer-service/#event-topics","title":"Event Topics","text":"<ul> <li>Emits:</li> <li><code>transfers.initiated</code></li> <li><code>transfers.submitted.&lt;rail&gt;</code></li> <li>Consumes:</li> <li><code>transfers.accepted</code></li> <li><code>transfers.settled</code></li> <li><code>transfers.returned</code></li> <li><code>transfers.failed</code></li> </ul>"},{"location":"10-components/canonical-transfer-service/#data-model","title":"\ud83d\uddc4 Data Model","text":"<p>Table: <code>transfers</code> - <code>transferId</code> (PK) - <code>tenantId</code> - <code>payer</code>, <code>payee</code> (JSON) - <code>amount { value, currency }</code> - <code>rail</code> - <code>intent</code> (AUTH | CAPTURE | PUSH | PULL) - <code>externalRef</code> - <code>state</code> (INITIATED, SUBMITTED, \u2026) - <code>createdAt</code>, <code>updatedAt</code> </p> <p>Table: <code>transfer_events</code> - <code>eventId</code> - <code>transferId</code> (FK) - <code>type</code> - <code>payload</code> (JSON) - <code>occurredAt</code> </p> <p>Table: <code>outbox_transfers</code> - Standard outbox pattern for exactly-once event publishing.  </p>"},{"location":"10-components/canonical-transfer-service/#diagram","title":"\ud83d\udcd0 Diagram","text":""},{"location":"10-components/canonical-transfer-service/#sequence-happy-path-usdc-transfer","title":"Sequence: Happy Path (USDC transfer)","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant CTS as Canonical Transfer Service\n  participant CS as Compliance\n  participant DR as Directory\n  participant GW as Rail Gateway (USDC)\n\n  Client-&gt;&gt;CTS: POST /transfers (idempotency-key)\n  CTS-&gt;&gt;CTS: Deduplicate &amp; normalize\n  CTS-&gt;&gt;CS: Pre-screen payer/payee\n  CS--&gt;&gt;CTS: Allow\n  CTS-&gt;&gt;DR: Lookup route\n  DR--&gt;&gt;CTS: Rail endpoint\n  CTS-&gt;&gt;CTS: Persist transfer, state=SUBMITTED\n  CTS-&gt;&gt;GW: Event transfers.submitted.usdc\n  GW--&gt;&gt;CTS: Event transfers.accepted\n  GW--&gt;&gt;CTS: Event transfers.settled\n  CTS-&gt;&gt;Client: 200 OK { state: SETTLED }</code></pre>"},{"location":"10-components/canonical-transfer-service/#failure-modes-retries","title":"\ud83d\udea8 Failure Modes &amp; Retries","text":"<ul> <li>Duplicate submission \u2192 return existing transfer (idempotent).  </li> <li>Compliance = deny \u2192 return 422 EntityDenied.  </li> <li>Directory lookup fails \u2192 return 502 RoutingUnavailable.  </li> <li>Rail submission fails \u2192 state = FAILED, event emitted.  </li> <li>Outbox publish failure \u2192 retry with exponential backoff.  </li> </ul>"},{"location":"10-components/canonical-transfer-service/#observability","title":"\ud83d\udcca Observability","text":"<p>Metrics - API latency (p95, p99). - Idempotency collision rate. - Compliance check latency. - Transfers by state (submitted, settled, returned).  </p> <p>Logs - Structured JSON with transferId, tenantId, eventId.  </p> <p>Tracing - Propagate request IDs through to gateways and ledger.  </p>"},{"location":"10-components/canonical-transfer-service/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>API authentication with tenant-level keys/tokens.  </li> <li>All PII (payer/payee) encrypted at rest.  </li> <li>Access to transfer data restricted by tenant scope.  </li> <li>Logs redact sensitive fields (names, IDs, PANs).  </li> </ul>"},{"location":"10-components/canonical-transfer-service/#runbooks","title":"\ud83d\udcd8 Runbooks","text":"<ul> <li>If API latency spikes \u2192 check compliance and directory service dependencies.  </li> <li>If transfers stuck in SUBMITTED \u2192 inspect gateway outbox and retry queue.  </li> <li>If idempotency collisions increase \u2192 confirm client integration is using stable Idempotency-Key.  </li> <li>If compliance service is unreachable \u2192 all submissions should fail-safe (no unscreened transfers).  </li> </ul>"},{"location":"10-components/compliance-screening/","title":"Compliance Screening Service","text":"<p>The Compliance Screening Service protects Storo by screening entities (payer, payee) against sanctions and risk lists before transfers are submitted to rails. It ensures fast, local allow/deny decisions and continuous re-screening as lists update.</p>"},{"location":"10-components/compliance-screening/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Enforce pre-submit screening of entities against sanctions lists.  </li> <li>Perform delta re-screens when lists update.  </li> <li>Cache results for performance.  </li> <li>Emit entity flagged events for operator review.  </li> <li>Provide a simple, auditable <code>/screen</code> API.</li> </ul>"},{"location":"10-components/compliance-screening/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Ingest official sanctions/watchlists (OFAC, UN, EU, SA FIC).  </li> <li>Normalize and index names, aliases, DOBs, countries.  </li> <li>Provide low-latency API for CTS screening.  </li> <li>Emit alerts when existing entities match new list entries.  </li> <li>Store results with versioned list references for audit.</li> </ul>"},{"location":"10-components/compliance-screening/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/compliance-screening/#http","title":"HTTP","text":"<ul> <li><code>POST /screen</code></li> <li>body: <code>{ name, dob?, country?, idNumber? }</code></li> <li>returns: <code>{ action: allow|deny, score, matches[], listVersion }</code></li> </ul>"},{"location":"10-components/compliance-screening/#events-emit","title":"Events (emit)","text":"<ul> <li><code>compliance.entity.flagged</code></li> <li><code>{ entityId, transferId?, score, listVersion, matches[] }</code></li> </ul>"},{"location":"10-components/compliance-screening/#admin","title":"Admin","text":"<ul> <li><code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code></li> </ul>"},{"location":"10-components/compliance-screening/#data-model","title":"\ud83d\uddc4 Data Model","text":"<ul> <li><code>lists_raw</code> (source files)  </li> <li><code>lists_index</code> (normalized searchable index)  </li> <li><code>entity_screenings</code> (entityId, transferId, result, listVersion, createdAt)  </li> <li><code>outbox_compliance</code> </li> </ul>"},{"location":"10-components/compliance-screening/#sequence","title":"\ud83d\udcd0 Sequence","text":"<pre><code>sequenceDiagram\n  participant CTS\n  participant CS as Compliance Service\n  participant LIST as Sanctions Lists\n\n  CTS-&gt;&gt;CS: POST /screen (payer, payee)\n  CS-&gt;&gt;LIST: query local index\n  LIST--&gt;&gt;CS: result { score, matches }\n  CS--&gt;&gt;CTS: { action: allow }</code></pre>"},{"location":"10-components/compliance-screening/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>List download failed \u2192 keep prior index, raise alert.  </li> <li>Timeout \u2192 CTS fails safe (deny).  </li> <li>False positive \u2192 escalate via Operator Console.  </li> <li>Stale index \u2192 emit compliance.service.stale event.</li> </ul>"},{"location":"10-components/compliance-screening/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: screening latency, match rate, stale index age.  </li> <li>Logs: structured with entityId, listVersion.  </li> <li>Alerts on stale index &gt; 24h.</li> </ul>"},{"location":"10-components/compliance-screening/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Encrypt raw list data at rest.  </li> <li>PII redaction in logs.  </li> <li>Access control to screening API by internal services only.</li> </ul>"},{"location":"10-components/compliance-screening/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>New list version failed ingest \u2192 re-run job manually, validate checksums.  </li> <li>High false positives \u2192 adjust fuzzy matching thresholds, add alias list.  </li> <li>Operator override \u2192 freeze/unfreeze entity in Operator Console.</li> </ul>"},{"location":"10-components/directory-routing/","title":"Directory &amp; Routing Service","text":"<p>The Directory &amp; Routing Service is Storo\u2019s authoritative source of rails metadata. It ensures transfers are routed deterministically to the correct rail endpoints, institutions, and fee structures.</p>"},{"location":"10-components/directory-routing/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Maintain authoritative directory of institutions, BINs, fees, settlement windows.  </li> <li>Provide fast lookups for CTS routing decisions.  </li> <li>Refresh data periodically from external sources.  </li> <li>Support effective-dated changes (versioning).</li> </ul>"},{"location":"10-components/directory-routing/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Store and expose institution metadata.  </li> <li>Expose routing lookups (<code>/routes?bin=...</code>) for CTS.  </li> <li>Apply per-rail/per-tenant fees and cutoffs.  </li> <li>Circuit-breaker fallback to cached versions.  </li> <li>Version data for audit and rollback.</li> </ul>"},{"location":"10-components/directory-routing/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/directory-routing/#http","title":"HTTP","text":"<ul> <li> <p><code>GET /routes?bin|memberId|rail=...</code>   \u2192 <code>{ endpoint, fees, settlementWindow, constraints }</code></p> </li> <li> <p><code>GET /institutions/:id</code>   \u2192 <code>{ id, name, rail, endpoint, fees, windows }</code></p> </li> </ul>"},{"location":"10-components/directory-routing/#events-emit","title":"Events (emit)","text":"<ul> <li><code>directory.version.updated</code> </li> <li><code>{ versionId, effectiveFrom, source, checksum }</code></li> </ul>"},{"location":"10-components/directory-routing/#data-model","title":"\ud83d\uddc4 Data Model","text":"<ul> <li><code>institutions</code> (id, name, rail, endpoint, status)  </li> <li><code>bins</code> (bin, institutionId, effectiveFrom/to)  </li> <li><code>fees</code> (tenantId, rail, feeType, value, effectiveFrom/to)  </li> <li><code>windows</code> (rail, cutoffTimes, timezone)  </li> <li><code>directory_versions</code> </li> <li><code>outbox_directory</code> </li> </ul>"},{"location":"10-components/directory-routing/#sequence","title":"\ud83d\udcd0 Sequence","text":"<pre><code>sequenceDiagram\n  participant CTS\n  participant DR as Directory\n  participant EXT as External Source\n\n  CTS-&gt;&gt;DR: GET /routes?bin=438742\n  DR-&gt;&gt;DR: lookup BIN \u2192 institution \u2192 endpoint\n  DR--&gt;&gt;CTS: { endpoint, fees, window }\n  DR-&gt;&gt;EXT: scheduled refresh (daily)\n  EXT--&gt;&gt;DR: new version\n  DR--&gt;&gt;CTS: directory.version.updated</code></pre>"},{"location":"10-components/directory-routing/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>Unknown BIN \u2192 return error <code>ROUTE_NOT_FOUND</code>.  </li> <li>Source unavailable \u2192 keep prior version, alert ops.  </li> <li>Fee mismatch \u2192 reconciliation alerts via Operator Console.</li> </ul>"},{"location":"10-components/directory-routing/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: lookup latency, cache hit rate, version age.  </li> <li>Logs: institutionId, versionId.  </li> <li>Alerts: stale version &gt; SLA.</li> </ul>"},{"location":"10-components/directory-routing/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Access control: only CTS and gateways query directory.  </li> <li>Version artifacts signed and checksummed.</li> </ul>"},{"location":"10-components/directory-routing/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>Stale directory \u2192 re-run refresh job.  </li> <li>Incorrect fee \u2192 override with effectiveFrom and patch ADR.  </li> <li>BIN not routing \u2192 add mapping, redeploy version.</li> </ul>"},{"location":"10-components/event-bus-outbox/","title":"Event Bus &amp; Outbox Infrastructure","text":"<p>The Event Bus + Outbox pattern guarantees reliable, exactly-once delivery of domain events across Storo\u2019s services.</p>"},{"location":"10-components/event-bus-outbox/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Ensure atomic state + event publishing.  </li> <li>Enable loose coupling between services.  </li> <li>Provide auditability of all domain events.  </li> <li>Support retries &amp; idempotency safely.</li> </ul>"},{"location":"10-components/event-bus-outbox/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Each service writes events to a local outbox table within the same DB transaction as state changes.  </li> <li>A dispatcher process drains the outbox and publishes to the bus.  </li> <li>Consumers are idempotent and dedupe events.  </li> <li>Provide metrics, retries, and dead-letter handling.</li> </ul>"},{"location":"10-components/event-bus-outbox/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/event-bus-outbox/#events","title":"Events","text":"<ul> <li>Topics: <code>transfers.*</code>, <code>ledger.*</code>, <code>compliance.*</code>, <code>recon.*</code> </li> <li>Envelope: <pre><code>{\n  \"eventId\": \"uuid\",\n  \"type\": \"transfers.settled\",\n  \"occurredAt\": \"2025-08-26T10:15:01Z\",\n  \"transferId\": \"tr_123\",\n  \"payload\": { ... }\n}\n</code></pre></li> </ul>"},{"location":"10-components/event-bus-outbox/#admin","title":"Admin","text":"<ul> <li><code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code></li> </ul>"},{"location":"10-components/event-bus-outbox/#data-model","title":"\ud83d\uddc4 Data Model","text":"<ul> <li><code>outbox</code> (id, eventType, payload, state=PENDING|SENT|FAILED, createdAt)  </li> <li><code>inbox</code> (for dedupe, optional: eventId, processedAt)  </li> </ul>"},{"location":"10-components/event-bus-outbox/#sequence","title":"\ud83d\udcd0 Sequence","text":"<pre><code>sequenceDiagram\n  participant S as Service\n  participant OB as Outbox\n  participant BUS as Event Bus\n  participant C as Consumer\n\n  S-&gt;&gt;OB: write state + event in txn\n  OB-&gt;&gt;BUS: dispatcher publishes\n  BUS--&gt;&gt;C: event delivered\n  C-&gt;&gt;C: idempotency check\n  C--&gt;&gt;BUS: ack</code></pre>"},{"location":"10-components/event-bus-outbox/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>Dispatcher crash \u2192 resume from last PENDING.  </li> <li>Duplicate delivery \u2192 consumer dedupe by eventId.  </li> <li>Bus outage \u2192 outbox backlog grows, alert ops.  </li> </ul>"},{"location":"10-components/event-bus-outbox/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: outbox backlog size, publish latency, consumer lag.  </li> <li>Logs: structured with eventId, transferId.  </li> <li>Alerts: backlog &gt; SLA.</li> </ul>"},{"location":"10-components/event-bus-outbox/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Encrypt outbox payloads at rest if PII present.  </li> <li>Access controls on bus topics.  </li> </ul>"},{"location":"10-components/event-bus-outbox/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>Backlog spike \u2192 check bus health, dispatcher logs.  </li> <li>Consumer lag \u2192 verify consumer ack logic.  </li> <li>Duplicate flood \u2192 inspect dedupe store.  </li> </ul>"},{"location":"10-components/ledger-service/","title":"Ledger Service","text":"<p>The Ledger Service is Storo\u2019s book of record. It maintains double\u2011entry journals, computes balances, exposes statements, and guarantees that every money movement is represented by a balanced set of postings. If it isn\u2019t posted here, it didn\u2019t happen.</p>"},{"location":"10-components/ledger-service/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Enforce double\u2011entry accounting for all transfers across rails.  </li> <li>Provide authoritative balances and auditable journals.  </li> <li>Support authorization \u2192 capture \u2192 reversal/return lifecycles.  </li> <li>Handle multi\u2011currency with explicit FX conversion and P&amp;L.  </li> <li>Export partner statements (BAI2\u2011like) and support reconciliation.</li> </ul>"},{"location":"10-components/ledger-service/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Consume domain events and apply posting rules:</li> <li><code>transfers.accepted</code> (hold / memo postings where applicable)</li> <li><code>transfers.settled</code> (final postings)</li> <li><code>transfers.returned</code> (reversal postings)</li> <li>Maintain derived balances (by account, currency).  </li> <li>Emit <code>ledger.balance.updated</code> and <code>ledger.posting.created</code>.  </li> <li>Provide read APIs: balances, journals, statements.  </li> <li>Guard rails: append\u2011only journals; reversals via new entries only.</li> </ul>"},{"location":"10-components/ledger-service/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/ledger-service/#events-consume","title":"Events (consume)","text":"<ul> <li><code>transfers.accepted</code></li> <li><code>transfers.settled</code></li> <li><code>transfers.returned</code></li> </ul>"},{"location":"10-components/ledger-service/#events-emit","title":"Events (emit)","text":"<ul> <li><code>ledger.posting.created</code></li> <li><code>ledger.balance.updated</code></li> </ul>"},{"location":"10-components/ledger-service/#http-readonly","title":"HTTP (read\u2011only)","text":"<ul> <li><code>GET /balances?accountId=...&amp;currency=...</code></li> <li><code>GET /journal?transferId=...</code> or <code>?accountId=...&amp;from=...&amp;to=...</code></li> <li><code>GET /statements?accountId=...&amp;from=...&amp;to=...&amp;format=bai2|json</code></li> </ul> <p>Write access is event\u2011driven only. Manual adjustments are rare and must go through the Operator Console using explicit adjustment events with approvals/audit.</p>"},{"location":"10-components/ledger-service/#data-model","title":"\ud83d\uddc4 Data Model","text":"<p>tables - <code>accounts</code>   - <code>accountId</code> (pk), <code>type</code> (USER|MERCHANT|LIQUIDITY|FEES|FX|SETTLEMENT|RESERVE), <code>tenantId?</code>, <code>currency?</code> (nullable if multi\u2011currency), <code>status</code>, <code>createdAt</code> - <code>journals</code> (immutable)   - <code>journalId</code> (pk), <code>transferId</code>, <code>eventType</code>, <code>occurredAt</code>, <code>memo</code> - <code>postings</code> (append\u2011only)   - <code>postingId</code> (pk), <code>journalId</code> (fk), <code>debitAccountId</code>, <code>creditAccountId</code>, <code>amountMinor</code>, <code>currency</code>, <code>memo</code> - <code>balances</code> (materialized)   - <code>accountId</code>, <code>currency</code>, <code>balanceMinor</code>, <code>asOf</code> - <code>outbox_ledger</code> \u2013 for emitted events</p> <p>blobs (encrypted) - optional statement snapshots; export artifacts</p>"},{"location":"10-components/ledger-service/#posting-rules-canonical","title":"\ud83e\uddee Posting Rules (canonical)","text":"<p>All amounts are in minor units (e.g., cents). Examples assume a customer pays a merchant 100.00 with a 1.00 fee.</p>"},{"location":"10-components/ledger-service/#1-accepted-authorization-hold-rails-that-support-authcapture","title":"1) Accepted (authorization / hold) \u2014 rails that support AUTH/CAPTURE","text":"<p>Create memo/hold journal (off\u2011balance or flagged): - Debit: <code>USER_AUTH_HOLD</code> (memo) \u2014 10000 - Credit: <code>LIQUIDITY_AUTH_PENDING</code> (memo) \u2014 10000</p> <p>If the rail has no auth concept (e.g., USDC push), no accepted postings are created.</p>"},{"location":"10-components/ledger-service/#2-settled-final-funds-move","title":"2) Settled (final funds move)","text":"<p>Core settlement postings: - Debit: <code>USER</code> \u2014 10000 - Credit: <code>MERCHANT</code> \u2014 9900 - Credit: <code>FEES</code> \u2014 100   (Storo take rate)</p> <p>If FX occurs (payer USD \u2192 merchant ZAR), split legs: - Debit: <code>USER</code> \u2014 10000 USD - Credit: <code>LIQUIDITY</code> \u2014 10000 USD - Debit: <code>LIQUIDITY</code> \u2014 180000 ZAR - Credit: <code>MERCHANT</code> \u2014 180000 ZAR - Credit/Debit: <code>FX_PNL</code> \u2014 difference from quoted vs realized</p>"},{"location":"10-components/ledger-service/#3-returned-chargeback-reverse-prior-settled","title":"3) Returned / Chargeback (reverse prior settled)","text":"<p>Post the exact contra of the settlement set, preserving original currency: - Debit: <code>MERCHANT</code> \u2014 9900 - Debit: <code>FEES</code> \u2014 100   (or use <code>FEES_REVERSAL</code> to separate) - Credit: <code>USER</code> \u2014 10000</p> <p>For partial returns, amounts reflect the returned portion; keep link to original journal via <code>relatedJournalId</code> (in <code>journals.memo</code>).</p>"},{"location":"10-components/ledger-service/#4-fees-surcharges","title":"4) Fees &amp; Surcharges","text":"<ul> <li>Percentage fees applied at settlement time as separate credit to <code>FEES</code> account.  </li> <li>Per\u2011rail surcharges (e.g., OPPWA) post to <code>FEES_PARTNER</code> account and are netted in reconciliation.</li> </ul>"},{"location":"10-components/ledger-service/#5-rounding","title":"5) Rounding","text":"<ul> <li>Use banker\u2019s rounding when converting decimals \u2192 minor units.  </li> <li>Any rounding residual posts to <code>FX_PNL_ROUNDING</code> (must be near\u2011zero).</li> </ul>"},{"location":"10-components/ledger-service/#diagrams","title":"\ud83d\udcd0 Diagrams","text":""},{"location":"10-components/ledger-service/#event-posting-pipeline","title":"Event \u2192 Posting pipeline","text":"<pre><code>flowchart LR\n  EV[transfers.* event] --&gt; PR[Posting Rules]\n  PR --&gt; JR[Create Journal]\n  JR --&gt; PT[Append Postings (balanced)]\n  PT --&gt; BL[Update Balances]\n  PT --&gt; OE[Emit ledger.posting.created]\n  BL --&gt; BE[Emit ledger.balance.updated]</code></pre>"},{"location":"10-components/ledger-service/#settlement-example-no-fx","title":"Settlement example (no FX)","text":"<pre><code>sequenceDiagram\n  participant GW as Rail Gateway\n  participant L as Ledger\n  participant S as Balance Store\n\n  GW--&gt;&gt;L: transfers.settled {amount=10000, fee=100}\n  L-&gt;&gt;L: create journal J1\n  L-&gt;&gt;L: postings: D USER 10000 / C MERCHANT 9900 / C FEES 100\n  L-&gt;&gt;S: update balances (USER-, MERCHANT+, FEES+)\n  L--&gt;&gt;GW: ledger.posting.created (J1)</code></pre>"},{"location":"10-components/ledger-service/#invariants","title":"\ud83e\uddf1 Invariants","text":"<ul> <li>Balanced: sum(debits) == sum(credits) per journal.  </li> <li>Append\u2011only: no deletes; corrections via new journals.  </li> <li>Idempotent: journal key = hash(<code>transferId</code>,<code>eventType</code>,<code>sequence</code>); duplicates ignored.  </li> <li>Temporal: <code>occurredAt</code> from event; do not rewrite history.</li> </ul>"},{"location":"10-components/ledger-service/#failure-modes-retries","title":"\ud83d\udea8 Failure Modes &amp; Retries","text":"<ul> <li>Duplicate event \u2192 ignored via idempotency key.  </li> <li>Currency mismatch (account vs posting) \u2192 reject and raise operator alert.  </li> <li>Negative balance constraints (if configured) \u2192 block posting and raise exception.  </li> <li>Outbox publish failure \u2192 retry with backoff; no partial commits (journal + outbox in same txn).</li> </ul>"},{"location":"10-components/ledger-service/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: <code>journals/sec</code>, <code>postings/sec</code>, balance update latency, idempotency drop rate.  </li> <li>Gauges: outstanding reversal backlog, FX_PNL daily total.  </li> <li>Logs: structured with <code>transferId</code>, <code>journalId</code>, <code>accountId</code>, <code>currency</code>.  </li> <li>Traces: span across event reception \u2192 journal write \u2192 outbox publish.</li> </ul>"},{"location":"10-components/ledger-service/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Least privilege DB role; append\u2011only constraints at the schema level if possible.  </li> <li>PII: account metadata stored outside postings; journals contain IDs only.  </li> <li>Statement exports signed + timestamped; encrypt artifacts at rest.  </li> <li>Admin endpoints behind service mesh authN/Z; metrics unauthenticated readiness only.</li> </ul>"},{"location":"10-components/ledger-service/#config","title":"\u2699\ufe0f Config","text":"<ul> <li><code>LEDGER_BASE_CURRENCY</code> (reporting), supported currencies.  </li> <li><code>NEGATIVE_BALANCE_POLICY</code> (ALLOW|BLOCK|WARN).  </li> <li><code>FX_QUOTE_SOURCE</code> (provider, TTL).  </li> <li><code>STATEMENT_FORMATS</code> (bai2,json), <code>STATEMENT_TIMEZONE</code>.  </li> <li><code>IDEMPOTENCY_SALT</code> for journal keys.</li> </ul>"},{"location":"10-components/ledger-service/#runbooks","title":"\ud83d\udcd8 Runbooks","text":"<ul> <li>Balances off vs partner \u2192 run T+0/T+1 reconciliation; inspect unmatched queue; verify posting rules version.  </li> <li>FX_PNL spikes \u2192 check quote source latency; ensure correct pair &amp; decimals.  </li> <li>Reversal backlog \u2192 confirm returns events being emitted; investigate gateway DLQs.  </li> <li>Throughput degradation \u2192 check DB contention on <code>balances</code>; consider batched/materialized updates.</li> </ul>"},{"location":"10-components/ledger-service/#slos","title":"\ud83d\udccf SLOs","text":"<ul> <li>Posting latency (P99) \u2264 1s after <code>transfers.settled</code>.  </li> <li>Idempotency duplicate acceptance rate \u2264 0.1%.  </li> <li>Balance read latency (P99) \u2264 200 ms.  </li> <li>Statement generation \u2264 60 s for 100k postings.</li> </ul>"},{"location":"10-components/ledger-service/#test-matrix-essentials","title":"\ud83e\uddea Test Matrix (essentials)","text":"<ul> <li>Round\u2011trip: accepted \u2192 settled \u2192 returned (full &amp; partial).  </li> <li>Multi\u2011currency settlement with FX &amp; rounding residuals.  </li> <li>Idempotency under concurrent duplicates.  </li> <li>Negative balance policy enforcement.  </li> <li>Statement export byte\u2011for\u2011byte determinism for a fixed fixture.</li> </ul>"},{"location":"10-components/ledger-service/#example-journal-posting-payloads","title":"Example: Journal &amp; Posting payloads","text":"<p>Journal (emitted event payload) <pre><code>{\n  \"journalId\": \"jrnl_01HZX...\",\n  \"transferId\": \"tr_01HZY...\",\n  \"eventType\": \"transfers.settled\",\n  \"occurredAt\": \"2025-08-26T10:15:01Z\",\n  \"memo\": \"settlement zimswitch batch 8341\"\n}\n</code></pre></p> <p>Posting (emitted event payload) <pre><code>{\n  \"postingId\": \"pst_01HZ...\",\n  \"journalId\": \"jrnl_01HZX...\",\n  \"debitAccountId\": \"acct_user_123\",\n  \"creditAccountId\": \"acct_merchant_987\",\n  \"amountMinor\": 9900,\n  \"currency\": \"ZAR\",\n  \"memo\": \"net to merchant\"\n}\n</code></pre></p> <p>Bottom line: The Ledger turns messy rail realities into deterministic, balanced, auditable facts. Everything else in Storo depends on this discipline.</p>"},{"location":"10-components/operator-console/","title":"Operator Console","text":"<p>The Operator Console is the human-facing interface for resolving exceptions, monitoring transfers, and acting on compliance/reconciliation workflows.</p>"},{"location":"10-components/operator-console/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Provide operators with clear visibility into transfer timelines.  </li> <li>Enable manual intervention for returns, unmatched items, compliance flags.  </li> <li>Reduce need for engineers to access production systems.  </li> </ul>"},{"location":"10-components/operator-console/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Display transfer timelines (events, postings).  </li> <li>Show queues: returns, reconciliation exceptions, compliance hits.  </li> <li>Allow manual resolution: assign unmatched, trigger return, freeze/unfreeze entity.  </li> <li>Surface system health and metrics dashboards.  </li> </ul>"},{"location":"10-components/operator-console/#interfaces","title":"\ud83d\udd0c Interfaces","text":"<ul> <li>Web UI (internal only, authenticated via SSO).  </li> <li>Reads from CTS, Ledger, Compliance, Recon.  </li> <li>Writes via APIs only (never direct DB):  </li> <li><code>POST /returns</code> </li> <li><code>POST /entity/freeze</code> </li> <li><code>POST /entity/unfreeze</code> </li> </ul>"},{"location":"10-components/operator-console/#sequence","title":"\ud83d\udcd0 Sequence","text":"<pre><code>sequenceDiagram\n  participant O as Operator\n  participant OC as Operator Console\n  participant CTS\n  participant Recon\n  participant Compliance\n\n  O-&gt;&gt;OC: view unmatched\n  OC-&gt;&gt;Recon: GET /exceptions\n  O-&gt;&gt;OC: resolve exception\n  OC-&gt;&gt;CTS: POST /returns {transferId, reason}\n  CTS--&gt;&gt;OC: transfers.returned event</code></pre>"},{"location":"10-components/operator-console/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>Stale data \u2192 refresh from APIs, not cached snapshots.  </li> <li>Unauthorized access \u2192 enforce SSO + RBAC.  </li> <li>Operator error \u2192 require 4-eyes approval for destructive actions (returns, freezes).  </li> </ul>"},{"location":"10-components/operator-console/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Audit log of every operator action (immutable).  </li> <li>Metrics: queue sizes, resolution times.  </li> <li>Alerts: backlog &gt; SLA.</li> </ul>"},{"location":"10-components/operator-console/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>SSO + role-based access (OPS, COMPLIANCE, ADMIN).  </li> <li>Audit trail mandatory.  </li> <li>PII redacted where not necessary.  </li> </ul>"},{"location":"10-components/operator-console/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>Recon backlog \u2192 assign extra operators.  </li> <li>False compliance flag \u2192 unfreeze with reason, record override.  </li> <li>Frequent operator overrides \u2192 escalate rule/threshold tuning.</li> </ul>"},{"location":"10-components/platform-base/","title":"Platform/Base Library","text":"<p>The Platform/Base Library provides shared utilities for all Storo services, ensuring consistency in health checks, IDs, error handling, time logic, and migrations.</p>"},{"location":"10-components/platform-base/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Provide common admin endpoints for all services.  </li> <li>Standardize time, IDs, errors across the stack.  </li> <li>Support embedded migrations/configs.  </li> <li>Simplify observability and operational tooling.</li> </ul>"},{"location":"10-components/platform-base/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Expose <code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code>.  </li> <li>Provide banking-aware time utilities (cutoffs, holidays).  </li> <li>Standardize error handling (ErrorList, ParseError).  </li> <li>Offer ID generation and request tracing.  </li> <li>Embed DB migrations in service binaries.  </li> </ul>"},{"location":"10-components/platform-base/#interfaces","title":"\ud83d\udd0c Interfaces","text":"<ul> <li>Imported as library into all services.  </li> <li>Provides helpers for admin, time, error, IDs, migrations.  </li> </ul>"},{"location":"10-components/platform-base/#example","title":"\ud83d\udcd0 Example","text":"<pre><code>// Health server\nadmin := base.NewAdminServer(\":8081\")\nadmin.AddLivenessCheck(\"db\", db.Ping)\nadmin.Start()\n\n// Time utils\nt := base.Now()\nif t.IsBankingDay() { ... }\n</code></pre>"},{"location":"10-components/platform-base/#modules","title":"\ud83d\uddc4 Modules","text":"<ul> <li>Admin \u2192 liveness, readiness, metrics, version.  </li> <li>Time \u2192 banking days, holidays, cutoffs.  </li> <li>Errors \u2192 ErrorList, ParseError.  </li> <li>IDs \u2192 ID(), correlation IDs.  </li> <li>Migrations \u2192 embedded FS for DB schema upgrades.  </li> </ul>"},{"location":"10-components/platform-base/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Uniform <code>/metrics</code> for Prometheus.  </li> <li>Structured error/logging helpers.  </li> <li>Request tracing correlation.  </li> </ul>"},{"location":"10-components/platform-base/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Admin endpoints on localhost or service mesh only.  </li> <li>No sensitive data in metrics/logs.  </li> </ul>"},{"location":"10-components/platform-base/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>/live fails \u2192 service not running; check logs.  </li> <li>Migration failed \u2192 rollback DB version, re-run migration.  </li> <li>Clock drift \u2192 verify NTP sync; banking-day logic depends on accurate time.</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/","title":"Rail Gateway \u2014 OPPWA (Card / Tokenized Payments)","text":"<p>The OPPWA Gateway adapts Storo canonical transfers to OPPWA (Open Payment Platform) APIs used by acquirers/processors (e.g., for Zimswitch card-present/tokenized flows). It validates payloads, transforms to OPPWA request formats, handles webhooks, and emits domain events.</p>"},{"location":"10-components/rail-gateway-oppwa/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Translate canonical transfers into OPPWA REST calls (payments, preauth/capture, refunds).</li> <li>Enforce strict validation of amounts, currencies, tokens/PAN surrogates, and 3DS/SDK data.</li> <li>Handle sync responses and async webhooks to finalize state.</li> <li>Emit accepted/settled/returned/failed events with mapped reason codes.</li> <li>Persist raw requests/responses (redacted) for audit and reconciliation.</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Subscribe to <code>transfers.submitted.oppwa</code>.</li> <li>Map intents:</li> <li><code>AUTH</code> \u2192 OPPWA <code>preauthorization</code></li> <li><code>CAPTURE</code> \u2192 OPPWA <code>capture</code></li> <li><code>PUSH/PULL</code> (rare for cards) \u2192 treated as <code>debit</code>/<code>credit</code> where supported</li> <li>Build requests using merchant credentials / entity routing.</li> <li>Receive webhooks (<code>/webhooks/oppwa</code>) and correlate to transfers.</li> <li>Emit events and store artifacts; support retries and idempotency keys.</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/rail-gateway-oppwa/#events-consume","title":"Events (consume)","text":"<ul> <li><code>transfers.submitted.oppwa</code></li> <li><code>{ transferId, tenantId, amount, currency, payer, payee, intent, metadata{ token, threeDS, merchantRef } }</code></li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#events-emit","title":"Events (emit)","text":"<ul> <li><code>transfers.accepted</code> \u2192 <code>{ transferId, rail:\"oppwa\", opRef, resultCode }</code></li> <li><code>transfers.settled</code> \u2192 <code>{ transferId, rail:\"oppwa\", opRef, captured:true, settlementDate? }</code></li> <li><code>transfers.returned</code> \u2192 <code>{ transferId, rail:\"oppwa\", opRef, reasonCode }</code></li> <li><code>transfers.failed</code> \u2192 <code>{ transferId, rail:\"oppwa\", reason, details }</code></li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#http","title":"HTTP","text":"<ul> <li><code>POST /webhooks/oppwa</code> (verify signature, parse, correlate)</li> <li>Admin: <code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code></li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#data-model","title":"\ud83d\uddc4 Data Model","text":"<ul> <li>table: <code>oppwa_ops</code></li> <li><code>id</code> (pk), <code>transferId</code>, <code>tenantId</code></li> <li><code>merchantId</code>, <code>entityId</code> (per-tenant/route), <code>opRef</code></li> <li><code>intent</code> (AUTH|CAPTURE|REFUND), <code>amountMinor</code>, <code>currency</code></li> <li><code>status</code> (INIT|ACCEPTED|CAPTURED|RETURNED|FAILED)</li> <li><code>resultCode</code>, <code>reasonCode</code>, <code>riskScore</code> (nullable)</li> <li><code>createdAt</code>, <code>updatedAt</code></li> <li>table: <code>outbox_gateway</code> \u2013 for events</li> <li>blob: redacted request/response JSON snapshots (encrypted), webhook payloads</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#transform-validation","title":"\ud83d\udd01 Transform &amp; Validation","text":"<ul> <li>Currency/amount \u2192 use minor units; reject &gt; 2 dp amounts for fiat.</li> <li>Tokenization \u2192 require network token / OPPWA token; never store PAN.</li> <li>3DS \u2192 include 3DS server results when present; pass-through fields via metadata.</li> <li>Idempotency \u2192 set OPPWA idempotency keys using <code>{tenantId}:{transferId}</code>.</li> <li>Reason mapping \u2192 maintain mapping table from OPPWA result/return codes \u2192 Storo <code>reason</code> enums.</li> <li>Auth/Capture split \u2192 only capture after explicit command or webhook indicating capture.</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#sequence-auth-capture","title":"\ud83d\udcd0 Sequence (Auth \u2192 Capture)","text":"<pre><code>sequenceDiagram\n  participant CTS as Canonical Transfer Service\n  participant GW as OPPWA Gateway\n  participant OPP as OPPWA API\n  participant WH as Webhook Receiver\n\n  CTS-&gt;&gt;GW: transfers.submitted.oppwa (intent=AUTH)\n  GW-&gt;&gt;OPP: POST /payments (preauthorization)\n  OPP--&gt;&gt;GW: 200 result { opRef, resultCode }\n  GW--&gt;&gt;CTS: transfers.accepted { opRef }\n  WH--&gt;&gt;GW: webhook { opRef, captured }\n  GW--&gt;&gt;CTS: transfers.settled { opRef }</code></pre>"},{"location":"10-components/rail-gateway-oppwa/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>DoS/429 from OPPWA \u2192 backoff + retry; escalate if sustained</li> <li>Invalid token / expired \u2192 <code>transfers.failed{reason:\"TOKEN_INVALID\"}</code></li> <li>Chargeback/return \u2192 emit <code>transfers.returned</code> with reason mapping</li> <li>Signature mismatch on webhook \u2192 reject + alert</li> <li>Currency not supported for merchant entity \u2192 fail fast</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: request latency, success rate by intent, webhook processing lag</li> <li>Error buckets by <code>resultCode</code> / <code>reasonCode</code></li> <li>DLQ depth for failed webhooks / submissions</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Verify webhook signatures; rotate secrets</li> <li>Redact PAN-like fields aggressively; tokenize everything</li> <li>Encrypt blobs at rest; least-privileged access to merchant credentials</li> <li>PCI scope: keep CTS and Ledger out of PAN scope; gateway isolates card data</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#config","title":"\u2699\ufe0f Config","text":"<ul> <li><code>OPPWA_BASE_URL</code>, per-tenant <code>ENTITY_ID</code>, <code>MERCHANT_ID</code>, <code>API_KEY</code></li> <li><code>WEBHOOK_SECRET</code>, <code>IDEMPOTENCY_PREFIX</code></li> <li><code>TIMEOUT_MS</code>, <code>RETRY_MAX</code>, <code>BACKOFF</code></li> <li><code>REASON_CODE_MAP</code> (versioned), <code>CURRENCY_ALLOWLIST</code></li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>High 401/403 rates: check API key rotation, entity mapping</li> <li>Webhook gaps: verify public endpoint, firewall, signature; replay from OPPWA portal if available</li> <li>Frequent declines: inspect 3DS setup and tokenization source; check risk engine outcomes</li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/","title":"Rail Gateway \u2014 USDC on Algorand","text":"<p>The USDC/Algorand Gateway adapts Storo\u2019s canonical transfers to on-chain USDC movements on the Algorand network. It validates requests, constructs transactions, submits to the network (via Algod/Indexer/provider), listens for confirmations, and emits domain events.</p>"},{"location":"10-components/rail-gateway-usdc-algo/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Translate canonical transfers into Algorand transactions (ASA transfers).</li> <li>Provide strict validation (asset, amounts, addresses, fees).</li> <li>Handle submission and confirmation with retries and reorg safety.</li> <li>Emit transfers.accepted / transfers.settled / transfers.failed as reality unfolds.</li> <li>Persist raw tx metadata for audit and reconciliation.</li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Subscribe to <code>transfers.submitted.usdc</code> events.</li> <li>Validate: payer/payee accounts, ASA ID (USDC), decimals, amount, memo fields, network params.</li> <li>Construct and sign transactions (online hot wallet or external signer/HSM).</li> <li>Submit to network; poll or subscribe for confirmations (N blocks).</li> <li>Emit outcome events and persist artifacts (txid, round, fees).</li> <li>Surface health (<code>/live</code>, <code>/ready</code>), metrics, version via Platform/Base.</li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/rail-gateway-usdc-algo/#events-consume","title":"Events (consume)","text":"<ul> <li><code>transfers.submitted.usdc</code></li> <li>payload: <code>{ transferId, tenantId, amount{value,currency}, payer, payee, intent: \"PUSH\"|\"PULL\"|\"CAPTURE\"|\"AUTH\", metadata{} }</code></li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#events-emit","title":"Events (emit)","text":"<ul> <li><code>transfers.accepted</code> \u2192 <code>{ transferId, rail:\"usdc-algo\", txId, suggestedRound }</code></li> <li><code>transfers.settled</code> \u2192 <code>{ transferId, rail:\"usdc-algo\", txId, confirmedRound, feeMicroAlgos }</code></li> <li><code>transfers.failed</code> \u2192 <code>{ transferId, rail:\"usdc-algo\", reason, details }</code></li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#http-admin","title":"HTTP (admin)","text":"<ul> <li><code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code></li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#data-model","title":"\ud83d\uddc4 Data Model","text":"<ul> <li>table: <code>usdc_algo_tx</code></li> <li><code>id</code> (pk), <code>transferId</code>, <code>tenantId</code></li> <li><code>txId</code>, <code>firstValid</code>, <code>lastValid</code>, <code>confirmedRound</code></li> <li><code>payerAddr</code>, <code>payeeAddr</code>, <code>amountBaseUnits</code> (int)</li> <li><code>feeMicroAlgos</code>, <code>note</code> (base64), <code>network</code> (mainnet/testnet)</li> <li><code>status</code> (PENDING|CONFIRMED|FAILED), <code>error</code> (nullable)</li> <li><code>createdAt</code>, <code>updatedAt</code></li> <li>table: <code>outbox_gateway</code> \u2013 standard outbox for event publishing</li> </ul> <p>Raw payloads (signed txn, provider receipts) should be stored encrypted in blob storage with references here.</p>"},{"location":"10-components/rail-gateway-usdc-algo/#transform-validation","title":"\ud83d\udd01 Transform &amp; Validation","text":"<ul> <li>Currency must be <code>USD</code> with USDC ASA mapped to <code>assetId</code> (config).</li> <li>Decimals: Convert from canonical decimal to base units (10^decimals).</li> <li>Addresses: Bech32/base32 Algorand addresses; ensure payer has opted-in to ASA.</li> <li>Fees: Enforce min fee; allow overpay for fast confirm (config).</li> <li>Auth/Capture: On-chain AUTH is simulated via escrow account or timelocked pattern (optional, roadmap). Default intent is PUSH.</li> <li>Memo/Note: Encode limited metadata in <code>note</code> (&lt;= 1 KB best practice). Do not put PII in chain notes.</li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#sequence-happy-path","title":"\ud83d\udcd0 Sequence (Happy Path)","text":"<pre><code>sequenceDiagram\n  participant CTS as Canonical Transfer Service\n  participant GW as USDC/Algorand Gateway\n  participant ALG as Algorand Network\n\n  CTS-&gt;&gt;GW: transfers.submitted.usdc\n  GW-&gt;&gt;GW: validate + build txn\n  GW-&gt;&gt;ALG: submit signed txn\n  ALG--&gt;&gt;GW: tx accepted (txId)\n  GW--&gt;&gt;CTS: transfers.accepted {txId}\n  ALG--&gt;&gt;GW: confirmed at round N\n  GW--&gt;&gt;CTS: transfers.settled {txId, round}</code></pre>"},{"location":"10-components/rail-gateway-usdc-algo/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>Invalid account / not opted-in \u2192 <code>transfers.failed{reason:\"NOT_OPTED_IN\"}</code></li> <li>Insufficient balance / fee \u2192 <code>...{\"INSUFFICIENT_FUNDS\"}</code></li> <li>RPC/provider timeout \u2192 retry with backoff; surface <code>accepted</code> only after tx is seen</li> <li>Chain reorg / orphan (rare on Algorand) \u2192 re-check finality window, re-emit <code>failed</code> if dropped</li> <li>Signer/HSM unavailable \u2192 circuit break, keep events in DLQ</li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: submit latency, confirmation latency, success rate, DLQ size, provider error codes</li> <li>Logs: txId, transferId, address short-hash, round; no PII</li> <li>Traces: propagate <code>x-request-id</code> / <code>trace-id</code> from CTS</li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Keys in HSM or isolated signer; never log material</li> <li>Principle of least privilege on provider API keys</li> <li>Encrypt raw signed txn artifacts at rest</li> <li>Feature flag to disable on-chain <code>note</code></li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#config","title":"\u2699\ufe0f Config","text":"<ul> <li><code>ALGOD_URL</code>, <code>ALGOD_TOKEN</code>, <code>INDEXER_URL</code></li> <li><code>USDC_ASSET_ID</code>, <code>DECIMALS</code></li> <li><code>CONFIRMATIONS</code> (blocks), <code>SUBMIT_RETRY_MAX</code></li> <li><code>SIGNER_ENDPOINT</code> (optional), <code>NETWORK</code></li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>Stuck in PENDING: check provider status; if mempool full, rebroadcast; verify fee</li> <li>Frequent INSUFFICIENT_FUNDS: inspect payer funding policy; enable preflight balance check</li> <li>High confirmation latency: increase fee or confirmation window temporarily</li> <li>Signer down: fail closed; drain DLQ after recovery</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/","title":"Rail Gateway \u2014 Zimswitch (Card / ISO 8583 via OPPWA)","text":"<p>The Zimswitch Gateway adapts Storo canonical transfers to Zimswitch-connected acquiring via OPPWA/ISO 8583 semantics. It validates messages, transforms to processor requests, handles callbacks/settlement files, and emits domain events.</p> <p>Note: Some Zimswitch integrations front with OPPWA JSON APIs while the underlying network uses ISO 8583. We model both: primary REST submission with strict ISO field discipline in validation and mapping.</p>"},{"location":"10-components/rail-gateway-zimswitch/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Translate canonical transfers to Zimswitch/OPPWA requests with ISO-grade validation.</li> <li>Support card-present (tap-on-phone, online) and card-not-present (tokenized) flows where permitted.</li> <li>Handle accept/settle/return lifecycle + reconciliation with daily settlement files.</li> <li>Emit domain events with mapped reason codes and retain artifacts for audit.</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Subscribe to <code>transfers.submitted.zimswitch</code>.</li> <li>Validate BIN/member routing via Directory &amp; Routing.</li> <li>Construct request: amount, currency (ZWL/ZAR/USD), merchant data, token/PAN surrogate, terminal capabilities.</li> <li>Submit to processor; handle synchronous result and async callbacks.</li> <li>Ingest settlement files (daily) for reconciliation and late returns.</li> <li>Emit <code>accepted/settled/returned/failed</code> and store payloads (redacted).</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/rail-gateway-zimswitch/#events-consume","title":"Events (consume)","text":"<ul> <li><code>transfers.submitted.zimswitch</code></li> <li><code>{ transferId, tenantId, amount, currency, payer, payee, intent, metadata{ token|panRef, emv, terminal, merchantRef } }</code></li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#events-emit","title":"Events (emit)","text":"<ul> <li><code>transfers.accepted</code> \u2192 <code>{ transferId, rail:\"zimswitch\", acqRef, authCode }</code></li> <li><code>transfers.settled</code> \u2192 <code>{ transferId, rail:\"zimswitch\", settlementDate, batchId? }</code></li> <li><code>transfers.returned</code> \u2192 <code>{ transferId, rail:\"zimswitch\", reasonCode }</code></li> <li><code>transfers.failed</code> \u2192 <code>{ transferId, rail:\"zimswitch\", reason, details }</code></li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#http","title":"HTTP","text":"<ul> <li><code>POST /webhooks/zimswitch</code> (if using REST front-end)</li> <li>Admin: <code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code></li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#files-reconciliation","title":"Files / Reconciliation","text":"<ul> <li>Consume settlement/return files delivered by processor; normalize to <code>StatementLine</code> and emit <code>recon.statement.ingested</code></li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#data-model","title":"\ud83d\uddc4 Data Model","text":"<ul> <li>table: <code>zimswitch_ops</code></li> <li><code>id</code> (pk), <code>transferId</code>, <code>tenantId</code>, <code>acquirerId</code>, <code>merchantId</code>, <code>terminalId</code></li> <li><code>acqRef</code>, <code>authCode</code>, <code>panBin</code>, <code>amountMinor</code>, <code>currency</code></li> <li><code>status</code> (INIT|ACCEPTED|CAPTURED|SETTLED|RETURNED|FAILED)</li> <li><code>isoFields</code> (json redacted), <code>resultCode</code>, <code>reasonCode</code></li> <li><code>createdAt</code>, <code>updatedAt</code></li> <li>table: <code>outbox_gateway</code></li> <li>blob: request/response artifacts, settlement files (encrypted)</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#transform-validation","title":"\ud83d\udd01 Transform &amp; Validation","text":"<ul> <li>BIN routing via Directory: ensure card BIN is allowed and mapped to correct acquirer.</li> <li>Currency rules per merchant/acquirer (ZWL/ZAR/USD); enforce decimal places.</li> <li>ISO fields discipline:</li> <li>F2 PAN \u2192 token/surrogate only (never store PAN)</li> <li>F3 Processing Code \u2192 map from intent (00 purchase, 20 refund, etc.)</li> <li>F4 Amount \u2192 minor units</li> <li>F22 POS Entry Mode (tap-on-phone vs ecom), F25 POS Condition Code</li> <li>F55 EMV data when present</li> <li>3DS/CVM: pass-through checks; reject inconsistent combinations.</li> <li>Idempotency: include <code>{tenantId}:{transferId}</code> in merchant reference; de-dupe repeats.</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#sequence-tap-on-phone-purchase","title":"\ud83d\udcd0 Sequence (Tap-on-Phone Purchase)","text":"<pre><code>sequenceDiagram\n  participant CTS as Canonical Transfer Service\n  participant GW as Zimswitch Gateway\n  participant PROC as Processor/OPPWA\n  participant RECON as Reconciliation\n\n  CTS-&gt;&gt;GW: transfers.submitted.zimswitch\n  GW-&gt;&gt;GW: validate + build request (ISO fields)\n  GW-&gt;&gt;PROC: submit payment\n  PROC--&gt;&gt;GW: auth approved { acqRef, authCode }\n  GW--&gt;&gt;CTS: transfers.accepted\n  RECON--&gt;&gt;GW: daily settlement file\n  GW--&gt;&gt;CTS: transfers.settled { settlementDate, batchId }</code></pre>"},{"location":"10-components/rail-gateway-zimswitch/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>BIN not allowed / unknown member \u2192 fail fast (routing)</li> <li>Decline \u2192 emit <code>transfers.failed</code> with mapped reason</li> <li>Chargeback/return (T+N) \u2192 from settlement files/webhooks \u2192 emit <code>transfers.returned</code></li> <li>Webhook signature mismatch \u2192 reject and alert</li> <li>File ingest failure \u2192 pause recon pipeline; reprocess from last checkpoint</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: approval rate, latency, returns rate, recon match %</li> <li>Error buckets by ISO result/return codes</li> <li>DLQ sizes for webhooks and file ingests</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>PCI containment in gateway; no PAN or full track data persisted</li> <li>Tokenization only; redact EMV tags except whitelisted fields</li> <li>Encrypt artifacts and settlement files at rest</li> <li>Rotate webhook/file-transfer credentials regularly</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#config","title":"\u2699\ufe0f Config","text":"<ul> <li>Processor endpoints, per-merchant credentials</li> <li><code>WEBHOOK_SECRET</code>, <code>FILE_PULL_SCHEDULE</code></li> <li><code>CURRENCY_ALLOWLIST</code>, <code>BIN_ALLOWLIST</code></li> <li><code>REASON_CODE_MAP</code>, <code>ISO_FIELD_WHITELIST</code></li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>Approval rate drop: check acquirer status, BIN routing config, risk engine flags</li> <li>Recon mismatches: inspect mapping keys (acqRef, authCode, amount/date window)</li> <li>Return spike: analyze reason codes; notify CTS to throttle high-risk merchants</li> </ul>"},{"location":"10-components/reconciliation-returns/","title":"Reconciliation &amp; Returns Service","text":"<p>The Reconciliation &amp; Returns Service ensures Storo\u2019s books stay aligned with rail statements and handles disputes/returns as first-class flows.</p>"},{"location":"10-components/reconciliation-returns/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Ingest statements/settlement files from rails.  </li> <li>Match against canonical transfers.  </li> <li>Emit settlement or return events.  </li> <li>Queue unmatched items for operator review.  </li> <li>Model returns/disputes as state transitions.</li> </ul>"},{"location":"10-components/reconciliation-returns/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Scheduled pull/ingest of rail statements (files, APIs, on-chain events).  </li> <li>Normalize to internal <code>StatementLine</code> model.  </li> <li>Match to existing transfers (composite keys).  </li> <li>Emit <code>transfers.settled</code> (late confirm) or <code>transfers.returned</code>.  </li> <li>Push unmatched \u2192 exception queue for Operator Console.  </li> <li>Support manual raise of returns.</li> </ul>"},{"location":"10-components/reconciliation-returns/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/reconciliation-returns/#events-consume","title":"Events (consume)","text":"<ul> <li><code>recon.statement.ingested</code></li> </ul>"},{"location":"10-components/reconciliation-returns/#events-emit","title":"Events (emit)","text":"<ul> <li><code>transfers.settled</code> </li> <li><code>transfers.returned</code> </li> <li><code>recon.exception.opened</code> </li> </ul>"},{"location":"10-components/reconciliation-returns/#http","title":"HTTP","text":"<ul> <li><code>POST /returns</code> (manual raise)  </li> <li>Admin: <code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code></li> </ul>"},{"location":"10-components/reconciliation-returns/#data-model","title":"\ud83d\uddc4 Data Model","text":"<ul> <li><code>statements</code> (rail, fileId, source, importedAt)  </li> <li><code>statement_lines</code> (id, statementId, externalRef, amount, currency, date, type, reason?)  </li> <li><code>matches</code> (lineId, transferId, matchedAt)  </li> <li><code>exceptions</code> (id, lineId, status, resolvedAt, operatorId?)  </li> <li><code>outbox_recon</code> </li> </ul>"},{"location":"10-components/reconciliation-returns/#sequence","title":"\ud83d\udcd0 Sequence","text":"<pre><code>sequenceDiagram\n  participant R as Reconciliation\n  participant Rail as Rail Source\n  participant CTS\n  participant L as Ledger\n\n  Rail--&gt;&gt;R: daily statement file\n  R-&gt;&gt;R: normalize lines\n  R--&gt;&gt;CTS: transfers.settled (if not yet settled)\n  R--&gt;&gt;CTS: transfers.returned (if return/chargeback)\n  R--&gt;&gt;CTS: recon.exception.opened (if unmatched)\n  CTS-&gt;&gt;L: post reversals / settlements</code></pre>"},{"location":"10-components/reconciliation-returns/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>File ingest failed \u2192 pause, retry, operator alert.  </li> <li>Hash mismatch \u2192 reject, re-request file.  </li> <li>High unmatched rate \u2192 escalate ops, inspect Directory/CTS config.  </li> </ul>"},{"location":"10-components/reconciliation-returns/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: match rate, unmatched backlog, return rates.  </li> <li>Logs: structured with transferId, lineId, fileId.  </li> </ul>"},{"location":"10-components/reconciliation-returns/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Encrypt raw statement files.  </li> <li>Least privilege on file source credentials.  </li> </ul>"},{"location":"10-components/reconciliation-returns/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>Unmatched backlog \u2192 operator assigns manually.  </li> <li>High return rate \u2192 throttle merchant, investigate risk.  </li> <li>File delivery gap \u2192 contact partner, reconcile manually.  </li> </ul>"},{"location":"20-specs/api-canonical-transfer/","title":"Canonical Transfer API","text":"<p>The Canonical Transfer Service (CTS) exposes the primary API for creating and retrieving transfers.</p>"},{"location":"20-specs/api-canonical-transfer/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Provide a unified API for initiating transfers.  </li> <li>Normalize requests into canonical model.  </li> <li>Return transfer state and timeline.</li> </ul>"},{"location":"20-specs/api-canonical-transfer/#endpoints","title":"\ud83d\udd0c Endpoints","text":""},{"location":"20-specs/api-canonical-transfer/#post-transfers","title":"<code>POST /transfers</code>","text":"<p>Creates a new transfer.</p> <p>Headers - <code>Idempotency-Key</code>: unique key per client request.</p> <p>Request Body <pre><code>{\n  \"tenantId\": \"tn_456\",\n  \"payer\": { \"accountId\": \"acct_001\" },\n  \"payee\": { \"accountId\": \"acct_999\" },\n  \"amount\": { \"value\": 1000, \"currency\": \"USD\" },\n  \"rail\": \"usdc-algo\",\n  \"intent\": \"PUSH\",\n  \"externalRef\": \"ext_abc123\",\n  \"metadata\": { \"invoiceId\": \"inv_555\" }\n}\n</code></pre></p> <p>Response <pre><code>{\n  \"transferId\": \"tr_12345\",\n  \"state\": \"SUBMITTED\",\n  \"nextAction\": \"await_settlement\"\n}\n</code></pre></p> <p>Errors - <code>409 Conflict</code> \u2013 duplicate idempotency key. - <code>422 EntityDenied</code> \u2013 compliance block. - <code>502 RoutingUnavailable</code> \u2013 directory lookup failed. - <code>500 RailUnavailable</code> \u2013 rail gateway issue.</p>"},{"location":"20-specs/api-canonical-transfer/#get-transfersid","title":"<code>GET /transfers/:id</code>","text":"<p>Returns transfer details and event timeline.</p> <p>Response <pre><code>{\n  \"transferId\": \"tr_12345\",\n  \"tenantId\": \"tn_456\",\n  \"state\": \"SETTLED\",\n  \"events\": [\n    { \"type\": \"transfers.initiated\", \"occurredAt\": \"...\" },\n    { \"type\": \"transfers.submitted.usdc\", \"occurredAt\": \"...\" },\n    { \"type\": \"transfers.settled\", \"occurredAt\": \"...\" }\n  ]\n}\n</code></pre></p>"},{"location":"20-specs/api-canonical-transfer/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: POST latency, error rates, transfer creation/sec.  </li> <li>Logs: transferId, tenantId, eventId.  </li> <li>Traces: full timeline correlation.</li> </ul>"},{"location":"20-specs/chart-of-accounts/","title":"Chart of Accounts (Storo)","text":"<p>The Chart of Accounts (CoA) is the backbone of Storo\u2019s ledger. It defines all account types, their normal balances, and how they roll into financial statements. Based on lessons from Accounting for Developers and adapted to payments systems.</p>"},{"location":"20-specs/chart-of-accounts/#principles","title":"Principles","text":"<ul> <li>Double-entry: Every posting must debit one account and credit another.  </li> <li>Normal balance: Each account has a default side (debit or credit) where increases are recorded.  </li> <li>Hierarchy: Top-level categories are fixed, sub-accounts can be extended per tenant/product.  </li> <li>Accrual basis: Income and expenses recognized when earned, not just when cash moves.  </li> </ul>"},{"location":"20-specs/chart-of-accounts/#top-level-categories","title":"Top-Level Categories","text":""},{"location":"20-specs/chart-of-accounts/#1-assets-normal-balance-debit","title":"1. Assets (Normal Balance: Debit)","text":"<ul> <li>Liquidity (Cash/USDC Pool) </li> <li>Settlement In Transit (funds in process of clearing)  </li> <li>Accounts Receivable (e.g., unsettled merchant payments)  </li> <li>Inventory / Collateral (if applicable for product extensions)  </li> </ul>"},{"location":"20-specs/chart-of-accounts/#2-liabilities-normal-balance-credit","title":"2. Liabilities (Normal Balance: Credit)","text":"<ul> <li>User Balances (owed to end-users)  </li> <li>Merchant Payables (owed to merchants)  </li> <li>Deferred Revenue (collected in advance, not yet earned)  </li> <li>Chargebacks/Returns Payable </li> </ul>"},{"location":"20-specs/chart-of-accounts/#3-equity-normal-balance-credit","title":"3. Equity (Normal Balance: Credit)","text":"<ul> <li>Contributed Capital </li> <li>Retained Earnings (prior net income carried forward)  </li> <li>Current Period Net Income (closed at end of period into Retained Earnings)  </li> </ul>"},{"location":"20-specs/chart-of-accounts/#4-revenue-normal-balance-credit","title":"4. Revenue (Normal Balance: Credit)","text":"<ul> <li>Transaction Fees Earned </li> <li>FX Spread Income </li> <li>Other Service Fees </li> </ul>"},{"location":"20-specs/chart-of-accounts/#5-expenses-normal-balance-debit","title":"5. Expenses (Normal Balance: Debit)","text":"<ul> <li>Processing Costs (rail fees, partner charges)  </li> <li>Chargeback Losses </li> <li>Operational Expenses (infra, compliance overhead)  </li> </ul>"},{"location":"20-specs/chart-of-accounts/#examples","title":"Examples","text":"<p>User Deposit (USDC \u2192 Wallet) - Debit Liquidity (Asset) - Credit User Balances (Liability)  </p> <p>Merchant Payout (USDC \u2192 Merchant) - Debit Merchant Payables (Liability) - Credit Liquidity (Asset)  </p> <p>Fee Collection - Debit User Balance (Liability) - Credit Transaction Fees Earned (Revenue)  </p> <p>Chargeback - Debit Chargebacks Payable (Liability) - Credit Merchant Payables (Liability)  </p>"},{"location":"20-specs/chart-of-accounts/#notes","title":"Notes","text":"<ul> <li>Accounts can be extended per-tenant under the same category.  </li> <li>All postings must reconcile to ensure Assets = Liabilities + Equity.  </li> </ul>"},{"location":"20-specs/data-retention-pii/","title":"Data Retention &amp; PII Handling","text":"<p>The data retention policy governs how long Storo stores sensitive data and how it is redacted.</p>"},{"location":"20-specs/data-retention-pii/#principles","title":"\ud83c\udfaf Principles","text":"<ul> <li>Minimize PII stored in core DBs.  </li> <li>Encrypt at rest all raw rail payloads.  </li> <li>Retain only what\u2019s needed for audit, compliance, dispute resolution.  </li> <li>Expire or redact data after retention window.</li> </ul>"},{"location":"20-specs/data-retention-pii/#storage-classes","title":"\ud83d\udce6 Storage Classes","text":"<ul> <li>Canonical DBs (CTS, Ledger, Compliance, Directory, Recon) </li> <li>Store IDs, references, metadata only.  </li> <li> <p>No raw PII beyond accountId/tenantId.  </p> </li> <li> <p>Blob Store (encrypted) </p> </li> <li>Stores raw rail payloads, statements.  </li> <li>Access tightly controlled, time-limited.  </li> </ul>"},{"location":"20-specs/data-retention-pii/#retention-windows","title":"\u23f3 Retention Windows","text":"<ul> <li>Transfer &amp; ledger events: 7 years (audit requirement).  </li> <li>Raw rail payloads: 18 months.  </li> <li>Compliance screening results: 5 years.  </li> <li>Operator actions (audit log): 7 years.  </li> </ul>"},{"location":"20-specs/data-retention-pii/#redaction","title":"\ud83e\uddf9 Redaction","text":"<ul> <li>After expiry, replace PII fields with irreversible hashes.  </li> <li>Keep metadata (transferId, amounts, dates).  </li> </ul>"},{"location":"20-specs/data-retention-pii/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>All PII encrypted at rest + in transit.  </li> <li>Logs redact sensitive fields (names, IDs, PANs).  </li> <li>Access scoped to tenant &amp; role.  </li> </ul>"},{"location":"20-specs/data-retention-pii/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>Retention job failure \u2192 retry, escalate if backlog &gt; 24h.  </li> <li>Legal hold \u2192 suspend deletion for specific entities.  </li> <li>PII exposure incident \u2192 trigger breach protocol immediately.</li> </ul>"},{"location":"20-specs/events/","title":"Event Specifications","text":"<p>The Event model defines the envelope and catalog of all domain events emitted across Storo services.</p>"},{"location":"20-specs/events/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Provide a single canonical envelope for all events.  </li> <li>Define the catalog of event types (<code>transfers.*</code>, <code>ledger.*</code>, etc.).  </li> <li>Ensure idempotency and consistency across services.  </li> </ul>"},{"location":"20-specs/events/#event-envelope","title":"\ud83d\udce6 Event Envelope","text":"<pre><code>{\n  \"eventId\": \"uuid\",\n  \"type\": \"transfers.settled\",\n  \"occurredAt\": \"2025-08-26T10:15:01Z\",\n  \"transferId\": \"tr_123\",\n  \"tenantId\": \"tn_456\",\n  \"payload\": { ... rail or business-specific data ... }\n}\n</code></pre> <p>Fields - <code>eventId</code> \u2013 unique ID (UUIDv7 recommended). - <code>type</code> \u2013 dot-delimited string category (see catalog). - <code>occurredAt</code> \u2013 ISO8601 UTC timestamp. - <code>transferId</code> \u2013 optional link to transfer (if relevant). - <code>tenantId</code> \u2013 tenant scoping. - <code>payload</code> \u2013 type-specific content.</p>"},{"location":"20-specs/events/#event-catalog","title":"\ud83d\udcda Event Catalog","text":""},{"location":"20-specs/events/#transfers","title":"Transfers","text":"<ul> <li><code>transfers.initiated</code> </li> <li><code>transfers.submitted.&lt;rail&gt;</code> </li> <li><code>transfers.accepted</code> </li> <li><code>transfers.settled</code> </li> <li><code>transfers.returned</code> </li> <li><code>transfers.failed</code> </li> </ul>"},{"location":"20-specs/events/#ledger","title":"Ledger","text":"<ul> <li><code>ledger.posting.created</code> </li> <li><code>ledger.balance.updated</code> </li> </ul>"},{"location":"20-specs/events/#compliance","title":"Compliance","text":"<ul> <li><code>compliance.entity.flagged</code> </li> </ul>"},{"location":"20-specs/events/#reconciliation","title":"Reconciliation","text":"<ul> <li><code>recon.statement.ingested</code> </li> <li><code>recon.exception.opened</code> </li> </ul>"},{"location":"20-specs/events/#directory","title":"Directory","text":"<ul> <li><code>directory.version.updated</code> </li> </ul>"},{"location":"20-specs/events/#idempotency-rules","title":"\ud83d\udd01 Idempotency Rules","text":"<ul> <li>Event consumers must dedupe using <code>eventId</code>.  </li> <li>For transfer lifecycle, <code>(transferId,type)</code> must be unique.  </li> <li>Outbox pattern ensures atomic persistence + publish.</li> </ul>"},{"location":"20-specs/events/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: events/sec by type, lag from occurredAt \u2192 consumed.  </li> <li>Audit: immutable event store recommended for replay/debug.</li> </ul>"},{"location":"20-specs/posting-rules/","title":"Posting Rules (Expanded)","text":"<p>Defines how Storo translates transfer lifecycle events into double\u2011entry ledger postings. This is the authoritative mapping for <code>ledger-service</code>.</p>"},{"location":"20-specs/posting-rules/#principles","title":"Principles","text":"<ul> <li>Every posting set must balance (sum debits = sum credits).  </li> <li>Postings are append\u2011only; reversals are explicit.  </li> <li>Ledger is accrual\u2011based: income/expenses recognized when earned, not when paid.  </li> <li>Use normal balances from chart\u2011of\u2011accounts.md.  </li> </ul>"},{"location":"20-specs/posting-rules/#event-posting-rules","title":"Event \u2192 Posting Rules","text":""},{"location":"20-specs/posting-rules/#1-transfersaccepted-auth-reservation","title":"1. <code>transfers.accepted</code> (AUTH / reservation)","text":"<ul> <li>If rail supports authorization (card\u2011like), create pending/memo postings:</li> </ul> Debit (Dr) Credit (Cr) Notes Rail Settlement Pending User / Payer Off\u2011balance memo (not cash movement yet)"},{"location":"20-specs/posting-rules/#2-transferssettled-funds-final","title":"2. <code>transfers.settled</code> (funds final)","text":""},{"location":"20-specs/posting-rules/#case-push-payment-payer-sends-to-payee","title":"Case: PUSH payment (payer sends to payee)","text":"Debit (Dr) Credit (Cr) Notes User / Payer Merchant / Payee Principal transfer Merchant / Payee Fees Revenue If fee charged (separate leg) FX Loss Merchant / Payee If FX conversion loss applied Merchant / Payee FX Gain If FX conversion gain applied"},{"location":"20-specs/posting-rules/#case-pull-payment-merchant-pulls-funds","title":"Case: PULL payment (merchant pulls funds)","text":"Debit (Dr) Credit (Cr) Notes User / Payer Merchant / Payee Principal Merchant / Payee Fees Revenue Optional fee leg"},{"location":"20-specs/posting-rules/#3-transfersreturned-rail-return-chargeback","title":"3. <code>transfers.returned</code> (rail return / chargeback)","text":"Debit (Dr) Credit (Cr) Notes Merchant / Payee User / Payer Reverse principal Fees Expense Merchant / Payee Return fees absorbed"},{"location":"20-specs/posting-rules/#4-transfersfailed-technical-failure","title":"4. <code>transfers.failed</code> (technical failure)","text":"<ul> <li>No postings (transfer never finalized).</li> </ul>"},{"location":"20-specs/posting-rules/#period-closing-entries-ops","title":"Period Closing Entries (Ops)","text":"<p>At end of reporting period (see closing-the-books.md):</p> <ul> <li>Close temporary Income and Expense accounts to Retained Earnings.  </li> <li>Reconciliation must confirm balances vs external statements before close.  </li> </ul>"},{"location":"20-specs/posting-rules/#example-walkthrough","title":"Example Walkthrough","text":"<p>User pays Merchant 100 ZAR via USDC rail. Fee = 2 ZAR.</p> <ol> <li>Event: <code>transfers.settled</code></li> <li>Ledger postings:</li> </ol> Debit (Dr) Credit (Cr) Amount User Account Merchant Account 100 Merchant Account Fees Revenue 2 <p>Merchant net = 98 ZAR. System recognized 2 ZAR as revenue.</p>"},{"location":"20-specs/posting-rules/#exceptions","title":"Exceptions","text":"<ul> <li>Negative balances: only Liquidity/FX/Reserve accounts allowed.  </li> <li>Multi\u2011currency: FX legs must always be paired (gain or loss).  </li> <li>Manual journal entries require dual approval and clear memo.  </li> </ul>"},{"location":"20-specs/posting-rules/#references","title":"References","text":"<ul> <li>chart-of-accounts.md (account categories, normal balances)  </li> <li>closing-the-books.md (period cycle)  </li> </ul>"},{"location":"30-diagrams/component-nucleus/","title":"Component: Nucleus","text":"<pre><code>flowchart LR\n  subgraph Client/Partners\n    A[Client Apps / Merchants / WhatsApp Bot]\n  end\n\n  subgraph Core[\"Storo Nucleus\"]\n    direction LR\n\n    subgraph API[\"Canonical Transfer Service (API)\"]\n      CTS[POST /transfers&lt;br/&gt;GET /transfers/:id&lt;br/&gt;Idempotency]\n    end\n\n    subgraph GW[\"Rail Gateways\"]\n      ZG[Zimswitch Gateway]\n      OG[OPPWA Gateway]\n      UG[USDC/Algorand Gateway]\n    end\n\n    subgraph L[\"Ledger Service\"]\n      LJ[Journal &amp; Postings]\n      LB[Balances &amp; Statements]\n    end\n\n    subgraph C[\"Compliance Screening\"]\n      CS[Local Watchlist Index&lt;br/&gt;/screen]\n    end\n\n    subgraph D[\"Directory &amp; Routing\"]\n      DR[Institutions/BINs&lt;br/&gt;Fees &amp; Windows]\n    end\n\n    subgraph R[\"Reconciliation &amp; Returns\"]\n      RC[Statement Ingest&lt;br/&gt;Unmatched Queue]\n    end\n\n    subgraph B[\"Event Bus + Outbox\"]\n      EB[(Topics: transfers.*, ledger.*, recon.*)]\n    end\n\n    subgraph O[\"Operator Console\"]\n      OC[Ops UI&lt;br/&gt;Returns/Recon/Flags]\n    end\n\n    subgraph PL[\"Platform/Base\"]\n      AD[/ /live /ready /metrics /version /]\n      TM[Banking Time &amp; Holidays]\n      IDG[ID/Tracing &amp; Errors]\n    end\n  end\n\n  A --&gt;|create intent| CTS\n  CTS --&gt;|pre-screen| CS\n  CS --&gt;|allow/deny| CTS\n  CTS --&gt;|route| D\n  D --&gt; CTS\n  CTS --&gt;|submit| ZG\n  CTS --&gt;|submit| OG\n  CTS --&gt;|submit| UG\n\n  ZG --&gt; EB\n  OG --&gt; EB\n  UG --&gt; EB\n\n  EB --&gt; CTS\n  EB --&gt; L\n  EB --&gt; R\n  EB --&gt; O\n\n  L &lt;--&gt; R\n  R --&gt;|nightly ingest| EB\n\n  OC --- O\n  PL --- CTS\n  PL --- GW\n  PL --- L\n  PL --- C\n  PL --- D\n  PL --- R</code></pre>"},{"location":"30-diagrams/lifecycle-state/","title":"Transfer Lifecycle","text":"<pre><code>stateDiagram-v2\n  [*] --&gt; INITIATED\n  INITIATED --&gt; SUBMITTED: CTS submits.&lt;rail&gt;\n  SUBMITTED --&gt; ACCEPTED: rail reference received\n  ACCEPTED --&gt; SETTLED: funds final\n  ACCEPTED --&gt; RETURNED: return/chargeback code\n  SUBMITTED --&gt; FAILED: technical failure\n  SETTLED --&gt; [*]\n  RETURNED --&gt; [*]\n  FAILED --&gt; [*]</code></pre>"},{"location":"30-diagrams/recon-matching/","title":"Reconciliation Matching","text":"<pre><code>flowchart TD\n  ST[(Rail Statement Files / On-chain Events)]\n  NORM[Normalize to StatementLine]\n  MATCH{Match to\nTransfers?}\n  EMIT1[Emit transfers.settled]\n  EMIT2[Emit transfers.returned]\n  EXC[Open recon.exception]\n  OP[Operator Console]\n\n  ST --&gt; NORM --&gt; MATCH\n  MATCH --&gt;|Settlement| EMIT1\n  MATCH --&gt;|Return| EMIT2\n  MATCH --&gt;|No| EXC --&gt; OP</code></pre>"},{"location":"30-diagrams/sequence-return-oppwa/","title":"Sequence: Return (OPPWA)","text":"<pre><code>sequenceDiagram\n  participant CTS as Canonical Transfer Service\n  participant GW as OPPWA Gateway\n  participant OPP as OPPWA API\n  participant WH as Webhook Receiver\n  participant L as Ledger\n  participant OC as Operator Console\n\n  CTS-&gt;&gt;GW: transfers.submitted.oppwa (intent=AUTH)\n  GW-&gt;&gt;OPP: POST /payments (preauth)\n  OPP--&gt;&gt;GW: result {opRef, resultCode}\n  GW--&gt;&gt;CTS: transfers.accepted {opRef}\n\n  %% Later, dispute/return arrives\n  WH--&gt;&gt;GW: webhook {opRef, reasonCode, chargeback:true}\n  GW--&gt;&gt;CTS: transfers.returned {reasonCode}\n  CTS--&gt;&gt;L: transfers.returned\n  L--&gt;&gt;OC: ledger.posting.created (reversal)</code></pre>"},{"location":"30-diagrams/sequence-submit-usdc/","title":"Sequence: Submit USDC","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant CTS as Canonical Transfer Service\n  participant CS as Compliance\n  participant DR as Directory\n  participant GW as USDC/Algorand Gateway\n  participant L as Ledger\n\n  Client-&gt;&gt;CTS: POST /transfers (idempotency-key)\n  CTS-&gt;&gt;CTS: dedupe &amp; normalize\n  CTS-&gt;&gt;CS: POST /screen (payer, payee)\n  CS--&gt;&gt;CTS: allow\n  CTS-&gt;&gt;DR: GET /routes?rail=usdc-algo\n  DR--&gt;&gt;CTS: { endpoint, fees, window }\n  CTS-&gt;&gt;GW: transfers.submitted.usdc\n  GW--&gt;&gt;CTS: transfers.accepted {txId}\n  GW--&gt;&gt;CTS: transfers.settled {txId, round}\n  CTS--&gt;&gt;L: transfers.settled\n  L--&gt;&gt;CTS: ledger.posting.created</code></pre>"},{"location":"40-ops/closing-the-books/","title":"Closing the Books (Ops Runbook)","text":"<p>The process of finalizing accounting for a period (day, month, quarter, year). Based on accrual accounting and double-entry principles.</p>"},{"location":"40-ops/closing-the-books/#daily-tasks","title":"Daily Tasks","text":"<ol> <li>Reconciliation </li> <li>Ingest statements from rails (Zimswitch, OPPWA, Algorand).  </li> <li>Match to transfers in Storo.  </li> <li> <p>Investigate unmatched items in Operator Console.  </p> </li> <li> <p>Ledger Validation </p> </li> <li>Run posting check: every debit has equal credit.  </li> <li> <p>Generate trial balance.  </p> </li> <li> <p>Compliance Delta Check </p> </li> <li>Re-run re-screening for entities against updated lists.  </li> </ol>"},{"location":"40-ops/closing-the-books/#monthly-period-end-tasks","title":"Monthly / Period-End Tasks","text":"<ol> <li>Income Statement </li> <li> <p>Summarize revenues (fees, FX) and expenses (processing, chargebacks).  </p> </li> <li> <p>Close Temporary Accounts </p> </li> <li>Zero out revenue and expense accounts.  </li> <li> <p>Roll net income into Current Period Net Income account.  </p> </li> <li> <p>Balance Sheet </p> </li> <li>Validate: Assets = Liabilities + Equity.  </li> <li> <p>Snapshot balances for audit/export.  </p> </li> <li> <p>Cash Flow Statement </p> </li> <li>Derive from balance changes (Liquidity movements).  </li> </ol>"},{"location":"40-ops/closing-the-books/#technical-steps","title":"Technical Steps","text":"<ol> <li>Freeze event ingestion at cutoff.  </li> <li>Run reconciliation batch job.  </li> <li>Generate trial balance \u2192 verify zero-sum.  </li> <li>Post closing entries:  </li> <li>Debit/Credit Revenue \u2192 Net Income.  </li> <li>Debit/Credit Expenses \u2192 Net Income.  </li> <li>Close Net Income \u2192 Retained Earnings.  </li> <li>Unlock event ingestion.  </li> </ol>"},{"location":"40-ops/closing-the-books/#operator-notes","title":"Operator Notes","text":"<ul> <li>If unmatched transactions remain, escalate before closing.  </li> <li>If balances don\u2019t tie (A=L+E), halt closing and investigate ledger.  </li> <li>All reports (Balance Sheet, Income Statement) are versioned and immutable.  </li> </ul>"},{"location":"40-ops/observability/","title":"Observability","text":"<p>Metrics, logs, and tracing conventions for Storo.</p>"},{"location":"40-ops/observability/#golden-signals","title":"Golden Signals","text":"<ul> <li>Latency: API p95/p99 (CTS), event publish lag (outbox \u2192 bus), ledger posting latency.  </li> <li>Traffic: transfers/sec by rail, events/sec by topic.  </li> <li>Errors: rate by type; DLQ sizes.  </li> <li>Saturation: outbox backlog, consumer lag, DB write IOPS.</li> </ul>"},{"location":"40-ops/observability/#metrics-prometheus-names","title":"Metrics (Prometheus names)","text":"<ul> <li><code>cts_requests_total{route,code}</code> </li> <li><code>cts_request_duration_seconds_bucket{route}</code> </li> <li><code>gateway_submit_duration_seconds_bucket{rail}</code> </li> <li><code>event_outbox_backlog{service}</code> </li> <li><code>event_publish_lag_seconds{service}</code> </li> <li><code>ledger_posting_latency_seconds_bucket</code> </li> <li><code>recon_match_rate</code> , <code>recon_unmatched_backlog</code> </li> <li><code>compliance_screen_latency_seconds_bucket</code> , <code>compliance_index_age_hours</code></li> </ul>"},{"location":"40-ops/observability/#logs","title":"Logs","text":"<ul> <li>JSON only.  </li> <li>Required fields: <code>ts</code>, <code>level</code>, <code>service</code>, <code>tenantId</code>, <code>transferId?</code>, <code>eventId?</code>, <code>traceId?</code>.  </li> <li>PII redaction applied before emit.</li> </ul>"},{"location":"40-ops/observability/#tracing","title":"Tracing","text":"<ul> <li>Propagate <code>traceparent</code> across services.  </li> <li>Spans: <code>cts.create</code>, <code>gateway.submit</code>, <code>ledger.post</code>, <code>recon.ingest</code>.  </li> <li>Sample rate: 10% baseline; 100% on error paths.</li> </ul>"},{"location":"40-ops/observability/#dashboards","title":"Dashboards","text":"<ul> <li>Exec: transfers by rail, approval/return rates, SLAs.  </li> <li>SRE: outbox backlogs, publish lag, consumer lag, broker health.  </li> <li>Finance/Ops: settlement totals, fees, FX P&amp;L, recon match rate.</li> </ul>"},{"location":"40-ops/runbooks/","title":"Runbooks","text":"<p>Operational procedures for Storo nucleus components. Keep these pragmatic and up to date.</p>"},{"location":"40-ops/runbooks/#transfers-stuck-in-submitted","title":"Transfers stuck in SUBMITTED","text":"<p>Symptoms - Many transfers in <code>SUBMITTED</code> for &gt; X minutes. - Gateways show growing outbox backlog.</p> <p>Checks 1. Gateway <code>/ready</code> and <code>/metrics</code> for the affected rail. 2. Event bus health; consumer lag. 3. Directory lookup SLOs (routing latency spikes?).  </p> <p>Actions - Restart gateway dispatcher if wedged. - Drain DLQ after verifying poison messages are quarantined. - Temporarily throttle creation rate from CTS for the tenant with spikes.  </p> <p>Postmortem notes - Attach event IDs and sample transferIds. - Record root cause and prevention (ADR if architectural).</p>"},{"location":"40-ops/runbooks/#reconciliation-unmatched-backlog","title":"Reconciliation unmatched backlog","text":"<p>Symptoms - <code>recon.exception.opened</code> spiking, queue &gt; SLA.  </p> <p>Checks 1. Statement ingest success rate and file checksums. 2. Directory fee tables / windows version drift. 3. Key mapping (acqRef/authCode/externalRef) consistency.  </p> <p>Actions - Assign operators to bulk-assign obvious matches. - Re-run ingest from last checkpoint if normalization bug found. - File partner ticket if delivery gaps observed.  </p>"},{"location":"40-ops/runbooks/#compliance-stale-index","title":"Compliance stale index","text":"<p>Symptoms - Alert: compliance list age &gt; 24h.  </p> <p>Checks 1. Downloader logs (network, checksum mismatch). 2. Disk space / blob store quota.  </p> <p>Actions - Trigger manual list refresh. - Roll back to last good index if corruption detected. - If still failing, force CTS to deny by policy until lists are healthy.  </p>"},{"location":"40-ops/runbooks/#ledger-posting-failures","title":"Ledger posting failures","text":"<p>Symptoms - <code>currency mismatch</code> or <code>negative balance blocked</code>.  </p> <p>Checks 1. Posting rules version and inputs from event. 2. Account config (currency, status).  </p> <p>Actions - Open exception, block further postings for the tenant if systemic. - Patch rules (PR) and replay events.  </p>"},{"location":"40-ops/runbooks/#event-bus-backlog","title":"Event bus backlog","text":"<p>Symptoms - High outbox backlog, consumer lag.  </p> <p>Checks 1. Bus broker health, partition leaders. 2. Dispatcher logs for auth / throttling errors.  </p> <p>Actions - Scale consumers horizontally. - Increase partitions if saturated. - Enable backpressure on producers (CTS) temporarily.</p>"},{"location":"40-ops/security/","title":"Security","text":"<p>Standards for secrets, access, PCI scope, and PII handling in Storo.</p>"},{"location":"40-ops/security/#secrets-management","title":"Secrets Management","text":"<ul> <li>Stored in a centralized vault (e.g., HashiCorp Vault).  </li> <li>Rotated at least every 90 days; immediate rotation on incident.  </li> <li>No secrets in environment variables for long-lived services without vault agent.  </li> </ul>"},{"location":"40-ops/security/#access-control","title":"Access Control","text":"<ul> <li>Service-to-service auth via mTLS or mesh-issued JWT.  </li> <li>RBAC for Operator Console (OPS, COMPLIANCE, ADMIN).  </li> <li>Principle of least privilege to DBs and blob stores.</li> </ul>"},{"location":"40-ops/security/#pci-pan-scope","title":"PCI &amp; PAN Scope","text":"<ul> <li>Card data handled exclusively in OPPWA/Zimswitch gateway.  </li> <li>PAN/token never flows into CTS or Ledger.  </li> <li>Webhook/file artifacts are redacted and encrypted.</li> </ul>"},{"location":"40-ops/security/#pii-handling","title":"PII Handling","text":"<ul> <li>Encrypt at rest; redact in logs and events.  </li> <li>Minimize in DBs; store raw artifacts in encrypted blob store.  </li> <li>Data retention per <code>20-specs/data-retention-pii.md</code>.</li> </ul>"},{"location":"40-ops/security/#secure-coding","title":"Secure Coding","text":"<ul> <li>Input validation at boundaries; strict schema checks.  </li> <li>Dependency scanning and SAST/DAST in CI.  </li> <li>Security headers on all admin endpoints.</li> </ul>"},{"location":"40-ops/security/#incident-response","title":"Incident Response","text":"<ul> <li>24/7 on-call rotation; breach protocol documented.  </li> <li>Forensics: immutable logs and event store.  </li> <li>Post-incident ADR if architectural changes required.</li> </ul>"},{"location":"50-repo-structure/ci-cd/","title":"CI/CD Standard (per service)","text":"<p>Canonical GitHub Actions workflow + required checks for all Storo service repos.</p>"},{"location":"50-repo-structure/ci-cd/#required-checks","title":"Required Checks","text":"<ul> <li>lint: golangci\u2011lint / eslint</li> <li>test: unit tests + golden fixtures</li> <li>contract\u2011validate: ensure emitted/consumed events &amp; APIs conform to <code>storo-specs</code></li> <li>migrations\u2011dry\u2011run: for services with DB migrations</li> <li>build: Docker image</li> <li>publish: tag <code>svc:X.Y.Z</code> and <code>svc:X</code></li> </ul>"},{"location":"50-repo-structure/ci-cd/#example-workflow-githubworkflowsciyml","title":"Example Workflow (<code>.github/workflows/ci.yml</code>)","text":"<pre><code>name: CI\n\non:\n  push:\n    branches: [ main ]\n    tags: [ 'v*.*.*' ]\n  pull_request:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with: { go-version: '1.22' }\n      - run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n      - run: golangci-lint run ./...\n\n  test:\n    runs-on: ubuntu-latest\n    services:\n      postgres:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: postgres\n        ports: [ '5432:5432' ]\n        options: &gt;-\n          --health-cmd=\"pg_isready -U postgres\"\n          --health-interval=10s\n          --health-timeout=5s\n          --health-retries=5\n      localstack:\n        image: localstack/localstack:3\n        env:\n          SERVICES: sns,sqs,s3\n        ports: [ '4566:4566' ]\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with: { go-version: '1.22' }\n      - run: make db   # apply embedded migrations\n      - run: make test # includes golden fixture tests\n\n  contract-validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Install Node\n        uses: actions/setup-node@v4\n        with: { node-version: '20' }\n      - run: npm i -D @storo/specs ajv\n      - run: npm run validate:events  # project script that validates fixtures/outbound payloads\n      - run: npm run validate:openapi # if this repo exposes HTTP\n\n  build:\n    needs: [lint, test, contract-validate]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Docker build\n        run: |\n          docker build -t ghcr.io/storo/${{ github.event.repository.name }}:${{ github.sha }} .\n      - name: Log in to GHCR\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Push SHA image\n        run: docker push ghcr.io/storo/${{ github.event.repository.name }}:${{ github.sha }}\n\n  publish:\n    if: startsWith(github.ref, 'refs/tags/v')\n    needs: [build]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Tag &amp; push semver images\n        run: |\n          IMAGE=ghcr.io/storo/${{ github.event.repository.name }}\n          TAG=${GITHUB_REF#refs/tags/}\n          MAJOR=$(echo $TAG | cut -d. -f1)\n          docker pull $IMAGE:${{ github.sha }}\n          docker tag  $IMAGE:${{ github.sha }} $IMAGE:$TAG\n          docker tag  $IMAGE:${{ github.sha }} $IMAGE:$MAJOR\n          docker push $IMAGE:$TAG\n          docker push $IMAGE:$MAJOR\n</code></pre>"},{"location":"50-repo-structure/ci-cd/#branching-protection","title":"Branching &amp; Protection","text":"<ul> <li>Trunk\u2011based: short\u2011lived PRs to <code>main</code>, protected branch.</li> <li>Required status checks: all jobs above.</li> <li>Conventional commits recommended; changelogs generated on tag.</li> </ul>"},{"location":"50-repo-structure/ci-cd/#deploy-via-storo-infra","title":"Deploy (via <code>storo-infra</code>)","text":"<ul> <li>Terraform pins image tags per env (dev/staging/prod).</li> <li>PR to bump tag = deploy. Rollback = revert tag.</li> <li>Deploy during SAST business hours; staging soak \u2265 24h for sensitive services.</li> </ul>"},{"location":"50-repo-structure/ci-cd/#secrets-tokens-in-ci","title":"Secrets &amp; Tokens in CI","text":"<ul> <li>Use GitHub Environments or OpenID Connect to assume AWS roles. No long\u2011lived keys.</li> <li>Service\u2011specific permissions; least privilege to push images / read Secrets Manager where necessary.</li> </ul>"},{"location":"50-repo-structure/local-dev/","title":"Local Development (storo\u2011devstack)","text":"<p>How to run Storo locally without a monorepo. You\u2019ll run the fleet via Docker and swap one service for your local build.</p>"},{"location":"50-repo-structure/local-dev/#prereqs","title":"Prereqs","text":"<ul> <li>Docker Desktop / Colima</li> <li>Make or Task</li> <li>Go 1.22 (for Go services), Node 20 (for console)</li> <li><code>storo-devstack</code> repo cloned</li> </ul> <p>Devstack provides: Postgres (multi\u2011DB), LocalStack (SNS/SQS), Prometheus, Grafana, and released service images.</p>"},{"location":"50-repo-structure/local-dev/#start-the-fleet","title":"Start the Fleet","text":"<pre><code>git clone git@github.com:storo/storo-devstack.git\ncd storo-devstack\ndocker compose up -d\n</code></pre> <p>Services come up with released images. Grafana is available at http://localhost:3000 (admin/admin by default).</p>"},{"location":"50-repo-structure/local-dev/#develop-one-service-locally","title":"Develop One Service Locally","text":"<p>Example: work on storo-gw-usdc while everything else runs in containers.</p> <p>1) Clone your service and start it locally: <pre><code>git clone git@github.com:storo/storo-gw-usdc.git\ncd storo-gw-usdc\nmake dev    # or task dev (hot reload)\n</code></pre></p> <p>2) In <code>storo-devstack/docker-compose.override.example.yml</code>, copy to <code>docker-compose.override.yml</code> and disable the service container, mapping your local port:</p> <pre><code># docker-compose.override.yml\nservices:\n  gw-usdc:\n    deploy:\n      replicas: 0  # disable container; we'll run it locally\n  # If the stack expects a port:\n  #   ports:\n  #     - \"8085:8085\"  # match your local gw-usdc listen port\n</code></pre> <p>3) Ensure env points to devstack infra: - Postgres: <code>postgres://localhost:5432/gw_usdc?sslmode=disable</code> - SQS/SNS (LocalStack): <code>http://localhost:4566</code> with dummy creds - S3 (for payloads): <code>http://localhost:4566</code></p> <p>4) Seed data (optional): <pre><code>make seed   # directory entries, holidays, test tenants\n</code></pre></p> <p>You can now post a transfer to CTS in devstack and watch events reach your local gateway.</p>"},{"location":"50-repo-structure/local-dev/#example-smoke-test-usdc-happy-path","title":"Example: Smoke Test (USDC Happy Path)","text":"<pre><code># Create a transfer\ncurl -XPOST http://localhost:8080/v1/transfers   -H 'Idempotency-Key: demo-1'   -d '{\n    \"tenantId\":\"tn_demo\",\n    \"payer\":{\"accountId\":\"acct_payer\"},\n    \"payee\":{\"accountId\":\"acct_merchant\"},\n    \"amount\":{\"value\":1000,\"currency\":\"USD\"},\n    \"rail\":\"usdc-algo\",\"intent\":\"PUSH\",\"externalRef\":\"ext_demo\"\n  }'\n</code></pre> <p>Verify in logs: - CTS emits <code>transfers.submitted.usdc</code> - Your local <code>gw-usdc</code> consumes and emits <code>accepted</code> then <code>settled</code> - Ledger in devstack posts entries</p>"},{"location":"50-repo-structure/local-dev/#tilt-optional-live-reload","title":"Tilt (optional, live reload)","text":"<p>If you prefer Tilt for hot\u2011reload: - <code>storo-devstack/Tiltfile</code> includes services. Comment out the one you run locally. - Point your local service to devstack infra as above.</p>"},{"location":"50-repo-structure/local-dev/#timezone-cutoffs","title":"Timezone &amp; Cutoffs","text":"<p>Business rules use Africa/Johannesburg. For predictable tests: - Export <code>TZ=Africa/Johannesburg</code> - Seed holidays via <code>platform-base</code> fixtures</p>"},{"location":"50-repo-structure/local-dev/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Events not flowing: check LocalStack is up (<code>awslocal sns list-topics</code>).</li> <li>DLQ growing: open Grafana \u2192 \u201cEvent Backlogs\u201d dashboard.</li> <li>DB migrations: run <code>make db</code> in the service repo to apply embedded migrations.</li> <li>CORS (console): set <code>CORS_ALLOWED_ORIGINS=http://localhost:3001</code> on services that expose HTTP APIs.</li> </ul>"},{"location":"50-repo-structure/local-dev/#clean-up","title":"Clean Up","text":"<pre><code>docker compose down -v  # stop and remove volumes\n</code></pre> <p>This resets your local DBs and queues.</p>"},{"location":"50-repo-structure/multi-repo-architecture/","title":"Multi\u2011Repo Architecture (Storo)","text":"<p>How Storo\u2019s nucleus is organized across independent repositories so multiple teams can ship fast without stepping on each other.</p> <p>This document defines which repos exist, who owns them, how they interoperate (contracts-first), and how you develop locally without a monorepo. It also sets versioning rules, release flows, and deprecation discipline.</p>"},{"location":"50-repo-structure/multi-repo-architecture/#goals-nongoals","title":"Goals &amp; Non\u2011Goals","text":"<p>Goals - Independent deployability and ownership per service. - Contract\u2011first interoperability (events &amp; APIs) with machine\u2011verifiable schemas. - Clear local dev story: run one service locally while the rest run as containers. - Locked\u2011down release &amp; rollback process per service.</p> <p>Non\u2011Goals - A single build system for everything (keep repos simple). - Tight coupling via shared DBs (no cross\u2011service DB calls).</p>"},{"location":"50-repo-structure/multi-repo-architecture/#repository-map-source-of-truth","title":"Repository Map (source of truth)","text":"Repo Purpose Tech Owners Notes storo-specs Event schemas (JSON Schema), APIs (OpenAPI), golden fixtures, codegen JSON/YAML, Node scripts Platform Publishes <code>@storo/specs</code> (npm) and <code>github.com/storo/specs-go</code> (Go) storo-cts Canonical Transfer Service (API + orchestration) Go, Postgres, SQS/SNS Payments Core Emits <code>transfers.submitted.&lt;rail&gt;</code> storo-gw-usdc USDC/Algorand rail gateway Go, Postgres, SQS/SNS Rails Team Strict transform + event emission storo-gw-oppwa OPPWA gateway Go Rails Team Webhooks verified &amp; signed storo-gw-zimswitch Zimswitch/ISO8583 gateway Go Rails Team ISO fixtures + golden tests storo-ledger Double\u2011entry, append\u2011only ledger Go, Postgres Finance Eng Consumes <code>transfers.*</code> \u2192 postings storo-compliance Local watchlist index + screening Go Risk/Compliance Ingests OFAC/UN/EU/SA lists storo-directory Institutions, BINs, fees, settlement windows Go Platform Versioned datasets storo-recon Statement ingest + matching + returns Go Finance Ops Emits <code>transfers.settled/returned</code> storo-operator-console Internal UI (timeline, exceptions, flags) Next.js/TS Ops Auth via SSO/RBAC storo-devstack Local docker compose / Tilt to run the fleet Compose/Tilt DX Lets each dev swap a single local service storo-infra Terraform + env config (dev/stage/prod) Terraform Infra Controls image tags, secrets, IAM storo-observability Dashboards, alert rules Grafana/Prom SRE Golden signals and SLOs <p>Ownership is explicit. Each repo has CODEOWNERS and a simple <code>Makefile</code>/<code>Taskfile</code> so onboarding is fast.</p>"},{"location":"50-repo-structure/multi-repo-architecture/#contractsfirst-single-source-of-truth","title":"Contracts\u2011First (single source of truth)","text":""},{"location":"50-repo-structure/multi-repo-architecture/#storospecs","title":"storo\u2011specs","text":"<ul> <li>Events: JSON Schemas under <code>events/</code> with version fields (e.g., <code>\"v\": 1</code>).  </li> <li>APIs: OpenAPI under <code>api/</code> (CTS <code>/v1/transfers</code>, Ledger reads, etc.).  </li> <li>Fixtures: Golden JSON examples validated in CI.  </li> <li>Codegen: Publishes on tag:</li> <li>Go types/validators \u2192 <code>github.com/storo/specs-go</code> (semantic versioned)</li> <li>TS types/clients \u2192 <code>@storo/specs</code> (npm semver)</li> </ul> <p>Rule: Service repos pin a specific tag and validate in CI that all in/out payloads conform.</p>"},{"location":"50-repo-structure/multi-repo-architecture/#event-api-versioning","title":"Event &amp; API Versioning","text":"<ul> <li>Additive changes (new optional field): minor bump in <code>storo-specs</code>, no event version change required.</li> <li>Breaking changes: introduce new event version (e.g., <code>transfers.settled v2</code>) and dual\u2011publish during migration; consumers add support then deprecate v1.</li> <li>HTTP APIs: path versioning (<code>/v1/...</code>). Breaking change \u21d2 add <code>/v2</code> and run both until cutover.</li> <li>Deprecation policy: announce, dual\u2011run \u2265 2 releases, remove only after consumers are migrated.</li> </ul>"},{"location":"50-repo-structure/multi-repo-architecture/#local-development-no-monorepo-pain","title":"Local Development (no monorepo pain)","text":"<p>Use storo-devstack to run the fleet with released images + infrastructure (Postgres, LocalStack, Prometheus, Grafana). Then swap one service for a local build.</p>"},{"location":"50-repo-structure/multi-repo-architecture/#workflow","title":"Workflow","text":"<ol> <li><code>git clone storo-devstack &amp;&amp; docker compose up -d</code> </li> <li><code>git clone storo-gw-usdc &amp;&amp; make dev</code> (runs the gateway on your machine)</li> <li>In <code>storo-devstack/docker-compose.override.yml</code>, map the gateway\u2019s host port to the fleet and disable the container for that service.</li> <li>Iterate with hot reload (air/reflex). The rest of the system keeps using released images.</li> </ol> <p>Why this works: Contracts are pinned. Your local service talks to Live Postgres &amp; LocalStack queues created by devstack, so flows are realistic.</p>"},{"location":"50-repo-structure/multi-repo-architecture/#cicd-per-service","title":"CI/CD per Service","text":"<p>Pipeline (GitHub Actions) 1. <code>lint</code> (golangci\u2011lint / eslint) 2. <code>test</code> (unit + fixtures) 3. <code>contract-validate</code> (AJV vs <code>@storo/specs</code>; or <code>specs-go</code> validate) 4. <code>build</code> (Docker) 5. <code>publish</code> (<code>svc:X.Y.Z</code> + <code>svc:X</code>) 6. (optional) Chart publish (Helm)  </p> <p>storo-infra references image tags per env. Deploy is a tag flip (dev \u2192 stage \u2192 prod).</p>"},{"location":"50-repo-structure/multi-repo-architecture/#environments-secrets","title":"Environments &amp; Secrets","text":"<ul> <li>Envs: dev, staging, prod (separate AWS accounts).  </li> <li>Secrets in AWS Secrets Manager; IAM least privilege per service.  </li> <li>Business timezone is Africa/Johannesburg; holiday calendars bundled in <code>platform-base</code>.</li> </ul>"},{"location":"50-repo-structure/multi-repo-architecture/#observability-slos","title":"Observability &amp; SLOs","text":"<ul> <li>OpenTelemetry on all services. Prometheus metrics scraped by devstack &amp; prod.  </li> <li>Golden signals per ADR/observability doc: API latency, outbox backlog, consumer lag, ledger posting latency, recon match rate.  </li> <li>Alert rules live in <code>storo-observability</code> repo and are applied by Infra.</li> </ul>"},{"location":"50-repo-structure/multi-repo-architecture/#data-safety-rails","title":"Data &amp; Safety Rails","text":"<ul> <li>No cross\u2011service DB access. Only APIs/events.  </li> <li>Outbox required (ADR\u20110001). State change + event in the same txn.  </li> <li>Ledger is double\u2011entry, append\u2011only (ADR\u20110002).  </li> <li>Compliance must pass for submission; stale lists \u21d2 deny by policy.  </li> <li>Recon must close exceptions before end\u2011of\u2011day books close.</li> </ul>"},{"location":"50-repo-structure/multi-repo-architecture/#branching-releases","title":"Branching &amp; Releases","text":"<ul> <li>Trunk\u2011based with short\u2011lived PRs.  </li> <li>CI gates: unit, contract, migrations dry\u2011run.  </li> <li>Release by tagging (<code>vX.Y.Z</code>) \u2192 image publish.  </li> <li>Rollback: revert image tag in <code>storo-infra</code> (no code revert required).</li> </ul>"},{"location":"50-repo-structure/multi-repo-architecture/#repository-templates-consistency","title":"Repository Templates (consistency)","text":"<p>Each Go service repo includes: - <code>/cmd/service/main.go</code> with <code>/live</code>, <code>/ready</code>, <code>/metrics</code>, <code>/version</code> - <code>/internal/</code> (handlers, consumers, posting rules) - <code>/migrations/</code> (embedded) - Outbox &amp; optional Inbox (dedupe) tables - <code>Makefile</code> / <code>Taskfile.yml</code> - <code>.github/workflows/ci.yml</code> (pipeline above) - <code>docs/README.md</code> (local dev, env vars, example payloads)  </p>"},{"location":"50-repo-structure/multi-repo-architecture/#mermaid-map-repos-flows","title":"Mermaid Map (repos &amp; flows)","text":"<pre><code>flowchart LR\n  subgraph Specs\n    SP[storo-specs]\n  end\n\n  subgraph Rails\n    GU[storo-gw-usdc]\n    GO[storo-gw-oppwa]\n    GZ[storo-gw-zimswitch]\n  end\n\n  CTS[storo-cts]\n  LED[storo-ledger]\n  CMP[storo-compliance]\n  DIR[storo-directory]\n  REC[storo-recon]\n  UI[storo-operator-console]\n  DS[storo-devstack]\n  INF[storo-infra]\n\n  SP --&gt; CTS\n  SP --&gt; GU\n  SP --&gt; GO\n  SP --&gt; GZ\n  SP --&gt; LED\n  SP --&gt; CMP\n  SP --&gt; DIR\n  SP --&gt; REC\n  SP --&gt; UI\n\n  CTS --&gt;|transfers.submitted.*| GU\n  CTS --&gt;|transfers.submitted.*| GO\n  CTS --&gt;|transfers.submitted.*| GZ\n\n  GU --&gt;|transfers.accepted/settled/returned| CTS\n  GO --&gt;|\u2026| CTS\n  GZ --&gt;|\u2026| CTS\n\n  CTS --&gt; LED\n  REC --&gt; CTS\n  DIR --&gt; CTS\n  CMP --&gt; CTS\n  UI --&gt; CTS\n\n  DS --- CTS\n  DS --- GU\n  DS --- LED\n  INF --- CTS\n  INF --- Rails</code></pre>"},{"location":"50-repo-structure/multi-repo-architecture/#deprecation-migration-playbook","title":"Deprecation &amp; Migration Playbook","text":"<ol> <li>Propose change \u2192 write/update ADR in storo-specs PR.  </li> <li>Add schema change (new event version or additive field).  </li> <li>Publish new <code>specs-go</code> / <code>@storo/specs</code> tags.  </li> <li>Update providers first (emit both versions if breaking).  </li> <li>Update consumers to accept new version; ship.  </li> <li>Remove old version after \u22652 releases and a green prod window.</li> </ol>"},{"location":"50-repo-structure/multi-repo-architecture/#security-compliance-notes","title":"Security &amp; Compliance Notes","text":"<ul> <li>PAN/PCI scope stays inside gateways; no PAN in CTS/Ledger events.  </li> <li>PII minimized; raw rail payloads stored encrypted in blob store with TTL per policy.  </li> <li>Audit logs on the Operator Console; 4\u2011eyes for returns &amp; freezes.</li> </ul>"},{"location":"50-repo-structure/multi-repo-architecture/#actionable-next-steps-docsonly","title":"Actionable Next Steps (docs\u2011only)","text":"<ul> <li>Create repo stubs (empty READMEs) for all repos listed.  </li> <li>Add this doc under <code>docs/50-repo-structure/multi-repo-architecture.md</code>.  </li> <li>Draft <code>release-strategy.md</code> (semver details, dual\u2011publish patterns, deprecation checklist).  </li> <li>Draft <code>local-dev.md</code> (devstack usage + override examples).  </li> <li>Draft <code>ci-cd.md</code> (standard CI template + required checks).</li> </ul> <p>Once these docs exist, teams can start coding without waiting on a monorepo setup and with contracts locked by <code>storo-specs</code>.</p>"},{"location":"50-repo-structure/release-strategy/","title":"Release Strategy","text":"<p>Versioning, compatibility, and deprecation policy for Storo\u2019s multi\u2011repo nucleus.</p>"},{"location":"50-repo-structure/release-strategy/#goals","title":"Goals","text":"<ul> <li>Ship services independently with predictable compatibility.</li> <li>Keep contracts-first (events + APIs) as the single source of truth.</li> <li>Enable safe rollbacks (just flip image tags).</li> <li>Avoid hard breaks: use dual\u2011publish and additive changes.</li> </ul>"},{"location":"50-repo-structure/release-strategy/#semantic-versioning-semver","title":"Semantic Versioning (SemVer)","text":"<ul> <li>All repos use X.Y.Z.</li> <li>X = breaking</li> <li>Y = backward\u2011compatible features</li> <li>Z = fixes/internal</li> </ul>"},{"location":"50-repo-structure/release-strategy/#images-packages","title":"Images &amp; Packages","text":"<ul> <li>Docker: <code>svc:X.Y.Z</code> and <code>svc:X</code> (major alias)</li> <li>Go module (<code>specs-go</code>): <code>vX.Y.Z</code> tags</li> <li>NPM (<code>@storo/specs</code>): semver tags</li> </ul>"},{"location":"50-repo-structure/release-strategy/#events-json-schema-versioning","title":"Events (JSON Schema) Versioning","text":"<ul> <li>Each event in <code>storo-specs</code> has an explicit envelope with a <code>\"v\"</code> field:   <pre><code>{ \"eventId\":\"...\", \"type\":\"transfers.settled\", \"v\":1, \"occurredAt\":\"...\", \"transferId\":\"...\", \"tenantId\":\"...\", \"payload\":{...} }\n</code></pre></li> <li>Additive changes (new optional fields in <code>payload</code>) \u21d2 minor bump of <code>storo-specs</code>; no change to <code>v</code>.</li> <li>Breaking changes \u21d2 introduce new event version (e.g., <code>v2</code>), keep <code>v1</code> schemas.  </li> <li>Providers (e.g., gateways) dual\u2011publish <code>v1</code> and <code>v2</code> for \u2265 2 releases.</li> <li>Consumers (e.g., ledger/recon) add support for <code>v2</code> before we retire <code>v1</code>.</li> </ul> <p>Consumer rule: always validate by <code>type + v</code> and reject unknown versions with a clear metric/log.</p>"},{"location":"50-repo-structure/release-strategy/#http-apis-versioning","title":"HTTP APIs Versioning","text":"<ul> <li>Path versioning: <code>/v1/...</code>, breaking change \u21d2 new path <code>/v2/...</code>.</li> <li>Run both versions until all clients migrate; publish sunset date.</li> </ul>"},{"location":"50-repo-structure/release-strategy/#deprecation-policy","title":"Deprecation Policy","text":"<ol> <li>Propose change + ADR in <code>storo-specs</code> PR.</li> <li>Announce (changelog + #dev\u2011announcements), add sunset date.</li> <li>Dual\u2011run (events/APIs) for \u2265 2 releases or agreed window.</li> <li>Measure: consumer readiness dashboards.</li> <li>Remove old version after sign\u2011off.</li> </ol>"},{"location":"50-repo-structure/release-strategy/#release-flow-per-service","title":"Release Flow (per service)","text":"<ol> <li>Merge to <code>main</code> (all checks green).</li> <li>Tag <code>vX.Y.Z</code> \u2192 CI builds/pushes images.</li> <li><code>storo-infra</code> PR bumps the env pin:</li> <li>dev \u2192 staging \u2192 prod (separate PRs), with Africa/Johannesburg cutoffs in mind.</li> <li>Rollback = revert tag pin in <code>storo-infra</code>.</li> </ol>"},{"location":"50-repo-structure/release-strategy/#rollout-patterns","title":"Rollout Patterns","text":"<ul> <li>Canary: ship to \u226410% traffic via separate task set/service.</li> <li>Shadow (events): consume <code>v2</code> in a shadow consumer and compare outcomes before switching.</li> <li>Feature Flags: CTS per\u2011tenant throttles, gateway partner toggles.</li> </ul>"},{"location":"50-repo-structure/release-strategy/#compatibility-matrix-example","title":"Compatibility Matrix (example)","text":"Producer Event Current Next Policy gw-usdc transfers.settled v1 v2 dual\u2011publish 2 releases ledger consumes <code>settled</code> v1 v1+v2 must accept both recon consumes <code>settled</code> v1 v1+v2 must accept both"},{"location":"50-repo-structure/release-strategy/#changelogs","title":"Changelogs","text":"<ul> <li>Each repo maintains <code>CHANGELOG.md</code> (Keep a Changelog format).</li> <li><code>storo-specs</code> also publishes a schema diff in release notes.</li> </ul>"},{"location":"50-repo-structure/release-strategy/#slas-for-releases","title":"SLAs for Releases","text":"<ul> <li>Prod changes during business hours SAST only (unless hotfix).</li> <li>Staging soak time: \u2265 24h for gateways and ledger changes.</li> <li>Emergency rollback target: &lt; 10 minutes (tag flip + health checks).</li> </ul>"},{"location":"90-templates/TEMPLATE-adr/","title":"ADR-XXXX:  <ul> <li>Status: Proposed / Accepted / Superseded</li> <li>Date: YYYY-MM-DD</li> <li>Owners: team-or-person</li> <li>Context: What problem are we solving?</li> <li>Decision: What did we choose and why?</li> <li>Consequences: Tradeoffs, risks, follow-ups.</li> <li>References: Links, issues, PRs.</li> </ul>","text":""},{"location":"90-templates/TEMPLATE-component/","title":"<p>Purpose One sentence on why this exists.</p>","text":""},{"location":"90-templates/TEMPLATE-component/#responsibilities","title":"Responsibilities","text":"<ul> <li>...</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#interfaces","title":"Interfaces","text":""},{"location":"90-templates/TEMPLATE-component/#inputs","title":"Inputs","text":"<ul> <li>Events: ...</li> <li>HTTP: ...</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#outputs","title":"Outputs","text":"<ul> <li>Events: ...</li> <li>HTTP: ...</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#data-model","title":"Data Model","text":"<ul> <li>Tables / storage / retention / PII</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#algorithms-rules","title":"Algorithms / Rules","text":"<ul> <li>Key flows and validation logic</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#diagrams","title":"Diagrams","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant S as &lt;Component&gt;\n  Client-&gt;&gt;S: Request\n  S--&gt;&gt;Client: Response</code></pre>"},{"location":"90-templates/TEMPLATE-component/#failure-modes-retries","title":"Failure Modes &amp; Retries","text":"<ul> <li>...</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#observability","title":"Observability","text":"<ul> <li>Metrics / logs / traces</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#security","title":"Security","text":"<ul> <li>Secrets / authn/z / PII / PCI</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#runbooks","title":"Runbooks","text":"<ul> <li>...</li> </ul>"}]}