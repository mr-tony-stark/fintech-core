{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Storo Docs","text":"<p>Welcome to the Storo payments nucleus documentation.</p> <ul> <li>Start with the Overview to understand architecture and concepts.</li> <li>Browse Components for service-level docs.</li> <li>See Specs for APIs, events, and posting rules.</li> <li>Diagrams include component maps and lifecycles.</li> </ul> <p>Quick links: - Overview - Components - Specs - Diagrams - Runbooks</p>"},{"location":"missing_items/","title":"Missing Items for Southern Africa Context","text":"<p>This document tracks gaps to make the Storo nucleus production-ready for South Africa (ZA) and Zimbabwe (ZW). Each entry lists a short description, suggested docs location, and status.</p>"},{"location":"missing_items/#regulatory-and-reporting","title":"Regulatory and Reporting","text":"<ul> <li>FICA onboarding tiers and risk-based limits (ZA)</li> <li>Description: Define KYC tiers, allowable limits/velocities, and enforcement hooks in CTS/compliance.</li> <li>Suggested docs: <code>docs/20-specs/risk-limits.md</code></li> <li> <p>Status: Completed (see <code>20-specs/risk-limits.md</code>)</p> </li> <li> <p>POPIA data handling and cross-border transfers</p> </li> <li>Description: Clarify data localization, lawful basis, and cross-border transfer clauses; align with retention policy.</li> <li>Suggested docs: <code>docs/40-ops/security.md</code> (POPIA section) and <code>docs/20-specs/data-retention-pii.md</code> (expanded)</li> <li> <p>Status: Completed (sections added)</p> </li> <li> <p>SARB exchange control (BoP reporting)</p> </li> <li>Description: Event fields, submission schedules, and BoP file/API formats for authorized dealer reporting.</li> <li>Suggested docs: <code>docs/20-specs/regulatory-reporting.md</code></li> <li> <p>Status: Completed (see <code>20-specs/regulatory-reporting.md</code>)</p> </li> <li> <p>goAML STR/CTR integrations (SA FIC, ZW FIU)</p> </li> <li>Description: Schemas, batching, thresholds, and ops runbook for suspicious/cash threshold reporting.</li> <li>Suggested docs: <code>docs/20-specs/regulatory-reporting.md</code>, <code>docs/40-ops/regulatory.md</code></li> <li> <p>Status: Completed (spec + ops runbook added)</p> </li> <li> <p>Licensing posture and scheme participation (PASA/System Operator)</p> </li> <li>Description: Document required licenses/partners and operational controls per role.</li> <li>Suggested docs: <code>docs/40-ops/security.md</code> (Licensing &amp; Scheme Participation)</li> <li>Status: Completed (section added)</li> </ul>"},{"location":"missing_items/#rails-coverage-and-interop","title":"Rails Coverage and Interop","text":"<ul> <li>Mobile money rails beyond EcoCash (MTN MoMo, Airtel Money, Telecash/OneMoney; ZA wallets)</li> <li>Description: Gateway docs with STK/USSD prompts, callbacks, reason codes, limits.</li> <li>Suggested docs: <code>docs/10-components/rail-gateway-mtn-momo.md</code>, <code>rail-gateway-airtel-momo.md</code>, <code>rail-gateway-ecocash.md</code></li> <li> <p>Status: Completed (docs added)</p> </li> <li> <p>PayShap (instant proxy payments)</p> </li> <li>Description: Proxy types, resolution flow, timeouts, dispute/return semantics.</li> <li>Suggested docs: <code>docs/10-components/rail-gateway-payshap.md</code></li> <li> <p>Status: Completed (doc added)</p> </li> <li> <p>BankservAfrica EFT (batch)</p> </li> <li>Description: File layouts, cutoffs, settlement windows, exception handling.</li> <li>Suggested docs: <code>docs/10-components/rail-gateway-eft.md</code></li> <li> <p>Status: Completed (doc added; DebiCheck section added)</p> </li> <li> <p>ZIPIT and RTGS nuances (ZW)</p> </li> <li>Description: Message formats, settlement timing, reason codes.</li> <li>Suggested docs: <code>docs/10-components/rail-gateway-zimswitch.md</code> (expand) and <code>rail-gateway-rtgs.md</code></li> <li>Status: Partially completed (RTGS doc added; ZIPIT mapping to expand in Zimswitch)</li> </ul>"},{"location":"missing_items/#reconciliation-and-file-formats","title":"Reconciliation and File Formats","text":"<ul> <li>Bankserv EFT/PayShap/ZIPIT/RTGS file specs</li> <li>Description: Record layouts, matching keys, cutoffs, T+N timelines.</li> <li>Suggested docs: <code>docs/20-specs/external-integrations.md</code> (expand) and <code>docs/10-components/reconciliation-returns.md</code> (expand)</li> <li> <p>Status: Completed (sections/pointers added)</p> </li> <li> <p>Reason code mapping for mobile money and PayShap</p> </li> <li>Description: Standardized return/dispute taxonomy and mapping tables.</li> <li>Suggested docs: <code>docs/20-specs/error-codes.md</code> (expand with rail maps)</li> <li>Status: Completed (section added)</li> </ul>"},{"location":"missing_items/#fx-and-cross-border","title":"FX and Cross-Border","text":"<ul> <li>Rate sources and quote policy (USD/ZAR/ZWL)</li> <li>Description: Approved quote sources (RBZ auction vs market), TTL, provenance; audit requirements.</li> <li>Suggested docs: <code>docs/20-specs/fx-policy.md</code></li> <li> <p>Status: Completed (spec added)</p> </li> <li> <p>Nostro/Vostro flows and exchange-control tags</p> </li> <li>Description: Ledger accounts, event fields (e.g., <code>exchangeControlRef</code>), hedging hooks, corridor limits.</li> <li>Suggested docs: <code>docs/10-components/ledger-service.md</code> (expand), <code>docs/20-specs/events.md</code> (add fields)</li> <li>Status: Completed (ledger and events expanded)</li> </ul>"},{"location":"missing_items/#kyc-identity-fraud","title":"KYC, Identity, Fraud","text":"<ul> <li>Tiered limits and velocity controls by KYC level</li> <li>Description: Policy matrix and enforcement points in CTS/compliance.</li> <li>Suggested docs: <code>docs/20-specs/risk-limits.md</code></li> <li> <p>Status: Completed (see <code>20-specs/risk-limits.md</code>)</p> </li> <li> <p>SIM-swap signals, AVS (ZA), bank account name-matching</p> </li> <li>Description: Risk inputs and integration contracts.</li> <li>Suggested docs: <code>docs/20-specs/external-integrations.md</code> (expand)</li> <li> <p>Status: Completed (expanded)</p> </li> <li> <p>PEPs/adverse media local sources</p> </li> <li>Description: Additional list sources and ingest SLAs.</li> <li>Suggested docs: <code>docs/10-components/compliance-screening.md</code> (expand)</li> <li> <p>Status: Completed (expanded)</p> </li> <li> <p>DebiCheck mandates (if pull payments)</p> </li> <li>Description: Mandate lifecycle, consent storage, return flows.</li> <li>Suggested docs: <code>docs/10-components/rail-gateway-eft.md</code> (DebiCheck section)</li> <li>Status: Completed (section added)</li> </ul>"},{"location":"missing_items/#tax-and-fees","title":"Tax and Fees","text":"<ul> <li>VAT handling (ZA 15%) and ZW tax nuances</li> <li>Description: Fee lines with tax codes, invoicing artifacts, ledger posting examples.</li> <li>Suggested docs: <code>docs/20-specs/tax-vat.md</code>, <code>docs/10-components/ledger-service.md</code> (expand)</li> <li> <p>Status: Completed (spec added; ledger note added)</p> </li> <li> <p>Per-rail surcharges and partner fee netting</p> </li> <li>Description: Posting patterns and reconciliation treatment.</li> <li>Suggested docs: <code>docs/20-specs/posting-rules.md</code> (expand)</li> <li>Status: Completed (posting rules expanded)</li> </ul>"},{"location":"missing_items/#operational-realities","title":"Operational Realities","text":"<ul> <li>ZA/ZW holiday calendars in Platform/Base</li> <li>Description: Ship canonical calendars and banking-day rules (Africa/Johannesburg, Harare).</li> <li>Suggested docs: <code>docs/10-components/platform-base.md</code> (expand)</li> <li> <p>Status: Completed (note added)</p> </li> <li> <p>Load-shedding resilience</p> </li> <li>Description: Backoff policies, offline retries, idempotent replay runbooks.</li> <li>Suggested docs: <code>docs/40-ops/runbooks.md</code> (expand), <code>docs/40-ops/observability.md</code> (alerts)</li> <li> <p>Status: Completed (sections added)</p> </li> <li> <p>Localization (en/af/zu/xh/st/tn) for Operator Console</p> </li> <li>Description: i18n strategy and scope of translations.</li> <li>Suggested docs: <code>docs/10-components/operator-console.md</code> (expand)</li> <li> <p>Status: Completed (section added)</p> </li> <li> <p>SLA adjustments for telco variability</p> </li> <li>Description: Timeouts, retry budgets for USSD/STK flows.</li> <li>Suggested docs: <code>docs/40-ops/observability.md</code> (expand SLOs)</li> <li>Status: Completed (notes added)</li> </ul>"},{"location":"missing_items/#security-and-privacy","title":"Security and Privacy","text":"<ul> <li>PCI scope guidance for in-region deployments</li> <li>Description: Tokenization vendors, containment patterns, SAQ posture.</li> <li>Suggested docs: <code>docs/40-ops/security.md</code> (expand)</li> <li> <p>Status: Completed (PCI SAQ guidance added)</p> </li> <li> <p>POPIA DSAR runbooks</p> </li> <li>Description: Data subject access/erasure flows with legal hold exceptions.</li> <li>Suggested docs: <code>docs/40-ops/runbooks.md</code> -&gt; add DSAR section</li> <li>Status: Completed (runbook added)</li> </ul>"},{"location":"missing_items/#documentation-and-repo-stubs","title":"Documentation and Repo Stubs","text":"<ul> <li>New gateway component docs (EcoCash, MTN MoMo, Airtel, PayShap, EFT)</li> <li>Description: Create skeleton pages using <code>TEMPLATE-component.md</code>.</li> <li>Suggested docs: <code>docs/10-components/rail-gateway-*.md</code></li> <li> <p>Status: Completed (docs added)</p> </li> <li> <p>Regulatory reporting service</p> </li> <li>Description: Service doc for goAML/BoP adapters and schedules.</li> <li>Suggested docs: <code>docs/10-components/regulatory-reporting.md</code></li> <li> <p>Status: Completed (doc added)</p> </li> <li> <p>Specs additions (regulatory, risk limits, FX, VAT, alias directory)</p> </li> <li>Description: Author new spec pages and link from Overview/Specs index.</li> <li>Suggested docs: <code>docs/20-specs/*.md</code> (as listed above)</li> <li> <p>Status: Completed (risk-limits, regulatory-reporting, fx-policy, tax-vat, events updated)</p> </li> <li> <p>Ops additions (regulatory, telco resilience)</p> </li> <li>Description: Runbooks and procedures for reporting and telco constraints.</li> <li>Suggested docs: <code>docs/40-ops/regulatory.md</code>, <code>docs/40-ops/telco-resilience.md</code></li> <li>Status: Completed (regulatory ops added; telco notes in observability/runbooks)</li> </ul>"},{"location":"missing_items/#event-and-data-model-tweaks","title":"Event and Data Model Tweaks","text":"<ul> <li>Add envelope fields: <code>kycTier</code>, <code>riskScore</code>, <code>exchangeControlRef</code>, <code>taxCode</code>, <code>proxyType</code></li> <li>Description: Optional fields in relevant <code>transfers.*</code> events with versioning guidance.</li> <li>Suggested docs: <code>docs/20-specs/events.md</code> (expand)</li> <li> <p>Status: Completed (events updated)</p> </li> <li> <p>Directory data for ZA/ZW</p> </li> <li>Description: Bank codes (ZA), PayShap proxy rules, ZW BIN/member mappings, settlement calendars.</li> <li>Suggested docs: <code>docs/10-components/directory-routing.md</code> (expand)</li> <li>Status: Completed (directory expanded)</li> </ul>"},{"location":"missing_items/#diagrams-to-add","title":"Diagrams to Add","text":"<ul> <li>PayShap sequence/state</li> <li>Description: Proxy resolution, submit, settle, returns.</li> <li>Suggested docs: <code>docs/30-diagrams/sequence-submit-payshap.mmd</code>, <code>state-payshap.mmd</code></li> <li> <p>Status: Completed (sequence added)</p> </li> <li> <p>EFT batch sequence</p> </li> <li>Description: File submit -&gt; settlement -&gt; exceptions.</li> <li>Suggested docs: <code>docs/30-diagrams/sequence-eft-batch.mmd</code></li> <li> <p>Status: Completed (sequence added)</p> </li> <li> <p>EcoCash STK prompt</p> </li> <li>Description: R2P prompt/accept/settle/return timeline.</li> <li>Suggested docs: <code>docs/30-diagrams/sequence-stk-ecocash.mmd</code></li> <li> <p>Status: Completed (sequence added)</p> </li> <li> <p>BoP reporting pipeline</p> </li> <li>Description: Event -&gt; aggregation -&gt; submission -&gt; ack/retry.</li> <li>Suggested docs: <code>docs/30-diagrams/sequence-bop-reporting.mmd</code></li> <li>Status: Completed (sequence added)</li> </ul> <p>Last updated: 2025-08-27</p>"},{"location":"sprint-001/","title":"Sprint 001 \u2013 Kickoff","text":"<p>Dates: YYYY\u2011MM\u2011DD \u2192 YYYY\u2011MM\u2011DD Team: 2 devs (Sprint Master/System Design + Developer) Focus: Bootstrapping Storo nucleus with contracts, infra scaffolding, and first end\u2011to\u2011end slice.</p>"},{"location":"sprint-001/#goals-sprint-outcome","title":"\ud83c\udfaf Goals (Sprint Outcome)","text":"<ul> <li>Have a working docs + specs foundation (clear contracts, posting rules, glossary).</li> <li>Bring up devstack with CTS + USDC Gateway + Ledger (thin slice).</li> <li>CI/CD pipelines in place (lint, test, contract\u2011validate, build).</li> <li>First happy\u2011path transfer flows documented and testable.</li> </ul>"},{"location":"sprint-001/#scope-stories","title":"\ud83d\uddc2 Scope (Stories)","text":""},{"location":"sprint-001/#1-documentation-specs","title":"1. Documentation &amp; Specs","text":"<ul> <li>[ ] Finalize <code>20-specs/events.md</code> with explicit <code>\"v\": 1</code> field.</li> <li>[ ] Link <code>posting-rules.md</code> into <code>ledger-service.md</code>.</li> <li>[ ] Draft <code>glossary.md</code> (with Moov.io + finance/accounting terms).</li> <li>[ ] ADR\u20110001 (outbox pattern), ADR\u20110002 (double\u2011entry ledger).</li> </ul>"},{"location":"sprint-001/#2-infra-devstack","title":"2. Infra &amp; Devstack","text":"<ul> <li>[ ] <code>storo-devstack</code> repo skeleton (Docker Compose + LocalStack + Postgres + Prometheus + Grafana).</li> <li>[ ] CTS + Ledger + USDC GW images wired into devstack.</li> <li>[ ] Local override example documented in <code>local-dev.md</code>.</li> </ul>"},{"location":"sprint-001/#3-cicd","title":"3. CI/CD","text":"<ul> <li>[ ] Apply standard <code>.github/workflows/ci.yml</code> to CTS repo.</li> <li>[ ] Contract validation step wired to <code>storo-specs</code>.</li> <li>[ ] First green pipeline run.</li> </ul>"},{"location":"sprint-001/#4-endtoend-slice-happy-path","title":"4. End\u2011to\u2011End Slice (Happy Path)","text":"<ul> <li>[ ] Client POST <code>/v1/transfers</code> to CTS (devstack).</li> <li>[ ] CTS emits <code>transfers.submitted.usdc</code>.</li> <li>[ ] USDC Gateway consumes, emits <code>accepted</code> + <code>settled</code>.</li> <li>[ ] Ledger posts debit/credit entries.</li> <li>[ ] Verify balances via <code>GET /balances</code>.</li> </ul>"},{"location":"sprint-001/#definition-of-done","title":"\u2705 Definition of Done","text":"<ul> <li>Docs: published in repo under <code>/docs</code> (renderable on GitHub).</li> <li>Specs: validated with golden fixtures in CI.</li> <li>Infra: <code>docker compose up</code> starts stack; Grafana accessible.</li> <li>Flow: running curl against CTS \u2192 events \u2192 ledger visible in logs.</li> </ul>"},{"location":"sprint-001/#out-of-scope","title":"\ud83d\udea7 Out of Scope","text":"<ul> <li>Zimswitch &amp; OPPWA gateways (future sprints).</li> <li>Reconciliation service (later sprint).</li> <li>Operator Console UI (later sprint).</li> </ul>"},{"location":"sprint-001/#risks-mitigation","title":"\ud83d\udd2e Risks &amp; Mitigation","text":"<ul> <li>Spec churn: mitigate by freezing contracts after ADR sign\u2011off.</li> <li>Infra drift: mitigate with Terraform baseline next sprint.</li> <li>Dev confusion: mitigate by docs-first (glossary, component pages).</li> </ul>"},{"location":"sprint-001/#metrics","title":"\ud83d\udcca Metrics","text":"<ul> <li>Sprint velocity = 4 stories completed.</li> <li>CI pass rate = 100% on <code>main</code>.</li> <li>Devstack start\u2011to\u2011happy\u2011path = &lt; 15 min setup.</li> </ul>"},{"location":"sprint-001/#ownership","title":"\ud83d\udc65 Ownership","text":"<ul> <li>Sprint Master/System Design: contracts, ADRs, devstack infra, CI template.</li> <li>Developer: implement CTS service skeleton, USDC GW skeleton, integrate with specs.</li> </ul>"},{"location":"sprint-001/#next-sprint-preview","title":"\ud83d\udcdd Next Sprint Preview","text":"<ul> <li>Add OPPWA Gateway with strict validators.</li> <li>Implement reconciliation ingest for USDC.</li> <li>Introduce Operator Console (timeline + exceptions).</li> </ul>"},{"location":"00-overview/","title":"Storo Documentation","text":"<p>Welcome to the Storo Docs \u2014 the single source of truth for how the Storo payments nucleus is designed, built, and operated.</p>"},{"location":"00-overview/#what-this-provides","title":"\ud83c\udf0d What this provides?","text":"<p>Storo provides a payments nucleus for the Southern Africa \u2194 global corridor. It provides:</p> <ul> <li>Unified API for payments, payouts, and transfers.</li> <li>Ledger for strict double-entry accounting and balance tracking.</li> <li>Router that connects to multiple rails (USDC on Avax/Algorand, Zimswitch/OPPWA, mobile money, EFT).</li> <li>Compliance and reconciliation as first-class components, not afterthoughts.</li> </ul> <p>Think of it as the boring but unbreakable center of our payment universe.</p>"},{"location":"00-overview/#whats-in-this-documentation","title":"\ud83e\udde9 What\u2019s in this Documentation?","text":"<p>This docs repo is organized into clear layers:</p>"},{"location":"00-overview/#1-overview-you-are-here","title":"1. Overview (you are here)","text":"<ul> <li><code>index.md</code> \u2192 This page: big-picture introduction, how to use the docs.</li> <li><code>nucleus.md</code> \u2192 Detailed description of the Storo nucleus (all components together).</li> <li><code>glossary.md</code> \u2192 Domain terms (rails, ledger, reconciliation, returns, etc.).</li> <li><code>architecture-decisions/</code> \u2192 ADRs (Architecture Decision Records) documenting why we made key choices.</li> </ul>"},{"location":"00-overview/#2-components","title":"2. Components","text":"<p>Each nucleus component has its own page: - Canonical Transfer Service (CTS) - Rail Gateways (Zimswitch, OPPWA, USDC/Algorand) - Ledger Service - Compliance Screening - Directory &amp; Routing - Reconciliation &amp; Returns - Event Bus + Outbox - Platform/Base - Operator Console</p> <p>Each page explains Purpose \u2192 Responsibilities \u2192 Interfaces \u2192 Data \u2192 Diagrams \u2192 Failure Modes \u2192 Ops.</p>"},{"location":"00-overview/#3-specs","title":"3. Specs","text":"<ul> <li>Event envelope &amp; catalog</li> <li>Canonical Transfer API schema (<code>POST /transfers</code>)</li> <li>Posting rules (event \u2192 debit/credit accounts)</li> <li>Data retention &amp; PII handling</li> </ul>"},{"location":"00-overview/#4-diagrams","title":"4. Diagrams","text":"<ul> <li>Component diagram of the nucleus</li> <li>Transfer lifecycle state machine</li> <li>Sequence diagrams for common flows (e.g. USDC payment, OPPWA return, reconciliation match)</li> </ul>"},{"location":"00-overview/#5-ops","title":"5. Ops","text":"<ul> <li>Runbooks (returns, reconciliation triage, compliance freeze/unfreeze)</li> <li>Observability (metrics, dashboards, logs, SLOs)</li> <li>Security (secrets, IAM, PII redaction)</li> </ul>"},{"location":"00-overview/#6-templates","title":"6. Templates","text":"<p>Reusable templates for: - New component docs - Sequence diagrams - State diagrams - ADRs</p>"},{"location":"00-overview/#how-to-read-this-repo","title":"\ud83d\udcd6 How to Read this Repo","text":"<ul> <li>If you\u2019re an engineer \u2192 dive into <code>10-components/</code> and <code>20-specs/</code>.  </li> <li>If you\u2019re an operator \u2192 check <code>40-ops/runbooks.md</code>.  </li> <li>If you\u2019re reviewing a design decision \u2192 see <code>00-overview/architecture-decisions/</code>.</li> </ul>"},{"location":"00-overview/#diagram-standards","title":"\ud83d\udcd0 Diagram Standards","text":"<p>We use Mermaid diagrams in Markdown. GitHub renders them directly; you can also export with <code>@mermaid-js/mermaid-cli</code>.</p> <ul> <li>Component diagrams \u2192 boxes + arrows (what services exist, how they talk).  </li> <li>State diagrams \u2192 transfer lifecycle (INITIATED \u2192 SETTLED \u2192 RETURNED).  </li> <li>Sequence diagrams \u2192 end-to-end message flows (client \u2192 CTS \u2192 rail gateway \u2192 ledger).  </li> </ul> <p>Example:</p> <p>```mermaid flowchart LR   Client --&gt; CTS[Canonical Transfer Service]   CTS --&gt; GW[Rail Gateway]   GW --&gt; EB[(Event Bus)]   EB --&gt; L[Ledger]</p>"},{"location":"00-overview/dev-workflow/","title":"Development Workflow","text":"<p>This document sets conventions for how we develop, review, and deploy Storo nucleus code.</p>"},{"location":"00-overview/dev-workflow/#branching","title":"\ud83d\udd00 Branching","text":"<ul> <li>Main branch = always deployable.</li> <li>Feature branches \u2192 PR \u2192 merge to main (require review).</li> <li>Hotfix branches allowed only with approval.</li> </ul>"},{"location":"00-overview/dev-workflow/#code-reviews","title":"\ud83d\udcdd Code Reviews","text":"<ul> <li>Minimum 1 reviewer for all PRs.</li> <li>Use ADRs for architectural changes.</li> <li>Must include tests for all new code.</li> </ul>"},{"location":"00-overview/dev-workflow/#testing-levels","title":"\u2705 Testing Levels","text":"<ul> <li>Unit tests with golden fixtures (esp. rail adapters).</li> <li>Integration tests with mocks/stubs.</li> <li>End-to-end tests with sandbox rails (EcoCash, OPPWA, USDC).</li> </ul>"},{"location":"00-overview/dev-workflow/#cicd","title":"\ud83c\udfd7 CI/CD","text":"<ul> <li>GitHub Actions pipeline:</li> <li>Build \u2192 Lint \u2192 Test \u2192 Dockerize \u2192 Deploy (staging).</li> <li>Staging deploys automatically.</li> <li>Production deploys require approval.</li> </ul>"},{"location":"00-overview/dev-workflow/#docs-adrs","title":"\ud83d\udccc Docs &amp; ADRs","text":"<ul> <li>Every new service/component must include a <code>docs/10-components/&lt;name&gt;.md</code>.</li> <li>Significant design changes must log an ADR under <code>00-overview/architecture-decisions/</code>.</li> </ul>"},{"location":"00-overview/dev-workflow/#secrets-security","title":"\ud83d\udd10 Secrets &amp; Security","text":"<ul> <li>No secrets in repo.</li> <li>All secrets via Vault or AWS SSM.</li> </ul>"},{"location":"00-overview/glossary/","title":"Glossary","text":"<p>Shared domain language for Storo. Sources include our design docs and Moov.io\u2019s terms-dictionary. This file should be the first stop for new contributors.</p>"},{"location":"00-overview/glossary/#a","title":"A","text":"<p>ACH Automated Clearing House. Batch-based payment network in the U.S. Not directly used in Storo, but referenced via Moov patterns.</p> <p>Account A ledger entity that holds balances and records postings. Types include: User, Merchant, Liquidity, Fees, FX, Settlement.</p> <p>ADR (Architecture Decision Record) Lightweight doc capturing a key architectural choice, its context, decision, and consequences.</p> <p>Authorization (AUTH) A request to place a hold on funds. In Storo, represented in the canonical transfer intent.</p>"},{"location":"00-overview/glossary/#b","title":"B","text":"<p>BAI2 Bank Administration Institute format for statement files. Used by Moov and referenced as a model for Storo\u2019s reconciliation exports.</p> <p>Balance The net amount for an account at a given time, derived from postings.</p> <p>BIN (Bank Identification Number) The first digits of a card number, identifying the issuer. Stored in the Directory service.</p> <p>Bus (Event Bus) Pub/sub system (SNS+SQS in dev) delivering domain events between services.</p>"},{"location":"00-overview/glossary/#c","title":"C","text":"<p>Canonical Transfer Service (CTS) Front-door API and orchestrator for transfers in Storo. Ensures idempotency, normalization, compliance, and routing.</p> <p>Chargeback / Return Reversal of a prior settlement, with reason codes. Modeled as state transitions in CTS and reversal postings in the Ledger.</p> <p>Compliance Screening Process of checking payer/payee against watchlists (OFAC, UN, EU, SA FIC). Implemented as a local fast index.</p> <p>Cutoff Time of day after which payments are queued for next business day. Defined in Directory service.</p>"},{"location":"00-overview/glossary/#d","title":"D","text":"<p>Directory Service Component maintaining authoritative data on institutions, BINs, fees, and settlement windows.</p> <p>Double-entry Accounting principle: every debit has an equal credit. Enforced in Storo Ledger.</p> <p>DLQ (Dead Letter Queue) Queue for events that failed processing and need operator intervention.</p>"},{"location":"00-overview/glossary/#e","title":"E","text":"<p>Event Immutable record emitted by a service (e.g., <code>transfers.settled</code>). Structured by the event envelope spec.</p> <p>Event Envelope Standard wrapper for all events: <code>{ eventId, type, occurredAt, transferId, tenantId, payload }</code>.</p> <p>External Reference Rail- or partner-provided identifier (e.g., auth code, transaction ref). Stored in transfers table.</p>"},{"location":"00-overview/glossary/#f","title":"F","text":"<p>FBO (For Benefit Of) Banking account structure where a custodian holds funds for multiple end-users. Modeled in Ledger accounts.</p> <p>Fixture (Golden Test) Sample payload used in tests to ensure round-trip parsing and validation stability.</p>"},{"location":"00-overview/glossary/#g","title":"G","text":"<p>Gateway Adapter for a payment rail (Zimswitch, OPPWA, USDC/Algorand). Translates canonical transfers into rail-specific requests.</p> <p>GL (General Ledger) The book of record. Storo Ledger service maintains the general ledger.</p> <p>Glossary This file. Shared terms and definitions.</p>"},{"location":"00-overview/glossary/#i","title":"I","text":"<p>Idempotency Ensuring a request (e.g., <code>POST /transfers</code>) can be safely retried without duplication.</p> <p>ISO 8583 International standard for card payment messages. Zimswitch uses this; Storo validates payloads via strict schemas.</p> <p>ISO 20022 XML/JSON standard for financial messaging. Referenced for future-proofing rails.</p>"},{"location":"00-overview/glossary/#l","title":"L","text":"<p>Ledger The authoritative record of postings, balances, and statements. Event-driven, double-entry, append-only.</p> <p>Lifecycle (Transfer) State machine: INITIATED \u2192 SUBMITTED \u2192 ACCEPTED \u2192 SETTLED \u2192 (RETURNED | FAILED).</p> <p>Liquidity Account Special ledger account representing pooled liquidity held for customer settlements.</p>"},{"location":"00-overview/glossary/#o","title":"O","text":"<p>Observability The ability to measure, trace, and debug system behavior via metrics, logs, and tracing.</p> <p>OFAC Office of Foreign Assets Control. U.S. sanctions list. Indexed locally alongside UN/EU/SA lists.</p> <p>Operator Console Internal UI for handling returns, recon exceptions, and compliance flags.</p>"},{"location":"00-overview/glossary/#p","title":"P","text":"<p>PII (Personally Identifiable Information) Sensitive data (names, IDs, PANs). Must be encrypted, redacted in logs, and retained per policy.</p> <p>Posting Atomic debit/credit entry in the ledger. Immutable, append-only.</p> <p>Posting Rules Mapping from transfer events to specific ledger postings (accounts, amounts, memos).</p>"},{"location":"00-overview/glossary/#r","title":"R","text":"<p>Rail A payment network (e.g., Zimswitch, OPPWA, Algorand/USDC).</p> <p>Reconciliation Process of matching partner statements or on-chain events with internal transfers. Runs nightly.</p> <p>Return Negative state transition; undo of a prior settlement with reason codes.</p>"},{"location":"00-overview/glossary/#s","title":"S","text":"<p>Settlement Final movement of funds on a rail. In Storo, confirmed by events and reconciled against statements.</p> <p>Specs Repo Dedicated repo holding event schemas, API definitions, and fixtures (<code>storo-specs</code>). Source of truth for contracts.</p> <p>State Diagram Visual representation of lifecycle states and transitions (Mermaid).</p>"},{"location":"00-overview/glossary/#t","title":"T","text":"<p>Tenant Isolated namespace for a customer/institution using Storo. All transfers are scoped by tenantId.</p> <p>Trace ID Identifier used for distributed tracing across services.</p> <p>Transfer Core unit of money movement in Storo, defined by canonical schema (payer, payee, amount, rail, intent, etc.).</p>"},{"location":"00-overview/glossary/#w","title":"W","text":"<p>Watchlist Sanctions/risk list (OFAC, UN, EU, SA FIC). Ingested and indexed locally for compliance screening.</p> <p>This glossary evolves with the system. Always update it alongside specs and ADRs.</p>"},{"location":"00-overview/nfrs/","title":"Non-Functional Requirements (NFRs)","text":"<p>This document captures the performance, availability, security, and compliance targets for the Storo nucleus.</p>"},{"location":"00-overview/nfrs/#availability","title":"\ud83c\udfaf Availability","text":"<ul> <li>Target uptime: 99.9% minimum (3-nines) during MVP.</li> <li>Long-term target: 99.99% for core services (Canonical Transfer Service, Ledger, Event Bus).</li> </ul>"},{"location":"00-overview/nfrs/#performance","title":"\u26a1 Performance","text":"<ul> <li>API latency (P99):</li> <li>POST /transfers: \u2264 250 ms (excluding external rail).</li> <li>Balance queries: \u2264 100 ms.</li> <li>Event bus publish lag (P99): \u2264 1 s.</li> <li>Ledger posting confirmation: \u2264 1 s after settlement.</li> </ul>"},{"location":"00-overview/nfrs/#throughput","title":"\ud83d\udcca Throughput","text":"<ul> <li>MVP scale: 50 TPS sustained.</li> <li>Scale target (2 years): 500 TPS sustained.</li> </ul>"},{"location":"00-overview/nfrs/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Mutual TLS between services.</li> <li>Tenant API keys or JWT for client APIs.</li> <li>PII encrypted at rest, redacted in logs.</li> <li>Secrets rotation: 90 days.</li> </ul>"},{"location":"00-overview/nfrs/#compliance","title":"\ud83e\uddfe Compliance","text":"<ul> <li>Audit logs immutable and retained 7 years.</li> <li>Data residency: all primary storage in-region (SA/ZW).</li> <li>Screening latency: \u2264 500 ms pre-submit.</li> </ul>"},{"location":"00-overview/nfrs/#notes","title":"\ud83d\udccc Notes","text":"<p>This document will evolve with load tests, audits, and regulatory requirements.</p>"},{"location":"00-overview/nucleus/","title":"Storo Nucleus","text":"<p>The Storo nucleus is the boring, strict, event-driven core of the platform. It orchestrates all money movement across rails (USDC/Algorand, Zimswitch/OPPWA, EFT, mobile money) while enforcing compliance, ledger discipline, and reconciliation.</p>"},{"location":"00-overview/nucleus/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>The nucleus exists to: - Provide a single canonical model for all transfers. - Keep rail-specific logic isolated in gateways. - Guarantee double-entry correctness via the ledger. - Ensure compliance and reconciliation are first-class, not bolted on. - Emit domain events so every change is observable and auditable.  </p>"},{"location":"00-overview/nucleus/#components-at-a-glance","title":"\ud83e\udde9 Components at a Glance","text":"<ul> <li>Canonical Transfer Service (CTS) \u2192 orchestrates transfer lifecycle, idempotency, emits events.  </li> <li>Rail Gateways \u2192 adapters for each rail, strict spec validation, submit &amp; emit rail outcomes.  </li> <li>Ledger Service \u2192 double-entry postings, balances, statements.  </li> <li>Compliance Screening \u2192 fast local allow/deny; pre-submit &amp; delta re-screens.  </li> <li>Directory &amp; Routing \u2192 institutions, BINs, fees, settlement windows.  </li> <li>Reconciliation &amp; Returns \u2192 ingest statements, match transfers, manage returns/exceptions.  </li> <li>Event Bus + Outbox \u2192 exactly-once event delivery; glue between services.  </li> <li>Platform/Base \u2192 shared utilities (admin, time, IDs, error handling, migrations).  </li> <li>Operator Console \u2192 human control surface for exceptions, flags, returns.  </li> </ul>"},{"location":"00-overview/nucleus/#component-diagram","title":"\ud83c\udfd7\ufe0f Component Diagram","text":"<pre><code>flowchart LR\n  subgraph Client/Partners\n    A[Client Apps / Merchants / WhatsApp Bot]\n  end\n\n  subgraph Core[\"Storo Nucleus\"]\n    direction LR\n\n    subgraph API[\"Canonical Transfer Service (API)\"]\n      CTS[POST /transfers&lt;br/&gt;GET /transfers/:id&lt;br/&gt;Idempotency]\n    end\n\n    subgraph GW[\"Rail Gateways\"]\n      ZG[Zimswitch Gateway]\n      OG[OPPWA Gateway]\n      UG[USDC/Algorand Gateway]\n    end\n\n    subgraph L[\"Ledger Service\"]\n      LJ[Journal &amp; Postings]\n      LB[Balances &amp; Statements]\n    end\n\n    subgraph C[\"Compliance Screening\"]\n      CS[Local Watchlist Index&lt;br/&gt;/screen]\n    end\n\n    subgraph D[\"Directory &amp; Routing\"]\n      DR[Institutions/BINs&lt;br/&gt;Fees &amp; Windows]\n    end\n\n    subgraph R[\"Reconciliation &amp; Returns\"]\n      RC[Statement Ingest&lt;br/&gt;Unmatched Queue]\n    end\n\n    subgraph B[\"Event Bus + Outbox\"]\n      EB[(Topics: transfers.*, ledger.*, recon.*)]\n    end\n\n    subgraph O[\"Operator Console\"]\n      OC[Ops UI&lt;br/&gt;Returns/Recon/Flags]\n    end\n\n    subgraph PL[\"Platform/Base\"]\n      AD[/ /live /ready /metrics /version /]\n      TM[Banking Time &amp; Holidays]\n      IDG[ID/Tracing &amp; Errors]\n    end\n  end\n\n  A --&gt;|create intent| CTS\n  CTS --&gt;|pre-screen| CS\n  CS --&gt;|allow/deny| CTS\n  CTS --&gt;|route| D\n  D --&gt; CTS\n  CTS --&gt;|submit| ZG\n  CTS --&gt;|submit| OG\n  CTS --&gt;|submit| UG\n\n  ZG --&gt; EB\n  OG --&gt; EB\n  UG --&gt; EB\n\n  EB --&gt; CTS\n  EB --&gt; L\n  EB --&gt; R\n  EB --&gt; O\n\n  L &lt;--&gt; R\n  R --&gt;|nightly ingest| EB\n\n  OC --- O\n  PL --- CTS\n  PL --- GW\n  PL --- L\n  PL --- C\n  PL --- D\n  PL --- R</code></pre>"},{"location":"00-overview/nucleus/#transfer-lifecycle-state-machine","title":"\ud83d\udd04 Transfer Lifecycle (State Machine)","text":"<pre><code>stateDiagram-v2\n  [*] --&gt; INITIATED\n  INITIATED --&gt; SUBMITTED: CTS submits.&lt;rail&gt;\n  SUBMITTED --&gt; ACCEPTED: rail reference received\n  ACCEPTED --&gt; SETTLED: funds final\n  ACCEPTED --&gt; RETURNED: return/chargeback code\n  SUBMITTED --&gt; FAILED: technical failure\n  SETTLED --&gt; [*]\n  RETURNED --&gt; [*]\n  FAILED --&gt; [*]</code></pre>"},{"location":"00-overview/nucleus/#contracts","title":"\ud83d\udcdc Contracts","text":""},{"location":"00-overview/nucleus/#event-envelope","title":"Event Envelope","text":"<pre><code>{\n  \"eventId\": \"uuid\",\n  \"type\": \"transfers.settled\",\n  \"occurredAt\": \"2025-08-26T10:15:01Z\",\n  \"transferId\": \"tr_12345\",\n  \"tenantId\": \"tn_67890\",\n  \"payload\": { \"amount\": { \"value\": 100, \"currency\": \"ZAR\" }, \"rail\": \"zimswitch\" }\n}\n</code></pre>"},{"location":"00-overview/nucleus/#canonical-transfer","title":"Canonical Transfer","text":"<pre><code>{\n  \"transferId\": \"tr_12345\",\n  \"tenantId\": \"tn_67890\",\n  \"payer\": { \"accountId\": \"acct_001\" },\n  \"payee\": { \"accountId\": \"acct_999\" },\n  \"amount\": { \"value\": 1000, \"currency\": \"USD\" },\n  \"rail\": \"usdc-algo\",\n  \"intent\": \"PUSH\",\n  \"externalRef\": \"ext_abc123\",\n  \"metadata\": { \"invoiceId\": \"inv_555\" },\n  \"state\": \"SUBMITTED\"\n}\n</code></pre>"},{"location":"00-overview/nucleus/#posting","title":"Posting","text":"<pre><code>{\n  \"postingId\": \"pst_001\",\n  \"transferId\": \"tr_12345\",\n  \"debitAccountId\": \"acct_001\",\n  \"creditAccountId\": \"acct_999\",\n  \"amount\": { \"value\": 1000, \"currency\": \"USD\" },\n  \"memo\": \"Payment settlement\",\n  \"occurredAt\": \"2025-08-26T10:15:01Z\"\n}\n</code></pre>"},{"location":"00-overview/nucleus/#non-negotiables","title":"\u2705 Non-Negotiables","text":"<ul> <li>Strict validation at rail gateways (no malformed messages pass).  </li> <li>Exactly-once events (via outbox + idempotent consumers).  </li> <li>Double-entry always balanced.  </li> <li>Compliance pre-screen mandatory before submission.  </li> <li>Reconciliation nightly, exceptions reviewed before books close.  </li> <li>Operator console required for human resolution.  </li> </ul>"},{"location":"00-overview/nucleus/#slos","title":"\ud83d\udcc8 SLOs","text":"<ul> <li>API latency (P99, <code>POST /transfers</code>): \u2264 250 ms (excluding rail response).  </li> <li>Event publish lag (P99): \u2264 1 s.  </li> <li>Ledger posting latency (P99): \u2264 1 s after <code>settled</code>.  </li> <li>Reconciliation match rate: \u2265 99.8% same day, 100% by T+1.  </li> <li>Idempotency collision rate: 0%.  </li> </ul> <p>Next step: See ../10-components/canonical-transfer-service.md for detailed pages on each service.</p>"},{"location":"00-overview/risks-open-questions/","title":"Risks &amp; Open Questions","text":"<p>This is a living list of risks and unknowns that need clarity.</p>"},{"location":"00-overview/risks-open-questions/#open-questions","title":"\u2753 Open Questions","text":"<ul> <li>Settlement liquidity ownership: who pre-funds? merchant vs Storo vs bank?</li> <li>How to handle returns when rail semantics don\u2019t map 1:1?</li> <li>Which rails are priority for MVP (EcoCash, USDC, OPPWA)?</li> <li>Is PayShap integration required in Phase 1?</li> </ul>"},{"location":"00-overview/risks-open-questions/#risks","title":"\u26a0\ufe0f Risks","text":"<ul> <li>Regulatory approvals may delay go-live (cross-border, FIC).</li> <li>Rail instability: EcoCash APIs historically unreliable.</li> <li>Telco politics: MNOs may resist third-party integrations.</li> <li>Crypto volatility: reliance on USDC requires hedging &amp; liquidity planning.</li> <li>Fraud risk: high potential for SIM swaps and social engineering.</li> </ul>"},{"location":"00-overview/risks-open-questions/#mitigation-ideas","title":"\ud83d\udccc Mitigation Ideas","text":"<ul> <li>Start with rails we fully control (USDC).</li> <li>Build compliance and audit hooks early.</li> <li>Work with AfricaNenda/Mojaloop for regulatory credibility.</li> </ul>"},{"location":"00-overview/storo-vs-mojaloop/","title":"Storo Nucleus vs Mojaloop Hub - Visual Contrast","text":"<p>This note shows how Storo is inspired by Mojaloop while keeping a modular, rail-agnostic nucleus. Two diagrams: 1) Component landscape comparison 2) Transaction flow (Request-to-Pay) mapped to each architecture</p>"},{"location":"00-overview/storo-vs-mojaloop/#1-component-landscape","title":"1) Component Landscape","text":"<pre><code>flowchart LR\n  subgraph S[\"Storo Nucleus (Modular, Rail-Agnostic)\"]\n    direction LR\n    S1[\"CTS (Canonical Transfer Service)\"]\n    S2[\"Rail Gateways (EcoCash/PayShap/OPPWA/USDC)\"]\n    S3[\"Ledger Service (Double-Entry)\"]\n    S4[\"Compliance (Screening/Lists)\"]\n    S5[\"Directory &amp; Routing (ALS/Fees/Windows)\"]\n    S6[\"Reconciliation &amp; Returns\"]\n    S7[\"Event Bus + Outbox\"]\n    S8[\"Operator Console\"]\n    S9[\"Platform/Base (Admin/Time/Errors/IDs)\"]\n  end\n\n  subgraph M[\"Mojaloop Hub (Switch + Scheme Services)\"]\n    direction LR\n    M1[\"Account Lookup Service (ALS / Discovery)\"]\n    M2[\"Quoting Service (FX / Fees Agreement)\"]\n    M3[\"Central Ledger (Clearing/Positions)\"]\n    M4[\"Settlement Module (RTGS/Net/Prefund)\"]\n    M5[\"Scheme Rules &amp; Auth (PKI, Signatures, Consent)\"]\n    M6[\"Fraud/Risk Hooks\"]\n    M7[\"FSPIOP API Gateway\"]\n    M8[\"ILP Coordinator (Conditions/Fulfillment)\"]\n  end\n\n  %% Storo internals\n  S1 --&gt; S4\n  S1 --&gt; S5\n  S1 --&gt; S2\n  S2 --&gt; S7\n  S7 --&gt; S3\n  S7 --&gt; S6\n  S8 --- S7\n  S9 --- S1\n  S9 --- S2\n  S9 --- S3\n\n  %% Mojaloop internals\n  M7 --&gt; M1\n  M7 --&gt; M2\n  M7 --&gt; M8\n  M8 --&gt; M3\n  M3 --&gt; M4\n  M5 --- M7\n  M6 --- M7\n</code></pre> <p>Key differences - Storo separates rail adapters (gateways) from the core; ledger is internal SoT. - Mojaloop is a shared switch: it offers discovery, quoting, clearing &amp; settlement to external DFSPs. - Both use directories (ALS), FX/fees agreement, security (PKI), and fraud hooks \u2014 but Storo keeps them inside its nucleus; Mojaloop exposes them as scheme services.</p>"},{"location":"00-overview/storo-vs-mojaloop/#2-request-to-pay-r2p-flow-side-by-side","title":"2) Request-to-Pay (R2P) Flow \u2014 Side-by-Side","text":"<pre><code>sequenceDiagram\n  autonumber\n  participant Client as Merchant App / POS\n  participant Storo as Storo CTS\n  participant Dir as Directory (ALS)\n  participant GW as Rail Gateway (e.g., EcoCash/PayShap/USDC)\n  participant Ledger as Ledger Service\n\n  Note over Client,Ledger: Storo \u2014 Rail-agnostic nucleus\n\n  Client-&gt;&gt;Storo: POST /transfers (payer alias, amount, rail)\n  Storo-&gt;&gt;Dir: Resolve alias -&gt; provider/route\n  Dir--&gt;&gt;Storo: Provider &amp; fees/windows\n  Storo-&gt;&gt;GW: transfers.submitted.&lt;rail&gt;\n  GW--&gt;&gt;Storo: transfers.accepted (prompt delivered / tx observed)\n  GW--&gt;&gt;Storo: transfers.settled (funds final)\n  Storo-&gt;&gt;Ledger: Postings (Dr/Cr + fees/FX)\n  Ledger--&gt;&gt;Storo: Balances updated\n  Storo--&gt;&gt;Client: 200 OK (state: SETTLED)</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  participant PayerApp as Payer DFSP App\n  participant Hub as Mojaloop Hub (FSPIOP)\n  participant ALS as Account Lookup (Discovery)\n  participant Quote as Quoting (FX/Fees)\n  participant ILP as ILP/Transfer Orchestrator\n  participant PayeeApp as Payee DFSP App\n  participant Settle as Settlement/RTGS\n\n  Note over PayerApp,Settle: Mojaloop \u2014 Shared scheme with DFSPs\n\n  PayerApp-&gt;&gt;Hub: POST /parties (discover payee alias)\n  Hub-&gt;&gt;ALS: Lookup alias -&gt; DFSP\n  ALS--&gt;&gt;Hub: Payee DFSP\n  Hub-&gt;&gt;PayeeApp: GET /quotes?amount,currency\n  PayeeApp--&gt;&gt;Hub: Quote (amountIn/Out, fees, FX, ILP condition)\n  Hub--&gt;&gt;PayerApp: Quote (approve?)\n  PayerApp-&gt;&gt;Hub: POST /transfers (attach ILP condition)\n  Hub-&gt;&gt;ILP: Coordinate conditional transfer\n  ILP-&gt;&gt;PayeeApp: Fulfill if terms met\n  PayeeApp--&gt;&gt;Hub: Transfer success\n  Hub-&gt;&gt;Settle: (Net/Gross) settlement instruction\n  Hub--&gt;&gt;PayerApp: Transfer completed</code></pre> <p>Interpretation - Storo treats R2P as an internal orchestration; gateways perform the last-mile prompt/observe/settle. - Mojaloop formalizes Discovery -&gt; Quote -&gt; Transfer across multiple DFSPs, with ILP ensuring atomicity and a separate settlement layer.</p>"},{"location":"00-overview/storo-vs-mojaloop/#when-to-use-which-ideas","title":"When to use which ideas","text":"<ul> <li>Use Storo\u2019s modular gateways when you must integrate diverse rails (EcoCash, PayShap, OPPWA, USDC) and keep a single internal ledger of record.  </li> <li>Use Mojaloop patterns (FSPIOP, ILP, ISO 20022 mapping, scheme rules) to standardize cross-institution flows and future-proof for regional interop.</li> </ul> <p>Draft v1 \u2014 for internal architecture review.</p>"},{"location":"00-overview/architecture-decisions/ADR-0001-events-outbox/","title":"ADR-0001: Outbox Pattern Mandatory","text":"<p>Status: Accepted Date: 2025-08-26</p>"},{"location":"00-overview/architecture-decisions/ADR-0001-events-outbox/#context","title":"Context","text":"<p>Storo is an event-driven system. Each service must emit domain events when its state changes (e.g., <code>transfers.submitted</code>, <code>ledger.balance.updated</code>). We need to guarantee exactly-once delivery of these events despite crashes, retries, or network failures.</p> <p>Na\u00efve approaches (publishing to the bus inside app logic) risk double-emits, message loss, or divergence between DB state and events.</p>"},{"location":"00-overview/architecture-decisions/ADR-0001-events-outbox/#decision","title":"Decision","text":"<p>Every service must implement the Outbox pattern:</p> <ul> <li>State change + outbox row are persisted in the same database transaction.  </li> <li>A background dispatcher process reads the outbox table and publishes events to the bus (SNS/SQS).  </li> <li>Consumers are idempotent (dedupe by <code>eventId</code> and <code>transferId+state</code>).  </li> <li>Failed publishes are retried with exponential backoff.  </li> <li>DLQ (dead-letter queue) captures poison events.  </li> </ul>"},{"location":"00-overview/architecture-decisions/ADR-0001-events-outbox/#consequences","title":"Consequences","text":"<ul> <li>Strong delivery semantics: events are published exactly once if possible, at least once otherwise, never zero.  </li> <li>Event consumers may see duplicates, so idempotency is required.  </li> <li>Storage overhead: each service maintains its own outbox table.  </li> <li>Operationally: requires monitoring dispatch lag, DLQ size, and retries.  </li> </ul>"},{"location":"00-overview/architecture-decisions/ADR-0001-events-outbox/#alternatives-considered","title":"Alternatives Considered","text":"<ul> <li>Two-phase commit with DB + broker \u2192 rejected (complex, brittle).  </li> <li>\"Best effort\" publish outside txn \u2192 rejected (event loss possible).  </li> </ul> <p>Next Steps: - Scaffold outbox table schema in <code>platform-base</code>. - Provide Go lib for services to use out-of-the-box (insert, dispatch, metrics).  </p>"},{"location":"00-overview/architecture-decisions/ADR-0002-double-entry-ledger/","title":"ADR-0002: Ledger is Double-Entry and Append-Only","text":"<p>Status: Accepted Date: 2025-08-26</p>"},{"location":"00-overview/architecture-decisions/ADR-0002-double-entry-ledger/#context","title":"Context","text":"<p>Storo must provide an authoritative record of money movement across rails. Financial correctness requires:</p> <ul> <li>Balances that always reconcile.  </li> <li>Auditability of every change.  </li> <li>Ability to reverse but never delete.  </li> </ul>"},{"location":"00-overview/architecture-decisions/ADR-0002-double-entry-ledger/#decision","title":"Decision","text":"<p>The Ledger Service is a strict double-entry, append-only system:</p> <ul> <li>Every posting is a pair: debit one account, credit another, amounts equal.  </li> <li>Postings are immutable. Reversals are represented as new entries.  </li> <li>Balances are derived from postings (materialized views are allowed).  </li> <li>Accounts include User, Merchant, Liquidity, Fees, FX, Settlement, Reserves.  </li> <li>Ledger consumes events (accepted, settled, returned) and applies posting rules.  </li> </ul>"},{"location":"00-overview/architecture-decisions/ADR-0002-double-entry-ledger/#consequences","title":"Consequences","text":"<ul> <li>Strong audit trail. No hidden state.  </li> <li>Easy reconciliation with external statements.  </li> <li>Slightly more complex reversal flows (explicit contra postings).  </li> <li>Storage grows unbounded (mitigated with archiving, partitioning).  </li> </ul>"},{"location":"00-overview/architecture-decisions/ADR-0002-double-entry-ledger/#alternatives-considered","title":"Alternatives Considered","text":"<ul> <li>Single-entry balances updated in place \u2192 rejected (non-auditable, error-prone).  </li> <li>Event-sourcing without explicit double-entry \u2192 rejected (money truth must be explicit).  </li> </ul> <p>Next Steps: - Define posting rules in <code>20-specs/posting-rules.md</code>. - Provide Go lib for posting validation (debits == credits).  </p>"},{"location":"00-overview/architecture-decisions/ADR-0003-contracts-first/","title":"ADR-0003: Contracts-First via storo-specs Repo","text":"<p>Status: Accepted Date: 2025-08-26</p>"},{"location":"00-overview/architecture-decisions/ADR-0003-contracts-first/#context","title":"Context","text":"<p>Multiple services (CTS, gateways, ledger, compliance) need to interoperate. To avoid coupling and drift, we must define shared contracts (events, APIs) in a single source of truth.</p> <p>Moov\u2019s practice and our nucleus design both point to contract-first development.  </p>"},{"location":"00-overview/architecture-decisions/ADR-0003-contracts-first/#decision","title":"Decision","text":"<p>We establish a dedicated repo: storo-specs. It will contain:</p> <ul> <li>Event Schemas (JSON Schema) for all domain events.  </li> <li>API Definitions (OpenAPI/Swagger) for HTTP APIs (e.g., CTS).  </li> <li>Golden Fixtures (JSON) for canonical test cases.  </li> <li>Codegen scripts to publish:  </li> <li>Go structs/validators \u2192 <code>github.com/storo/specs-go</code> </li> <li>TS types/clients \u2192 <code>@storo/specs</code> (npm)</li> </ul> <p>Services must pin to tagged releases of <code>storo-specs</code> and validate at CI.  </p>"},{"location":"00-overview/architecture-decisions/ADR-0003-contracts-first/#consequences","title":"Consequences","text":"<ul> <li>Ensures consistency: all services emit/consume the same event shapes.  </li> <li>Enables language-agnostic clients (Go + TS at minimum).  </li> <li>Introduces one more repo to manage.  </li> <li>Requires discipline around versioning and compatibility (semver).  </li> </ul>"},{"location":"00-overview/architecture-decisions/ADR-0003-contracts-first/#alternatives-considered","title":"Alternatives Considered","text":"<ul> <li>Duplicating schemas in each repo \u2192 rejected (guaranteed drift).  </li> <li>Informal \u201cREADME spec\u201d \u2192 rejected (non-machine-verifiable).  </li> </ul> <p>Next Steps: - Scaffold <code>storo-specs</code> with <code>events/</code>, <code>api/</code>, <code>fixtures/</code>. - Add CI to validate schemas + generate Go/TS packages. - Update service templates to import from <code>storo-specs</code>.  </p>"},{"location":"10-components/canonical-transfer-service/","title":"Canonical transfer service","text":""},{"location":"10-components/canonical-transfer-service/#canonical-transfer-service-cts-system-design-document","title":"Canonical Transfer Service (CTS) \u2014 System Design Document","text":"<p>The Canonical Transfer Service (CTS) is the front door and conductor of Storo. It provides a single API for creating and managing transfers, normalizes requests into a canonical format, enforces idempotency, screens entities, routes transfers, and emits domain events.</p>"},{"location":"10-components/canonical-transfer-service/#1-introduction","title":"1. Introduction","text":"<ul> <li>Purpose: Define an actionable, auditable, and operable System Design for CTS.</li> <li>Scope: CTS handles submission and tracking of transfers; it does not execute rail-specific protocols directly, compute ledger postings, or perform KYC\u2014those are delegated to Gateways, Ledger, and Compliance.</li> <li>Audience: Backend engineers, SRE/Platform, Security/Compliance, Product.</li> </ul>"},{"location":"10-components/canonical-transfer-service/#2-background-context","title":"2. Background &amp; Context","text":"<ul> <li>Multi-tenant, regulated data, event-driven architecture with transactional outbox and eventual consistency for downstream consumers.</li> <li>CTS upstream: clients/integrators. Downstream: Compliance, Directory &amp; Routing, Rail Gateways, Ledger (via events), Observability stack.</li> </ul> <p>Mermaid Context (C4 Level 1) <pre><code>graph TD\n  subgraph Clients\n    A[Client Apps / Integrators]\n  end\n\n  subgraph Storo Core\n    B[CTS API]\n    C[Compliance Service]\n    D[Directory &amp; Routing]\n    E[Rail Gateways]\n    F[Ledger Service]\n    G[(OLTP DB)]\n    H[[Event Bus]]\n    I[[Observability: Metrics/Logs/Tracing]]\n  end\n\n  A -- HTTPS sync --&gt; B\n  B -- screen sync --&gt; C\n  B -- route sync --&gt; D\n  B -- persist sync --&gt; G\n  B -- events async --&gt; H\n  H -- accepted/settled async --&gt; B\n  H -- postings async --&gt; F\n  B -- telemetry --&gt; I</code></pre></p> <p>Assumptions/Constraints - Eventual consistency for downstream consumers; synchronous path returns latest known state. - Per-tenant authentication and authorization. - Exactly-once event publishing via transactional outbox. - PII encrypted at rest; PII exclusion in logs.</p>"},{"location":"10-components/canonical-transfer-service/#3-functional-requirements","title":"3. Functional Requirements","text":"<ul> <li>Accept API requests: <code>POST /transfers</code>, <code>GET /transfers/:id</code>.</li> <li>Deduplicate via idempotency key + request body hash.</li> <li>Validate and normalize into canonical schema.</li> <li>Pre-screen entities with Compliance.</li> <li>Route via Directory &amp; Routing.</li> <li>Persist transfers and lifecycle state.</li> <li>Emit events: <code>transfers.initiated</code>, <code>transfers.submitted.&lt;rail&gt;</code> and consume <code>accepted/settled/returned/failed</code>.</li> </ul> <p>API contracts (summary)</p> Method Path Required Headers Success Notes POST /transfers Authorization, Idempotency-Key, X-Canonical-Version? 201 with resource or 200 on idempotent replay Request validated against canonical model GET /transfers/:id Authorization 200 Returns transfer details + timeline <p>Canonical Request (excerpt) <pre><code>{\n  \"tenantId\": \"tnt_123\",\n  \"intent\": \"PUSH\",\n  \"amount\": { \"value\": \"100.00\", \"currency\": \"USD\" },\n  \"payer\": { \"type\": \"WALLET\", \"id\": \"payer-abc\" },\n  \"payee\": { \"type\": \"WALLET\", \"id\": \"payee-xyz\" },\n  \"externalRef\": \"client-789\",\n  \"metadata\": { \"purpose\": \"invoice-42\" }\n}\n</code></pre></p>"},{"location":"10-components/canonical-transfer-service/#4-non-functional-requirements","title":"4. Non-Functional Requirements","text":"<p>Prod targets</p> Category Target Notes Performance Total p99 \u2264 2.5s; ingress\u2192screen (\u2264800ms), screen\u2192route (\u2264400ms), route\u2192submit (\u22641.5s) Timeouts enforced per integration Availability 99.95% monthly SLO; error budget 21.6m/mo Excludes third-party outages beyond retry budget Throughput Baseline 200 TPS; burst 1,000 TPS (5 min) HPA + queue smoothing Scalability Horizontal scale by stateless API; partition by tenantId/transferId Stickiness not required Security &amp; Privacy OAuth2 client-cred or HMAC per tenant; TLS 1.2+; PII encrypted at rest Logs redact PII Reliability Idempotency (24h TTL); transactional outbox with retries; DLQ Exactly-once publish semantics Compliance/Audit Immutable events; correlation IDs; retention \u2265 7 years (configurable) WORM storage optional <p>Pilot targets (20 merchants, 100 tx/merchant/day \u2248 2k/day)</p> Category Target Notes Performance p95 \u2264 2.5s at \u2264 10 TPS burst Serverless/Lambda timeouts sized accordingly Availability 99.9% monthly SLO Single-region acceptable for pilot Throughput \u2248 0.023 TPS avg (2k/day); bursts \u2264 10 TPS Sized for lunchtime peaks"},{"location":"10-components/canonical-transfer-service/#5-architecture-design","title":"5. Architecture &amp; Design","text":"<p>5.1 Container (C4 Level 2) <pre><code>graph TD\n  subgraph CTS\n    API[API Layer / Web]\n    CMD[Command Orchestrator]\n    NORM[Canonical Normalizer]\n    COMP[Compliance Adapter]\n    ROUTE[Routing Adapter]\n    SUB[Submission Publisher]\n    STATE[State Manager]\n    OUTBOX[Outbox Worker]\n    READ[Read Model / Projections]\n    DB[(OLTP DB)]\n  end\n\n  BUS[[Event Bus]]\n  OBS[[Metrics/Logs/Tracing]]\n  GW[Rail Gateways]\n  CMP[Compliance]\n  DIR[Directory &amp; Routing]\n\n  API --&gt; CMD\n  CMD --&gt; NORM\n  CMD --&gt; COMP\n  CMD --&gt; ROUTE\n  CMD --&gt; STATE\n  STATE --&gt; DB\n  SUB --&gt; OUTBOX\n  OUTBOX --&gt; BUS\n  BUS --&gt; STATE\n  API --&gt; READ\n  READ --&gt; DB\n\n  COMP --- CMP\n  ROUTE --- DIR\n  SUB --- GW\n\n  API -. telemetry .-&gt; OBS\n  OUTBOX -. telemetry .-&gt; OBS</code></pre></p> <p>Sync vs Async and Backpressure - Sync: API\u2192Compliance, API\u2192Directory, DB writes. - Async: Outbox\u2192Event Bus\u2192Gateways; inbound events\u2192STATE. - Backpressure: rate limiting at API, bounded outbox worker concurrency, consumer lag alerts.</p> <p>Amount precision and rounding - Store monetary values as <code>NUMERIC(20,8)</code>; define per-currency scale (e.g., USD scale=2). - Rounding mode: bankers rounding (round half to even) when converting to rail decimals. - Validate min/max per currency; reject out-of-range with 400.</p> <p>End-user considerations (double/triple entry) - Each merchant transfer often involves an end user (payer). Model end-user references (<code>endUserRef</code>) in the canonical payload where applicable. - For accounting that affects multiple ledgers (merchant wallet, end-user wallet, fees/taxes), ensure events carry sufficient references to support downstream double/triple-entry postings in the Ledger service. - CTS remains canon/orchestrator and does not compute postings, but must not drop identifiers necessary for downstream accounting integrity.</p> <p>5.2 Component (C4 Level 3) \u2014 Inside CTS <pre><code>graph TD\n  subgraph API Layer\n    R[Request Validation]\n    I[Idempotency Middleware]\n    Q[Rate Limiter]\n  end\n  subgraph Orchestration\n    SAGA[Command Orchestrator Saga]\n    MAP[Canonical Model Normalizer]\n  end\n  subgraph Integrations\n    CBA[Compliance Client CB/Retry]\n    DRC[Directory Client Cache]\n    PUB[Submission Publisher]\n  end\n  subgraph Persistence\n    SM[State Machine]\n    OB[Outbox Table]\n    RM[Read Projections]\n  end\n\n  Q --&gt; I --&gt; R --&gt; SAGA --&gt; MAP\n  SAGA --&gt; CBA\n  SAGA --&gt; DRC\n  SAGA --&gt; SM\n  SM --&gt; OB\n  PUB --&gt; OB\n  RM --&gt; SM\n</code></pre></p> <p>5.3 Sequence Diagrams</p> <p>Happy Path (USDC) \u2014 non-blocking settlement <pre><code>sequenceDiagram\n  autonumber\n  participant Client\n  participant API as CTS/API\n  participant Cmp as Compliance\n  participant Dir as Directory\n  participant DB as CTS/DB\n  participant OB as OutboxWorker\n  participant Bus as EventBus\n  participant GW as Gateway(USDC)\n\n  Client-&gt;&gt;API: POST /transfers {Idempotency-Key, Authorization}\n  API-&gt;&gt;API: validate + canonicalize (hash, X-Canonical-Version)\n  API-&gt;&gt;Cmp: screen(payer,payee) [timeout 800ms, 2x retry]\n  Cmp--&gt;&gt;API: allow\n  API-&gt;&gt;Dir: route(intent, payee) [timeout 400ms]\n  Dir--&gt;&gt;API: rail=usdc, endpoint\n  API-&gt;&gt;DB: begin tx\n  DB--&gt;&gt;API: insert transfer(state=SUBMITTED)\n  DB--&gt;&gt;API: insert outbox(event=submitted.usdc)\n  API--&gt;&gt;DB: commit\n  API--&gt;&gt;Client: 201 Location:/transfers/:id {transferId, state: SUBMITTED, requestId}\n  OB-&gt;&gt;Bus: publish events.transfers.submitted.usdc (exp backoff)\n  Bus--&gt;&gt;GW: deliver\n  GW--&gt;&gt;Bus: events.transfers.accepted\n  Bus--&gt;&gt;API: accepted \u2192 update state\n  GW--&gt;&gt;Bus: events.transfers.settled\n  Bus--&gt;&gt;API: settled \u2192 update projections\n</code></pre></p> <p>Duplicate Submission <pre><code>sequenceDiagram\n  participant Client\n  participant API as CTS/API\n  participant DB as CTS/DB\n  Client-&gt;&gt;API: POST /transfers {Idempotency-Key}\n  API-&gt;&gt;DB: lookup (tenantId, Idempotency-Key, bodyHash)\n  alt match\n    DB--&gt;&gt;API: existing transferId (same hash)\n    API--&gt;&gt;Client: 200 existing resource (etag/version)\n  else conflict\n    DB--&gt;&gt;API: key exists with different hash\n    API--&gt;&gt;Client: 409 IdempotencyConflict { priorTransferId, priorBodyHash }\n  end</code></pre></p> <p>Compliance Deny <pre><code>sequenceDiagram\n  participant Client\n  participant API as CTS/API\n  participant Cmp as Compliance\n  Client-&gt;&gt;API: POST /transfers\n  API-&gt;&gt;Cmp: screen\n  Cmp--&gt;&gt;API: deny(reasonCode)\n  API--&gt;&gt;Client: 422 EntityDenied {reasonCode, requestId}</code></pre></p> <p>Routing Unavailable <pre><code>sequenceDiagram\n  participant Client\n  participant API as CTS/API\n  participant Dir as Directory\n  Client-&gt;&gt;API: POST /transfers\n  API-&gt;&gt;Dir: route\n  note over API,Dir: timeout 400ms, no fallback\n  API--&gt;&gt;Client: 502 RoutingUnavailable {retryAfter: 5s}</code></pre></p> <p>Outbox Retry &amp; DLQ <pre><code>sequenceDiagram\n  participant OB as OutboxWorker\n  participant Bus as EventBus\n  OB-&gt;&gt;Bus: publish\n  alt failure\n    OB-&gt;&gt;OB: attempts++ backoff(1s\u21925s\u219230s\u21922m\u219210m\u21921h)\n  else success\n    OB-&gt;&gt;OB: mark SENT\n  end\n  note over OB: DLQ after N=10 attempts (poison)</code></pre></p> <p>5.4 State Machine <pre><code>stateDiagram-v2\n  [*] --&gt; INITIATED\n  INITIATED --&gt; SUBMITTED: route ok + persisted\n  SUBMITTED --&gt; ACCEPTED: events.transfers.accepted\n  ACCEPTED --&gt; SETTLED: events.transfers.settled\n  ACCEPTED --&gt; RETURNED: events.transfers.returned\n  SUBMITTED --&gt; FAILED: submission failed (non-retryable)\n  INITIATED --&gt; FAILED: validation/compliance deny\n  SETTLED --&gt; [*]\n  RETURNED --&gt; [*]\n  FAILED --&gt; [*]</code></pre></p> <p>5.5 Data Flow <pre><code>flowchart LR\n  Ingress[HTTP Ingress] --&gt; Validate[Validate/Normalize]\n  Validate --&gt; Persist[Persist Write Model]\n  Persist --&gt; Outbox[Write Outbox]\n  Outbox --&gt; Bus[Event Bus]\n  Bus --&gt; Proj[Read Model Projections]\n  Proj --&gt; API[GET /transfers/:id]</code></pre></p> <p>5.6 Deployment View <pre><code>graph TD\n  subgraph k8s-cluster\n    apiPod[cts-api Deployment]\n    obPod[cts-outbox Worker]\n    sidecar[otel sidecar]\n  end\n  hpa[HPA policy: target 70% CPU/qps]\n  db[(Primary/Replica OLTP DB)]\n  topics[[Kafka Topics: events.transfers - 12 partitions]]\n  secrets[[Secrets Manager]]\n  envoy[[Envoy/Ingress]]\n\n  envoy --&gt; apiPod\n  apiPod --&gt; db\n  obPod --&gt; db\n  apiPod --&gt; topics\n  obPod --&gt; topics\n  apiPod --&gt; sidecar\n  obPod --&gt; sidecar\n  apiPod --&gt; secrets\n  obPod --&gt; secrets\n  hpa -.-&gt; apiPod\n  hpa -.-&gt; obPod\n</code></pre></p> <p>5.7 Key Design Topics (ADR-style)</p> Topic Decision Alternatives Rationale Consequences Idempotency <code>Idempotency-Key</code> + SHA256(normalized body) unique per tenant; TTL 24h Key-only; body-only; longer TTL Prevents divergent bodies on same key; caps storage Store hash; shard hot tenants Outbox Pattern Same-DB transactional outbox; ordered per <code>transferId</code>; backoff 1s\u21925s\u219230s\u21922m\u219210m\u21921h; DLQ at 10 Separate queue; exactly-once Kafka Simpler atomicity; avoids dual-write Worker lag can grow \u2192 monitor/autoscale Routing Cache TTL 5m; negative cache 30s; deterministic rules; quirks in gateways Longer TTL Balanced freshness vs cost Possible staleness \u2192 admin bust Multitenancy Row-level scope by <code>tenantId</code>; per-tenant quotas; per-tenant secrets DB schemas per tenant Simpler ops; shared pool Strong tenancy guard required Schema Evolution Canonical SemVer; <code>X-Canonical-Version</code>; events <code>envelope.v</code> (BACKWARD) Ad-hoc Predictable upgrades Maintain registry and migrations Consistency Non-blocking settlement; POST 201/200 with <code>state=SUBMITTED</code> + Location Synchronous settlement Lower latency; simpler SLAs Clients must poll/subscribe Concurrency (OCC) <code>transfers.version</code> BIGINT; <code>WHERE transferId AND version</code>; bump version Pessimistic locks Avoids locks; suits serverless 409s/retries on conflicts Observability W3C traceparent; metrics by <code>tenantId</code>,<code>rail</code>,<code>state</code>; PII-safe logs None Traceability and SLOs Watch label cardinality Backpressure Token-bucket per tenant; bounded workers; circuit breakers Unlimited Protects core systems Graceful shedding under load Error Taxonomy 4xx (validation/deny), 409 (idempotency/OCC), 429 (rate limits), 5xx (internal/502 routing) Loose mapping Clear client behavior Easier debugging and SLAs"},{"location":"10-components/canonical-transfer-service/#6-data-model","title":"6. Data Model","text":"<p>Tables</p>"},{"location":"10-components/canonical-transfer-service/#transfers","title":"Transfers","text":"Column Type Nullable Notes transferId UUID no PK tenantId TEXT no partition key payer JSONB no PII encrypted-at-rest payee JSONB no PII encrypted-at-rest amount_value NUMERIC(20,8) no amount_currency CHAR(3) no ISO-4217 or pseudo rail TEXT no e.g., usdc, zimswitch intent TEXT no AUTH externalRef TEXT yes client reference state TEXT no INITIATED createdAt TIMESTAMP WITH TZ no updatedAt TIMESTAMP WITH TZ no version BIGINT no optimistic locking counter (default 0) <p>Indexes/Constraints - PK: <code>(transferId)</code> - IDX: <code>(tenantId, createdAt)</code> - Unique: <code>(tenantId, externalRef)</code> nullable unique</p>"},{"location":"10-components/canonical-transfer-service/#transfer-events","title":"Transfer Events","text":"Column Type Nullable Notes eventId UUID no PK transferId UUID no FK \u2192 transfers type TEXT no initiated/submitted/accepted/... payload JSONB no envelope v=1 occurredAt TIMESTAMP WITH TZ no event time <p>Indexes - PK: <code>(eventId)</code> - IDX: <code>(transferId, occurredAt)</code> - Unique: <code>(transferId, type)</code> for lifecycle uniqueness</p>"},{"location":"10-components/canonical-transfer-service/#outbox-transfers","title":"Outbox Transfers","text":"Column Type Nullable Notes id UUID no PK eventType TEXT no e.g., transfers.submitted.usdc payload JSONB no event data state TEXT no PENDING attempts INT no default 0 lastError TEXT yes latest error createdAt TIMESTAMP WITH TZ no updatedAt TIMESTAMP WITH TZ no <p>Indexes - IDX: <code>(state, createdAt)</code> - IDX: <code>(eventType)</code></p>"},{"location":"10-components/canonical-transfer-service/#idempotency","title":"Idempotency","text":"Column Type Nullable Notes tenantId TEXT no idempotencyKey TEXT no bodyHash CHAR(64) no sha256 transferId UUID no createdAt TIMESTAMP WITH TZ no TTL policy \u2265 24h <p>Indexes - Unique: <code>(tenantId, idempotencyKey, bodyHash)</code></p>"},{"location":"10-components/canonical-transfer-service/#routing-cache-optional","title":"Routing Cache (optional)","text":"Column Type Nullable Notes key TEXT no hashed routing tuple value JSONB no route details expiresAt TIMESTAMP WITH TZ no ttl <p>Sample Rows (illustrative) <pre><code>{\n  \"transfers\": [\n    {\"transferId\":\"a1b2\",\"tenantId\":\"t1\",\"amount_value\":\"100.00\",\"amount_currency\":\"USD\",\"rail\":\"usdc\",\"intent\":\"PUSH\",\"state\":\"SUBMITTED\"}\n  ],\n  \"outbox_transfers\": [\n    {\"id\":\"o1\",\"eventType\":\"transfers.submitted.usdc\",\"state\":\"PENDING\",\"attempts\":0}\n  ]\n}\n</code></pre></p> <p>Retention - <code>idempotency</code>: TTL 36h (GC job) - <code>transfer_events</code>: hot in OLTP 90 days; archive to object store thereafter - <code>outbox_transfers</code>: keep SENT 7 days; FAILED until resolved</p> <p>Indexes and constraints (additions)</p> <ul> <li> <p>Idempotency <pre><code>CREATE UNIQUE INDEX ux_idempotency\n  ON idempotency(tenantId, idempotencyKey, bodyHash);\n-- Optional partial unique within 36h window\nCREATE UNIQUE INDEX ux_idempotency_window\n  ON idempotency(tenantId, idempotencyKey, bodyHash)\n  WHERE createdAt &gt; now() - interval '36 hours';\n</code></pre></p> </li> <li> <p>ExternalRef <pre><code>CREATE UNIQUE INDEX ux_transfers_externalref\n  ON transfers(tenantId, externalRef)\n  WHERE externalRef IS NOT NULL;\n\n-- Optionally include intent to reduce collisions\nCREATE UNIQUE INDEX ux_transfers_externalref_intent\n  ON transfers(tenantId, intent, externalRef)\n  WHERE externalRef IS NOT NULL;\n</code></pre></p> </li> <li> <p>Events uniqueness <pre><code>CREATE UNIQUE INDEX ux_events_lifecycle\n  ON transfer_events(transferId, type);\n-- If a rail can emit multiple of the same type\nCREATE UNIQUE INDEX ux_events_seq\n  ON transfer_events(transferId, type, seq);\n</code></pre></p> </li> <li> <p>Optimistic locking <pre><code>-- Column already defined: version BIGINT NOT NULL DEFAULT 0\n-- Guarded update example\nUPDATE transfers\nSET state = $1, version = version + 1, updatedAt = now()\nWHERE transferId = $2 AND version = $3;\n</code></pre> Behavior: return 409/Retry on no-row-updated for external callers; internal workers retry with jitter/backoff.</p> </li> </ul>"},{"location":"10-components/canonical-transfer-service/#7-interfaces-contracts","title":"7. Interfaces &amp; Contracts","text":"<p>HTTP APIs</p> <p>POST /transfers <pre><code>POST /transfers HTTP/1.1\nAuthorization: Bearer &lt;token&gt;\nIdempotency-Key: 6f1e2...\nX-Canonical-Version: 1\nContent-Type: application/json\n</code></pre> Request <pre><code>{\n  \"tenantId\":\"t1\",\n  \"intent\":\"PUSH\",\n  \"amount\":{\"value\":\"100.00\",\"currency\":\"USD\"},\n  \"payer\":{\"type\":\"WALLET\",\"id\":\"payer-1\"},\n  \"payee\":{\"type\":\"WALLET\",\"id\":\"payee-9\"},\n  \"externalRef\":\"inv-42\"\n}\n</code></pre> Responses <pre><code>// 201 Created (first time)\n{\"transferId\":\"a1b2\",\"state\":\"SUBMITTED\",\"rail\":\"usdc\"}\n</code></pre> <pre><code>// 200 OK (duplicate)\n{\"transferId\":\"a1b2\",\"state\":\"SUBMITTED\",\"rail\":\"usdc\"}\n</code></pre> <pre><code>// 409 IdempotencyConflict (same key, different body)\n{\"code\":\"IdempotencyConflict\",\"priorTransferId\":\"a1b2\",\"priorBodyHash\":\"sha256:...\"}\n</code></pre> Errors <pre><code>// 422 EntityDenied\n{\"code\":\"EntityDenied\",\"reason\":\"watchlist_hit\",\"requestId\":\"r-123\"}\n</code></pre> <pre><code>// 502 RoutingUnavailable\n{\"code\":\"RoutingUnavailable\",\"retryAfter\":\"5s\"}\n</code></pre></p> <p>Decision tree (POST /transfers)</p> <ol> <li>Validate request (schema, authZ)</li> <li>On failure: 400/401/403</li> <li>Idempotency lookup</li> <li>Key+hash match: 200 (return existing resource)</li> <li>Key exists, hash differs: 409 IdempotencyConflict</li> <li>Compliance screening</li> <li>Deny: 422 EntityDenied</li> <li>Routing</li> <li>Timeout/5xx: 502 RoutingUnavailable</li> <li>Persist write model + outbox (single DB tx)</li> <li>Success: 201 Created with <code>Location: /transfers/:id</code> and <code>state=SUBMITTED</code></li> <li>Concurrency (optimistic lock)</li> <li>External mutating APIs: 409 Conflict</li> <li>Internal workers: retry with jitter/backoff</li> </ol> <p>GET /transfers/:id <pre><code>GET /transfers/a1b2 HTTP/1.1\nAuthorization: Bearer &lt;token&gt;\n</code></pre> Response <pre><code>{\n  \"transferId\":\"a1b2\",\n  \"state\":\"SETTLED\",\n  \"timeline\":[\n    {\"type\":\"initiated\",\"at\":\"2025-01-01T10:00:00Z\"},\n    {\"type\":\"submitted.usdc\",\"at\":\"2025-01-01T10:00:01Z\"},\n    {\"type\":\"accepted\",\"at\":\"2025-01-01T10:00:02Z\"},\n    {\"type\":\"settled\",\"at\":\"2025-01-01T10:03:00Z\"}\n  ]\n}\n</code></pre></p> <p>Event Contracts <pre><code>{\n  \"envelope\": {\n    \"v\": 1,\n    \"eventId\": \"uuid\",\n    \"occurredAt\": \"ts\",\n    \"tenantId\": \"t1\",\n    \"transferId\": \"a1b2\",\n    \"type\": \"transfers.submitted.usdc\",\n    \"traceparent\": \"00-...\"\n  },\n  \"payload\": { \"amount\": {\"value\":\"100.00\",\"currency\":\"USD\"}, \"payer\": {\"id\":\"...\"}, \"payee\": {\"id\":\"...\"} }\n}\n</code></pre> Canonicalization and body hash</p> <p>Algorithm (v1): - Normalize JSON per canonical schema version. - Trim strings; lowercase ISO currency codes; normalize country/phone formats. - Sort object keys lexicographically; arrays kept in submitted order unless schema defines ordering. - Amounts: parse to decimal, scale to currency decimals (see Amount precision), serialize as string. - Serialize with no insignificant whitespace. - Compute <code>bodyHash = sha256(serialized)</code> and store with idempotency record.</p> <p>Sample vector: <pre><code>// input\n{\"amount\":{\"value\":\"100.0\",\"currency\":\"usd\"},\"payer\":{\"id\":\" A \"}}\n// normalized\n{\"amount\":{\"value\":\"100.00\",\"currency\":\"USD\"},\"payer\":{\"id\":\"A\"}}\n// sha256\n\"b0b6...\"\n</code></pre> Topics - <code>events.transfers.initiated</code> - <code>events.transfers.submitted.&lt;rail&gt;</code> (e.g., <code>events.transfers.submitted.usdc</code>) - Inbound: <code>events.transfers.accepted|settled|returned|failed</code></p> <p>Ordering and dedupe - For SNS/SQS FIFO: <code>MessageGroupId = transferId</code> to guarantee per-transfer ordering; <code>MessageDeduplicationId = eventId</code>. - Consumers must dedupe by <code>eventId</code> and <code>(transferId,type)</code> to handle retries/replays.</p> <p>Timeouts/SLAs | Integration | Timeout | Retry | SLA | |---|---|---|---| | Compliance | 800ms | 2 with jitter | 99.9% | | Directory | 400ms | 1 with jitter | 99.9% | | Gateway Publish | async | backoff 1s..1h | N/A |</p> <p>Tenant isolation &amp; quotas - Per-tenant token-bucket rate limits (defaults: 50 rps burst, 5 rps sustained for pilot). - Authorization scopes restrict access to <code>tenantId</code>; all queries filter by <code>tenantId</code>. - Quota override process via config store with change audit.</p> <p>Threat model (mini) - IDOR on GET <code>/transfers/:id</code> \u2192 enforce tenant scope; verify <code>tenantId</code> ownership per row. - Replay with stolen <code>Idempotency-Key</code> \u2192 pair key with bodyHash and TTL; require Authorization; optionally sign requests (HMAC). - Message tampering on bus \u2192 server-side signing/envelope checksum; least-privilege topics; DLQ visibility restricted.</p> <p>PII strategy - Events carry <code>payer_ref</code>/<code>payee_ref</code> only; PII stored in encrypted columns/tables (KMS key rotation annually). - POPIA/GDPR: support erasure by tombstoning PII fields while preserving event integrity (refs remain).</p> <p>Schema registry &amp; compatibility - Event envelope and payloads registered in Schema Registry; policy BACKWARD for events. - Breaking-change process: bump <code>envelope.v</code>, dual-publish during migration window, communicate to consumers.</p> <p>Replay &amp; re-drive - Controlled replay from outbox or archived events; idempotent updates ensured by <code>(transferId,type)</code> uniqueness. - Time-boxed replays with audit log entries for who/when/why.</p>"},{"location":"10-components/canonical-transfer-service/#8-operational-considerations","title":"8. Operational Considerations","text":"<ul> <li>Deployment: Blue/Green or Canary via ingress weights; feature flags for risky paths.</li> <li>Config: Environment + central config store; secret rotation via Secrets Manager.</li> <li>Runbooks (expanded)</li> <li>High Latency: check <code>compliance_client_latency_p95</code>, <code>directory_client_latency_p95</code>, DB CPU/IO, thread pools.</li> <li>Stuck SUBMITTED: inspect outbox lag, worker health, DLQ; reprocess by id.</li> <li>Idempotency Collisions: audit client keys, compare bodyHash mismatches.</li> <li>Alerts</li> <li><code>rate(cts_outbox_failures_total[5m]) / rate(cts_outbox_attempts_total[5m]) &gt; 0.001 for 5m</code></li> <li><code>histogram_quantile(0.95, sum(rate(http_server_duration_seconds_bucket{route=\"/transfers\"}[5m])) by (le)) &gt; 1.5</code></li> <li><code>cts_consumer_lag{topic=\"events.transfers.*\"} &gt; 5000 for 10m</code></li> <li><code>rate(http_5xx_total[5m]) &gt; 0.01</code></li> <li>SLO burn alerts: 2% budget burn over 1h, 5% over 6h for availability/latency SLOs</li> <li>Capacity</li> <li>Scale API by QPS and p95 latency; scale workers by outbox depth and publish rate; 1 partition per expected 50 TPS.</li> </ul> <p>Migrations - Tooling: Flyway or Liquibase. - Zero-downtime: expand (add nullable columns/indexes) \u2192 dual-write if needed \u2192 backfill \u2192 contract. - Rollback: feature-flag writes; maintain backward compatible reads; revert via migrations down.</p> <p>Runbooks (deepening) - Poison message: locate <code>eventId</code>, inspect <code>lastError</code>, retry N with backoff, if still failing park to DLQ and open ticket; optional manual mark-SENT with signed approval. - Hot tenant: reduce tenant-specific rate limit, shard outbox processing by <code>tenantId</code>, notify tenant of temporary caps.</p>"},{"location":"10-components/canonical-transfer-service/#9-testing-strategy","title":"9. Testing Strategy","text":"<ul> <li>Unit: validators, normalizer, idempotency calculator.</li> <li>Contract: Pact for HTTP (Compliance/Directory) and events (submitted, accepted, settled).</li> <li>Integration: testcontainers for DB + fake services; deterministic retries.</li> <li>E2E: happy path, duplicates, deny, routing fail, outbox DLQ.</li> <li>Chaos: inject timeouts/circuit-open; DB failover drills.</li> <li>Load: realistic mix (90% POST, 10% GET); 1% duplicates.</li> </ul>"},{"location":"10-components/canonical-transfer-service/#10-risks-trade-offs-and-open-questions","title":"10. Risks, Trade-offs, and Open Questions","text":"<ul> <li>Outbox saturation \u2192 publish lag; mitigate via autoscale and partitioning.</li> <li>Routing flaps \u2192 increased 5xx; mitigate with negative caching and backoff.</li> <li>Tenant spikes \u2192 noisy neighbor; enforce per-tenant rate limits.</li> <li>Schema drift \u2192 consumer breakage; enforce versioning and schema registry.</li> </ul> <p>Open questions and decisions are summarized at the end.</p>"},{"location":"10-components/canonical-transfer-service/#11-appendix","title":"11. Appendix","text":"<ul> <li>Glossary: CTS (Canonical Transfer Service), OLTP, DLQ, SAGA, RPO/RTO.</li> <li>References: <code>docs/00-overview/architecture-decisions/ADR-0001-events-outbox.md</code>, <code>docs/20-specs/api-canonical-transfer.md</code>, <code>docs/30-diagrams/lifecycle-state.md</code>.</li> </ul>"},{"location":"10-components/canonical-transfer-service/#12-pilot-requirements-aws-serverless-option","title":"12. Pilot Requirements &amp; AWS Serverless Option","text":"<p>Pilot scope and sizing (20 merchants) - Volume: 100 transfers/merchant/day \u2192 ~2,000 transfers/day (avg ~0.023 TPS), anticipate bursts during business hours (assume 5\u201310 TPS peaks for 10\u201330 minutes). - Reliability: \u2265 99% transfers reach terminal state with complete event trail. - Latency: p95 \u2264 2.5s end-to-end for submit; p99 \u2264 4s under burst. - Cost: minimize infra cost; prefer pay-per-use; keep auditability and outbox guarantees.</p> <p>Derived sizing (pilot) - Outbound events/transfer: ~3\u20134 typical \u2192 \u2264 8,000 events/day. - Storage growth (pilot): Transfers \u2264 2k rows/day, Events \u2264 8k rows/day; negligible for 90-day hot retention. - Network: &lt;&lt; 1 Mbps steady; minimal.</p> <p>Serverless deployment (AWS) \u2014 Pilot option <pre><code>graph TD\n  Client[Clients/POS] --&gt; APIGW[API Gateway]\n  APIGW --&gt; LAPI[Lambda: CTS API]\n\n  subgraph \"Data Store (choose one)\"\n    RDS[\"RDS Proxy \u2192 Aurora Serverless v2 (PostgreSQL)\"]\n    DDB[\"DynamoDB Tables\"]\n  end\n\n  LAPI --&gt;|Option A| RDS\n  LAPI --&gt;|Option B| DDB\n\n  subgraph \"Outbox + Events\"\n    SQS[\"SQS Outbox Queue\"]\n    DDBS[\"DynamoDB Streams\"]\n    LPUB[\"Lambda: Outbox Publisher\"]\n    EBus[\"SNS FIFO Topic events.transfers\"]\n    SQSC1[\"SQS FIFO Consumer (Gateway)\"]\n    SQSC2[\"SQS FIFO Consumer (Ledger)\"]\n  end\n\n  RDS --&gt; SQS\n  DDB --&gt; DDBS\n  DDBS --&gt; LPUB\n  LPUB --&gt; EBus\n  EBus --&gt; SQSC1\n  EBus --&gt; SQSC2\n  SQSC1 --&gt; RDS\n  SQSC2 --&gt; DDB\n\n  subgraph \"Ops\"\n    SM[\"Secrets Manager\"]\n    CW[\"CloudWatch Logs/Metrics/Alarms\"]\n    XR[\"X-Ray Tracing\"]\n  end\n\n  LAPI -.-&gt; SM\n  LAPI -.-&gt; CW\n  LAPI -.-&gt; XR\n  LPUB -.-&gt; CW\n  LCONS -.-&gt; CW\n</code></pre></p> <p>Data store options and recommendation</p> Option Infra How it maps to SDD Pros Cons Pilot recommendation A. Aurora Serverless v2 + RDS Proxy API Gateway + Lambda + RDS Proxy + Aurora Pg Keeps OLTP DB and transactional outbox exactly as designed (same-DB tx). Minimal code changes; strong ACID; SQL familiarity; easy path to prod scale. Aurora min ACU cost even when idle; Lambda needs RDS Proxy to avoid connection storms. Selected for pilot. B. DynamoDB + Streams + EventBridge API Gateway + Lambda + DynamoDB Use conditional writes for idempotency; store transfer and event items; publish via Streams\u2192Lambda; dedupe at consumers. Pay-per-use; very low cost at 1k tx/day; scales automatically; no connections. Outbox shifts to at-least-once via Streams; must implement idempotent publisher and consumer dedupe; relational queries harder. Viable low-cost alternative if we accept at-least-once with dedupe and keep schema simple. C. EC2 or Lightsail + Postgres Nginx + app on EC2/Lightsail + Postgres Traditional deployment; identical semantics to SDD. Simple mental model; predictable performance; cheapest if always-on and tiny. Ops overhead (patching, scaling); less elastic; need HA for SLOs. Acceptable for a throwaway pilot; less aligned with serverless strategy. <p>Notes on Option B (DynamoDB) - Idempotency: <code>PutItem</code> with <code>ConditionExpression attribute_not_exists(pk)</code> using <code>(tenantId, idempotencyKey, bodyHash)</code> item; TTL attribute for GC. - Transfers/events: single-table design with <code>PK=TRANSFER#&lt;transferId&gt;</code>, <code>SK=STATE#...</code> and <code>SK=EVENT#...</code>; <code>transfer_events</code> uniqueness via <code>ConditionExpression</code> on <code>(transferId,type)</code>. - Outbox: write event items; use DynamoDB Streams to trigger publisher Lambda; publisher writes to EventBridge; consumers dedupe by <code>eventId</code> and <code>(transferId,type)</code>. - Read model: <code>GET /transfers/:id</code> via <code>Query PK=TRANSFER#...</code> ordered by <code>SK</code>.</p> <p>Cost posture (directional, not a quote) - Requests/day ~2k \u2192 API Gateway/Lambda costs are negligible; DynamoDB RU/WU minimal at pilot scale; Aurora Serverless has a small baseline cost due to min ACUs; EC2/Lightsail cheapest if always-on but adds ops overhead.</p> <p>Recommendation for pilot - Selected: Option A (Aurora Serverless v2 + RDS Proxy). Keep the SDD\u2019s OLTP schema and transactional outbox as-is. - Option B remains a fallback if costs require further reduction; keep abstraction boundaries to allow future swap.</p> <p>Pilot deployment (selected Option A) <pre><code>flowchart LR\n  Client --&gt; APIGW[API Gateway]\n  APIGW --&gt; LAPI[Lambda CTS API]\n  LAPI --&gt; RDS[(Aurora Serverless v2 via RDS Proxy)]\n  LAPI --&gt; CW[CloudWatch/X-Ray]\n  subgraph Outbox\n    LWORK[Lambda Outbox Worker]\n    EBus[EventBridge events.transfers.*]\n  end\n  RDS &lt;-- poll PENDING --&gt; LWORK\n  LWORK --&gt; EBus</code></pre></p> <p>Pilot configuration (Option A) - Aurora Serverless v2 PostgreSQL 15; min ACU 0.5\u20131, max ACU 4; Multi-AZ on. - RDS Proxy for Lambda connections; IAM auth or Secrets Manager rotation (90 days). - Outbox Worker Lambda: runs on a 15\u201330s schedule; batch size 500; exponential backoff; idempotent publish to EventBridge (partition key <code>transferId</code>). - VPC: Lambdas in private subnets with NAT; security groups restrict DB access. - Observability: CloudWatch metrics/logs, X-Ray traces; alarms per SLOs. - Migrations: Flyway/Liquibase executed via CI job before deploy.</p>"},{"location":"10-components/canonical-transfer-service/#authoritative-input-spec","title":"Authoritative Input Spec","text":"<p>As provided. Preserved verbatim for traceability.</p> <pre><code>[BEGIN INPUT SPEC]\n# Canonical Transfer Service (CTS)\n\nThe **Canonical Transfer Service (CTS)** is the **front door and conductor** of Storo.  \nIt provides a single API for creating and managing transfers, normalizes requests into a canonical format, enforces idempotency, screens entities, routes transfers, and emits domain events.\n\n---\n\n## \ud83c\udfaf Purpose\n\n- Provide a **unified API** for all transfers (payments, payouts, pushes, pulls).  \n- Normalize requests into a **canonical model** independent of rail quirks.  \n- Act as the **orchestrator** for transfer lifecycle events.  \n- Enforce **idempotency** across client submissions.  \n- Ensure **compliance screening** before any transfer reaches a rail.  \n- Emit **domain events** (`transfers.*`) so all state changes are visible and auditable.  \n\n---\n\n## \ud83d\udee0 Responsibilities\n\n- **Accept API requests** (`POST /transfers`, `GET /transfers/:id`).  \n- **Deduplicate** requests using idempotency keys and hashes.  \n- **Validate and normalize** inputs into the canonical transfer schema.  \n- **Pre-screen** payer and payee using the Compliance service.  \n- **Route** transfers through the Directory &amp; Routing service.  \n- **Emit events** (`initiated`, `submitted.&lt;rail&gt;`) via the outbox.  \n- **Track lifecycle state** for each transfer.  \n\n---\n\n## \ud83d\udd0c Interfaces\n\n### API Endpoints\n- `POST /transfers`  \n  - Create a new transfer.  \n  - Requires `Idempotency-Key` header.  \n  - Body: canonical transfer schema.  \n\n- `GET /transfers/:id`  \n  - Fetch transfer details including timeline of events.  \n\n&gt; See Specs: [../20-specs/api-canonical-transfer.md](../20-specs/api-canonical-transfer.md)\n\n### Event Topics\n- Emits (envelope `v=1`):\n  - `transfers.initiated`\n  - `transfers.submitted.&lt;rail&gt;`\n- Consumes:\n  - `transfers.accepted`\n  - `transfers.settled`\n  - `transfers.returned`\n  - `transfers.failed`\n\n---\n\n### Admin Endpoints (via Platform/Base)\n- `GET /live`, `GET /ready`, `GET /metrics`, `GET /version` provided by Platform/Base and adopted by CTS.\n\n\n## \ud83d\uddc4 Data Model\n\n**Table: `transfers`**  \n- `transferId` (PK)  \n- `tenantId`  \n- `payer`, `payee` (JSON)  \n- `amount { value, currency }`  \n- `rail`  \n- `intent` (AUTH | CAPTURE | PUSH | PULL)  \n- `externalRef`  \n- `state` (INITIATED, SUBMITTED, \u2026)  \n- `createdAt`, `updatedAt`  \n\n**Table: `transfer_events`**  \n- `eventId`  \n- `transferId` (FK)  \n- `type`  \n- `payload` (JSON)  \n- `occurredAt`  \n\n**Table: `outbox_transfers`**  \n- Standard outbox pattern for exactly-once event publishing.  \n  - Columns: `id`, `eventType`, `payload`, `state` (PENDING|SENT|FAILED), `createdAt`, `attempts`, `lastError?`\n\n---\n\n## \ud83d\udcd0 Diagram\n\n### Sequence: Happy Path (USDC transfer)\n\n```mermaid\nsequenceDiagram\n  participant Client\n  participant CTS as Canonical Transfer Service\n  participant CS as Compliance\n  participant DR as Directory\n  participant GW as Rail Gateway (USDC)\n\n  Client-&gt;&gt;CTS: POST /transfers (idempotency-key)\n  CTS-&gt;&gt;CTS: Deduplicate &amp; normalize\n  CTS-&gt;&gt;CS: Pre-screen payer/payee\n  CS--&gt;&gt;CTS: Allow\n  CTS-&gt;&gt;DR: Lookup route\n  DR--&gt;&gt;CTS: Rail endpoint\n  CTS-&gt;&gt;CTS: Persist transfer, state=SUBMITTED\n  CTS-&gt;&gt;GW: Event transfers.submitted.usdc\n  GW--&gt;&gt;CTS: Event transfers.accepted\n  GW--&gt;&gt;CTS: Event transfers.settled\n  CTS-&gt;&gt;Client: 200 OK { state: SETTLED }\n</code></pre>"},{"location":"10-components/canonical-transfer-service/#state-machine","title":"\ud83d\udd04 State Machine","text":"<p>See transfer lifecycle diagram: ../30-diagrams/lifecycle-state.md</p>"},{"location":"10-components/canonical-transfer-service/#failure-modes-retries","title":"\ud83d\udea8 Failure Modes &amp; Retries","text":"<ul> <li>Duplicate submission \u2192 return existing transfer (idempotent).  </li> <li>Compliance = deny \u2192 return 422 EntityDenied.  </li> <li>Directory lookup fails \u2192 return 502 RoutingUnavailable.  </li> <li>Rail submission fails \u2192 state = FAILED, event emitted.  </li> <li>Outbox publish failure \u2192 retry with exponential backoff.  </li> <li>Consumers must dedupe by <code>eventId</code> (and <code>(transferId,type)</code> uniqueness for lifecycle).  </li> </ul>"},{"location":"10-components/canonical-transfer-service/#observability","title":"\ud83d\udcca Observability","text":"<p>Metrics - API latency (p95, p99). - Idempotency collision rate. - Compliance check latency. - Transfers by state (submitted, settled, returned).  </p> <p>Logs - Structured JSON with transferId, tenantId, eventId.  </p> <p>Tracing - Propagate request IDs through to gateways and ledger.  </p>"},{"location":"10-components/canonical-transfer-service/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>API authentication with tenant-level keys/tokens.  </li> <li>All PII (payer/payee) encrypted at rest.  </li> <li>Access to transfer data restricted by tenant scope.  </li> <li>Logs redact sensitive fields (names, IDs, PANs).  </li> </ul>"},{"location":"10-components/canonical-transfer-service/#runbooks","title":"\ud83d\udcd8 Runbooks","text":"<ul> <li>If API latency spikes \u2192 check compliance and directory service dependencies.  </li> <li>If transfers stuck in SUBMITTED \u2192 inspect gateway outbox and retry queue.  </li> <li>If idempotency collisions increase \u2192 confirm client integration is using stable Idempotency-Key.  </li> <li>If compliance service is unreachable \u2192 all submissions should fail-safe (no unscreened transfers). [END INPUT SPEC] ```</li> </ul>"},{"location":"10-components/canonical-transfer-service/#open-questions-next-decisions","title":"Open Questions &amp; Next Decisions","text":"<ul> <li>[ ] Finalize SNS/SQS FIFO IaC and naming conventions for pilot.</li> <li>[ ] Confirm Compliance sign-off on retention durations (events/logs).</li> <li>[ ] Define per-currency min/max and fee fields for all pilot currencies.</li> <li>[ ] Approve tenant default quotas and the override approval process.</li> <li>[ ] Validate canonicalization test vectors with integrators.</li> <li>[ ] Decide archive format and encryption for long-term event storage.</li> <li>[ ] Confirm Directory <code>route.updated</code> event shape and cache key.</li> <li>[ ] Choose replay authorization workflow and audit approvals.</li> <li>[ ] Set trace sampling defaults per environment (dev/stage/prod).</li> </ul>"},{"location":"10-components/canonical-transfer-service/#next-iteration-plan-2-weeks","title":"Next Iteration Plan (2 weeks)","text":"<ul> <li>Week 1</li> <li>Engineers: A (API/Idempotency), B (Outbox/Worker), C (Integrations)</li> <li>Tasks: Scaffold service; implement POST/GET; idempotency table; outbox write; basic publish; compliance+directory clients with timeouts; metrics+tracing.</li> <li>Exit criteria: POST happy path to mock services; events visible on test topic; p95 &lt; 500ms without external calls.</li> <li>Week 2</li> <li>Engineers: A (State/Projections), B (DLQ/Backoff), C (Load/Chaos)</li> <li>Tasks: State updates from inbound events; projections for GET; backoff+DLQ; rate limiting; alert rules; load tests at 200 TPS; chaos tests.</li> <li>Exit criteria: All sequences pass in CI; alerts in place; docs updated; demo end-to-end flow.</li> </ul>"},{"location":"10-components/canonical-transfer-service/#decisions-ready-to-adopt","title":"Decisions (ready to adopt)","text":"<p>1) Canonical schema ownership &amp; versioning cadence - Decision: Platform/Architecture owns the canonical schema; changes via Schema Working Group. - Versioning: SemVer on canonical model; header <code>X-Canonical-Version</code> and <code>envelope.v</code>. - Cadence: Minor every 2 weeks as needed; Major with quarterly planning. - Mechanics: JSON Schema in <code>schemas/canonical-transfer/v{n}</code>; RFC + contract tests.</p> <p>2) Per-tenant quotas &amp; default limits - Decision: Token-bucket per tenant at API gateway + app layer. - Defaults: Write 2 TPS sustained (burst 20 for 60s); Read 10 TPS sustained (burst 50 for 60s); Daily cap 10k transfers/tenant. - Behavior: 429 with Retry-After when exhausted; emit <code>quota.exceeded</code>.</p> <p>3) DB technology &amp; JSONB usage - Decision: Aurora PostgreSQL v2 with JSONB for payer/payee and envelopes; relational columns for hot filters. - Indexes: <code>(tenantId, createdAt)</code>, PK <code>(transferId)</code>, partial unique <code>(tenantId, idempotencyKey, bodyHash)</code> for 36h window; GIN only when needed.</p> <p>4) Event bus &amp; partition strategy - Decision: SNS FIFO with SQS FIFO subscribers; <code>MessageGroupId=transferId</code>, <code>MessageDeduplicationId=eventId</code>.</p> <p>5) Envelope schema registry &amp; tooling - Decision: Git-based JSON Schema registry under <code>schemas/</code> with CI validation.</p> <p>6) Settlement sync response policy - Decision: Never return SETTLED synchronously; first response 201/200 with <code>state=SUBMITTED</code>.</p> <p>7) DLQ storage &amp; triage workflow - Decision: Outbox publisher DLQ \u2192 SQS standard (14 days); consumer DLQs per SQS FIFO; re-drive Lambda with idempotency.</p> <p>8) Retention durations (pending Compliance) - Defaults: Events 7y (WORM after 90d), Transfers 2y hot then Glacier Deep Archive, Idempotency 36h, Logs 30d, Metrics 15m.</p> <p>9) Directory cache invalidation hooks - Decision: Directory publishes <code>directory.route.updated</code>; CTS invalidates/pre-warms cache.</p> <p>10) Trace sampling rate &amp; PII redaction - Decision: Head-based sampling (10% default; 100% for 5xx or p95 breaches); PII allowlist in logs/traces.</p>"},{"location":"10-components/canonical-transfer-service/#implementation-map-whowhatwhen","title":"Implementation map (who/what/when)","text":"Item Owner Artifacts Exit Criteria Schema governance Platform Lead ADR-001, <code>schemas/canonical-transfer/</code> CI rejects non-compliant events; schema published Quotas &amp; limits API Eng gateway config + middleware 429s with Retry-After; per-tenant metrics Aurora Pg + JSONB DB Eng ADR-003, migrations Tables + indexes live; RDS Proxy wired; load test passes SNS/SQS FIFO bus Platform Eng ADR-004, IaC Topic + queues live; ordering verified JSON schema registry App Eng ADR-005, CI rules All events validated in CI + prod (shadow) Async-only settlement App Eng ADR-006, API docs POST always returns SUBMITTED DLQ &amp; re-drive SRE ADR-007, runbooks, Lambda Re-drive tool works; alarms wired Retention policy Compliance + SRE ADR-008, lifecycle rules Glacier policies in place; PII separation verified Route invalidation Directory + App Eng ADR-009 Cache flushes on update event; TTLs enforced Tracing + redaction SRE ADR-010, log filters 10% sampling, error boost, PII allowlist verified"},{"location":"10-components/compliance-screening/","title":"Compliance Screening Service","text":"<p>The Compliance Screening Service protects Storo by screening entities (payer, payee) against sanctions and risk lists before transfers are submitted to rails. It ensures fast, local allow/deny decisions and continuous re-screening as lists update.</p>"},{"location":"10-components/compliance-screening/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Enforce pre-submit screening of entities against sanctions lists.  </li> <li>Perform delta re-screens when lists update.  </li> <li>Cache results for performance.  </li> <li>Emit entity flagged events for operator review.  </li> <li>Provide a simple, auditable <code>/screen</code> API.</li> </ul>"},{"location":"10-components/compliance-screening/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Ingest official sanctions/watchlists (OFAC, UN, EU, SA FIC).  </li> <li>Normalize and index names, aliases, DOBs, countries.  </li> <li>Provide low-latency API for CTS screening.  </li> <li>Emit alerts when existing entities match new list entries.  </li> <li>Store results with versioned list references for audit.</li> </ul> <p>Local sources: SA PEPs/adverse media (vendor feeds), ZW FIU advisories; define update SLAs and checksum validation.</p>"},{"location":"10-components/compliance-screening/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/compliance-screening/#http","title":"HTTP","text":"<ul> <li><code>POST /screen</code></li> <li>body: <code>{ name, dob?, country?, idNumber? }</code></li> <li>returns: <code>{ action: allow|deny, score, matches[], listVersion }</code></li> </ul>"},{"location":"10-components/compliance-screening/#events-emit","title":"Events (emit)","text":"<ul> <li><code>compliance.entity.flagged</code></li> <li><code>{ entityId, transferId?, score, listVersion, matches[] }</code></li> </ul>"},{"location":"10-components/compliance-screening/#admin","title":"Admin","text":"<ul> <li><code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code></li> </ul>"},{"location":"10-components/compliance-screening/#data-model","title":"\ud83d\uddc4 Data Model","text":"<ul> <li><code>lists_raw</code> (source files)  </li> <li><code>lists_index</code> (normalized searchable index)  </li> <li><code>entity_screenings</code> (entityId, transferId, result, listVersion, createdAt)  </li> <li><code>outbox_compliance</code> </li> </ul>"},{"location":"10-components/compliance-screening/#sequence","title":"\ud83d\udcd0 Sequence","text":"<pre><code>sequenceDiagram\n  participant CTS\n  participant CS as Compliance Service\n  participant LIST as Sanctions Lists\n\n  CTS-&gt;&gt;CS: POST /screen (payer, payee)\n  CS-&gt;&gt;LIST: query local index\n  LIST--&gt;&gt;CS: result { score, matches }\n  CS--&gt;&gt;CTS: { action: allow }</code></pre>"},{"location":"10-components/compliance-screening/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>List download failed \u2192 keep prior index, raise alert.  </li> <li>Timeout \u2192 CTS fails safe (deny).  </li> <li>False positive \u2192 escalate via Operator Console.  </li> <li>Stale index \u2192 emit compliance.service.stale event.</li> </ul>"},{"location":"10-components/compliance-screening/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: screening latency, match rate, stale index age.  </li> <li>Logs: structured with entityId, listVersion.  </li> <li>Alerts on stale index &gt; 24h.</li> </ul>"},{"location":"10-components/compliance-screening/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Encrypt raw list data at rest.  </li> <li>PII redaction in logs.  </li> <li>Access control to screening API by internal services only.</li> </ul>"},{"location":"10-components/compliance-screening/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>New list version failed ingest \u2192 re-run job manually, validate checksums.  </li> <li>High false positives \u2192 adjust fuzzy matching thresholds, add alias list.  </li> <li>Operator override \u2192 freeze/unfreeze entity in Operator Console.</li> </ul>"},{"location":"10-components/directory-routing/","title":"Directory &amp; Routing Service","text":"<p>The Directory &amp; Routing Service is Storo\u2019s authoritative source of rails metadata. It ensures transfers are routed deterministically to the correct rail endpoints, institutions, and fee structures.</p>"},{"location":"10-components/directory-routing/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Maintain authoritative directory of institutions, BINs, fees, settlement windows.  </li> <li>Provide fast lookups for CTS routing decisions.  </li> <li>Refresh data periodically from external sources.  </li> <li>Support effective-dated changes (versioning).</li> </ul>"},{"location":"10-components/directory-routing/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Store and expose institution metadata.  </li> <li>Expose routing lookups (<code>/routes?bin=...</code>) for CTS.  </li> <li>Apply per-rail/per-tenant fees and cutoffs.  </li> <li>Circuit-breaker fallback to cached versions.  </li> <li>Version data for audit and rollback.  </li> <li>Maintain ZA bank codes and PayShap proxy rules (cell/email/id) for resolution.  </li> <li>Publish settlement calendars (ZA/ZW) and cutoffs for consumers.</li> </ul>"},{"location":"10-components/directory-routing/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/directory-routing/#http","title":"HTTP","text":"<ul> <li><code>GET /routes?bin|memberId|rail=...</code>   \u2192 <code>{ endpoint, fees, settlementWindow, constraints }</code></li> </ul> <p>Examples:</p> <p><code>GET /routes?bin=438742</code> <pre><code>{\n  \"endpoint\": \"https://api.processor.example/payments\",\n  \"fees\": { \"type\": \"percentage\", \"value\": 0.02 },\n  \"settlementWindow\": { \"cutoff\": \"16:30\", \"timezone\": \"Africa/Johannesburg\" },\n  \"constraints\": { \"currencies\": [\"ZAR\",\"USD\"], \"limitsMinor\": { \"max\": 10000000 } }\n}\n</code></pre></p> <ul> <li> <p><code>GET /institutions/:id</code>   \u2192 <code>{ id, name, rail, endpoint, fees, windows }</code></p> </li> <li> <p><code>GET /calendars/:region</code>   \u2192 <code>{ region: \"ZA\"|\"ZW\", holidays: [...], timezone }</code></p> </li> </ul> <p>Example: <pre><code>{\n  \"region\": \"ZA\",\n  \"timezone\": \"Africa/Johannesburg\",\n  \"holidays\": [\"2025-01-01\",\"2025-03-21\",\"2025-04-18\"]\n}\n</code></pre></p>"},{"location":"10-components/directory-routing/#events-emit","title":"Events (emit)","text":"<ul> <li><code>directory.version.updated</code> </li> <li><code>{ versionId, effectiveFrom, source, checksum }</code></li> </ul> <p>Example: <pre><code>{\n  \"eventId\": \"018f3e00-2222-7f00-b1e3-7a7f5d3b9b10\",\n  \"type\": \"directory.version.updated\",\n  \"v\": 1,\n  \"occurredAt\": \"2025-08-27T08:00:00Z\",\n  \"tenantId\": \"system\",\n  \"payload\": {\n    \"versionId\": \"dir_v2025-08-27_01\",\n    \"effectiveFrom\": \"2025-08-27T09:00:00+02:00\",\n    \"source\": \"bank-codes+fees-portal\",\n    \"checksum\": \"sha256:abcd...\"\n  }\n}\n</code></pre></p>"},{"location":"10-components/directory-routing/#admin-time-via-platformbase","title":"Admin &amp; Time (via Platform/Base)","text":"<ul> <li>Admin: <code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code>.</li> <li>Time helpers: banking-day logic and cutoffs use Platform/Base calendars (<code>Africa/Johannesburg</code>, <code>Africa/Harare</code>).</li> </ul>"},{"location":"10-components/directory-routing/#data-model","title":"\ud83d\uddc4 Data Model","text":"<ul> <li><code>institutions</code> (id, name, rail, endpoint, status)  </li> <li><code>bins</code> (bin, institutionId, effectiveFrom/to)  </li> <li><code>fees</code> (tenantId, rail, feeType, value, effectiveFrom/to)  </li> <li><code>windows</code> (rail, cutoffTimes, timezone)  </li> <li><code>bank_codes</code> (ZA code, institutionId)  </li> <li><code>proxy_rules</code> (type, constraints, effectiveFrom/to)  </li> <li><code>calendars</code> (region, date, description)  </li> <li><code>directory_versions</code> </li> <li><code>outbox_directory</code> </li> </ul>"},{"location":"10-components/directory-routing/#sequence","title":"\ud83d\udcd0 Sequence","text":"<pre><code>sequenceDiagram\n  participant CTS\n  participant DR as Directory\n  participant EXT as External Source\n\n  CTS-&gt;&gt;DR: GET /routes?bin=438742\n  DR-&gt;&gt;DR: lookup BIN \u2192 institution \u2192 endpoint\n  DR--&gt;&gt;CTS: { endpoint, fees, window }\n  DR-&gt;&gt;EXT: scheduled refresh (daily)\n  EXT--&gt;&gt;DR: new version\n  DR--&gt;&gt;CTS: directory.version.updated</code></pre>"},{"location":"10-components/directory-routing/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>Unknown BIN \u2192 return error <code>ROUTE_NOT_FOUND</code>.  </li> <li>Source unavailable \u2192 keep prior version, alert ops.  </li> <li>Fee mismatch \u2192 reconciliation alerts via Operator Console.</li> </ul>"},{"location":"10-components/directory-routing/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: lookup latency, cache hit rate, version age.  </li> <li>Logs: institutionId, versionId.  </li> <li>Alerts: stale version &gt; SLA.</li> </ul>"},{"location":"10-components/directory-routing/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Access control: only CTS and gateways query directory.  </li> <li>Version artifacts signed and checksummed.</li> </ul>"},{"location":"10-components/directory-routing/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>Stale directory \u2192 re-run refresh job.  </li> <li>Incorrect fee \u2192 override with effectiveFrom and patch ADR.  </li> <li>BIN not routing \u2192 add mapping, redeploy version.</li> </ul>"},{"location":"10-components/event-bus-outbox/","title":"Event Bus &amp; Outbox \u2014 How It Works (Exactly)","text":"<p>Target stack: Aurora PostgreSQL + RDS Proxy + SNS FIFO + SQS FIFO (Option A)</p>"},{"location":"10-components/event-bus-outbox/#the-contract","title":"The contract","text":"<ul> <li>Exactly-once at the producer boundary via a transactional outbox (state and event row committed together).</li> <li>At-least-once across the bus: consumers must be idempotent and dedupe (<code>eventId</code>, optionally domain keys).</li> </ul>"},{"location":"10-components/event-bus-outbox/#components-roles","title":"Components &amp; Roles","text":"<pre><code>flowchart LR\n  subgraph \"Producer Service (e.g., CTS)\"\n    A[\"Write Model / DB\"]\n    O[(\"Outbox Table\")]\n    D[\"Dispatcher Worker\"]\n  end\n\n  subgraph \"Bus (SNS FIFO + SQS FIFO)\"\n    T[[\"Topic: events.transfers (SNS FIFO)\"]]\n    Q1[[\"Queue: gateway.usdc (SQS FIFO)\"]]\n    Q2[[\"Queue: ledger.postings (SQS FIFO)\"]]\n    Q3[[\"Queue: projections.timeline (SQS FIFO)\"]]\n  end\n\n  subgraph \"Consumers\"\n    G[\"Gateway (USDC)\"]\n    L[\"Ledger Service\"]\n    P[\"Projection / Read Model\"]\n    I[(\"Inbox Table for Dedupe\")]\n  end\n\n  A --&gt; O\n  D --&gt; T\n  T --&gt; Q1 --&gt; G\n  T --&gt; Q2 --&gt; L\n  T --&gt; Q3 --&gt; P --&gt; I\n</code></pre>"},{"location":"10-components/event-bus-outbox/#happy-path-sequence","title":"Happy Path Sequence","text":"<pre><code>sequenceDiagram\n  autonumber\n  participant S as \"Producer (CTS/API)\"\n  participant DB as \"Aurora (state + outbox)\"\n  participant W as \"Dispatcher\"\n  participant SNS as \"SNS FIFO Topic\"\n  participant QG as \"SQS FIFO (gateway.usdc)\"\n  participant GW as \"Consumer (Gateway USDC)\"\n\n  S-&gt;&gt;DB: BEGIN \u2192 insert transfer + outbox(event=submitted.usdc) \u2192 COMMIT\n  Note over S,DB: State and event are now durable together\n  W-&gt;&gt;DB: select PENDING rows (FOR UPDATE SKIP LOCKED)\n  W-&gt;&gt;SNS: publish(event) {GroupId=transferId, DedupId=eventId}\n  W-&gt;&gt;DB: mark outbox row = SENT\n  SNS--&gt;&gt;QG: deliver copy\n  QG-&gt;&gt;GW: receive message\n  GW-&gt;&gt;GW: idempotency check (inbox by eventId)\n  GW-&gt;&gt;Rail: submit on USDC (side-effect)\n  GW--&gt;&gt;QG: delete/ack message\n  GW-&gt;&gt;SNS: emit events.transfers.accepted / settled (as producer)\n</code></pre> <p>Arrow semantics</p> <ul> <li>Solid arrows = synchronous calls (DB, publish, ack).</li> <li>Events flow via SNS/SQS FIFO; ordering per transfer enforced with <code>MessageGroupId = transferId</code>.</li> </ul>"},{"location":"10-components/event-bus-outbox/#data-shapes","title":"Data Shapes","text":""},{"location":"10-components/event-bus-outbox/#event-envelope","title":"Event envelope","text":"<pre><code>{\n  \"envelope\": {\n    \"v\": 1,\n    \"eventId\": \"uuid\",\n    \"occurredAt\": \"2025-08-26T10:15:01Z\",\n    \"tenantId\": \"tnt_123\",\n    \"traceparent\": \"00-...\",\n    \"type\": \"events.transfers.submitted.usdc\"\n  },\n  \"key\": { \"transferId\": \"tr_123\" },\n  \"payload\": {\n    \"amount\": {\"value\":\"100.00\",\"currency\":\"USD\"},\n    \"payer\": {\"type\":\"WALLET\",\"id\":\"payer-abc\"},\n    \"payee\": {\"type\":\"WALLET\",\"id\":\"0x...\"}\n  }\n}\n</code></pre> <p>Bus mapping: <code>MessageGroupId = key.transferId</code>, <code>MessageDeduplicationId = envelope.eventId</code>.</p>"},{"location":"10-components/event-bus-outbox/#outbox-table-producer-db","title":"Outbox table (producer DB)","text":"id eventType payload (JSONB) state attempts lastError next_attempt createdAt updatedAt uuid <code>events.transfers.submitted.usdc</code> <code>{envelope,key,payload}</code> PENDING/SENT/FAILED int text ts ts ts"},{"location":"10-components/event-bus-outbox/#inbox-table-consumer-db-optional","title":"Inbox table (consumer DB) \u2014 optional","text":"eventId (PK) processedAt uuid ts"},{"location":"10-components/event-bus-outbox/#failure-retry-semantics","title":"Failure &amp; Retry Semantics","text":""},{"location":"10-components/event-bus-outbox/#producerdispatcher","title":"Producer/Dispatcher","text":"<pre><code>sequenceDiagram\n  autonumber\n  participant W as \"Dispatcher\"\n  participant DB as \"Outbox\"\n  participant SNS as \"SNS\"\n\n  W-&gt;&gt;DB: fetch PENDING (batch)\n  W-&gt;&gt;SNS: publish\n  alt publish error\n    W-&gt;&gt;DB: attempts++ , state=PENDING , next_attempt = now + backoff\n  else attempts &gt;= RETRY_MAX\n    W-&gt;&gt;DB: state=FAILED , lastError\n  end\n</code></pre>"},{"location":"10-components/event-bus-outbox/#consumer","title":"Consumer","text":"<pre><code>flowchart LR\n  M[\"Message from SQS FIFO\"] --&gt; C{\"Seen before? (inbox by eventId)\"}\n  C -- \"Yes\" --&gt; A[\"Ack/Delete\"]\n  C -- \"No\" --&gt; H[\"Handle side-effect\"]\n  H --&gt; R{\"Success?\"}\n  R -- \"Yes\" --&gt; I[\"Insert inbox row\"] --&gt; A\n  R -- \"No\" --&gt; E[\"Throw / do not ack; SQS retries \u2192 DLQ\"]\n</code></pre>"},{"location":"10-components/event-bus-outbox/#exactly-once-boundary-responsibilities","title":"Exactly-once boundary &amp; responsibilities","text":"<ul> <li>Producer: guarantees each event is published once or fails visible (SENT/FAILED). No duplicates marked SENT.</li> <li>Bus: may deliver duplicates or retries (at-least-once).</li> <li>Consumer: must be idempotent; dedupe via inbox table (or idempotent upsert by domain key).</li> </ul>"},{"location":"10-components/event-bus-outbox/#how-other-components-use-it","title":"How other components use it","text":"<ol> <li>CTS \u2192 Gateway(USDC): Gateway subscribes to <code>gateway.usdc</code> queue, dedupes, submits to AVAX, then emits <code>accepted/settled</code>.</li> <li>Gateway \u2192 CTS: CTS inbound consumer updates transfer state and timeline.</li> <li>CTS \u2192 Ledger: Ledger subscribes; posts journal entries idempotently by <code>(transferId,type)</code>.</li> <li>CTS \u2192 Projections: updates read models for dashboards/webhooks.</li> <li>Directory \u2192 CTS: publishes <code>directory.route.updated</code>; CTS invalidates route cache.</li> </ol>"},{"location":"10-components/event-bus-outbox/#operational-defaults-adopt-now","title":"Operational defaults (adopt now)","text":"<ul> <li>Dispatcher: batch=50, concurrency=10; backoff: <code>1s,5s,30s,2m,10m,1h</code>; RETRY_MAX=10.</li> <li>SQS visibility timeout: \u2265 2\u00d7 handler p99.</li> <li>Alarms: <code>event_outbox_backlog</code>, <code>event_publish_lag_seconds</code>, <code>dead_letter_count</code>, <code>event_consumer_lag_seconds</code>.</li> </ul>"},{"location":"10-components/event-bus-outbox/#wire-test-localcloud-sanity-checks","title":"Wire Test (local/cloud sanity checks)","text":""},{"location":"10-components/event-bus-outbox/#1-sql-outbox-schema-seed","title":"1) SQL \u2014 Outbox schema &amp; seed","text":"<pre><code>CREATE TABLE IF NOT EXISTS outbox (\n  id uuid PRIMARY KEY,\n  eventType text NOT NULL,\n  payload jsonb NOT NULL,\n  state text NOT NULL DEFAULT 'PENDING',\n  attempts int NOT NULL DEFAULT 0,\n  lastError text,\n  next_attempt timestamptz NOT NULL DEFAULT now(),\n  createdAt timestamptz NOT NULL DEFAULT now(),\n  updatedAt timestamptz NOT NULL DEFAULT now()\n);\n\n-- Insert a fake submitted.usdc event\nINSERT INTO outbox (id, eventType, payload)\nVALUES (\n  gen_random_uuid(),\n  'events.transfers.submitted.usdc',\n  jsonb_build_object(\n    'envelope', jsonb_build_object('v',1,'eventId', gen_random_uuid()::text, 'occurredAt', now(), 'tenantId','tnt_demo','type','events.transfers.submitted.usdc'),\n    'key', jsonb_build_object('transferId','tr_test_123'),\n    'payload', jsonb_build_object('amount', jsonb_build_object('value','10.00','currency','USD'))\n  )\n);\n</code></pre>"},{"location":"10-components/event-bus-outbox/#2-aws-cli-bus-quick-setup-example","title":"2) AWS CLI \u2014 Bus quick setup (example)","text":"<pre><code># Create SNS FIFO topic\naws sns create-topic --name events.transfers.fifo --attributes FifoTopic=true,ContentBasedDeduplication=false\n\n# Create SQS FIFO queue for gateway\naws sqs create-queue --queue-name gateway.usdc.fifo \\\n  --attributes FifoQueue=true,ContentBasedDeduplication=false,VisibilityTimeout=60\n\n# Subscribe queue to topic\naws sns subscribe --topic-arn &lt;SNS_ARN&gt; --protocol sqs --notification-endpoint &lt;SQS_ARN&gt;\n\n# Allow SNS to publish to SQS (set queue policy accordingly)\n</code></pre>"},{"location":"10-components/event-bus-outbox/#3-dispatcher-mock-python","title":"3) Dispatcher mock (Python)","text":"<pre><code>import os, json, time, uuid, psycopg2, boto3\n\nSNS_ARN = os.environ['SNS_ARN']\nconn = psycopg2.connect(os.environ['PG_DSN'])\nsns = boto3.client('sns', region_name=os.environ.get('AWS_REGION','us-east-1'))\n\nBACKOFF = [1,5,30,120,600,3600]\n\nwhile True:\n    with conn, conn.cursor() as cur:\n        cur.execute(\"\"\"\n          SELECT id, payload\\n          FROM outbox\\n          WHERE state='PENDING' AND next_attempt &lt;= now()\\n          ORDER BY createdAt\\n          FOR UPDATE SKIP LOCKED\\n          LIMIT 50\n        \"\"\")\n        rows = cur.fetchall()\n        for oid, payload in rows:\n            env = payload['envelope']\n            key = payload['key']\n            try:\n                sns.publish(\n                  TopicArn=SNS_ARN,\n                  Message=json.dumps(payload),\n                  MessageGroupId=key['transferId'],\n                  MessageDeduplicationId=env['eventId']\n                )\n                cur.execute(\"UPDATE outbox SET state='SENT', attempts=attempts+1, updatedAt=now() WHERE id=%s\", (oid,))\n            except Exception as e:\n                cur.execute(\"\"\"\n                  UPDATE outbox\n                     SET attempts=attempts+1,\n                         lastError=%s,\n                         next_attempt=now() + make_interval(secs =&gt; %s),\n                         updatedAt=now(),\n                         state = CASE WHEN attempts &gt;= 10 THEN 'FAILED' ELSE 'PENDING' END\n                   WHERE id=%s\n                \"\"\", (str(e), BACKOFF[min(len(BACKOFF)-1, 0)], oid))\n    time.sleep(1)\n</code></pre>"},{"location":"10-components/event-bus-outbox/#4-consumer-mock-python","title":"4) Consumer mock (Python)","text":"<pre><code>import os, json, boto3, datetime\n\nsqs = boto3.client('sqs', region_name=os.environ.get('AWS_REGION','us-east-1'))\nQUEUE_URL = os.environ['QUEUE_URL']\n\nwhile True:\n    resp = sqs.receive_message(QueueUrl=QUEUE_URL, MaxNumberOfMessages=1, WaitTimeSeconds=10)\n    for m in resp.get('Messages', []):\n        body = json.loads(m['Body'])\n        payload = json.loads(body.get('Message', '{}'))\n        evt = payload.get('envelope', {})\n        print('Got event', evt.get('type'), evt.get('eventId'), datetime.datetime.utcnow().isoformat())\n        # TODO: dedupe check by eventId in inbox table\n        sqs.delete_message(QueueUrl=QUEUE_URL, ReceiptHandle=m['ReceiptHandle'])\n</code></pre> <p>These mocks are for wiring/visibility; production code should use a proper worker framework, metrics, and inbox dedupe.</p>"},{"location":"10-components/event-bus-outbox/#runbooks-condensed","title":"Runbooks (condensed)","text":"<ul> <li>Outbox backlog rising \u2192 check dispatcher logs; SNS/SQS publish errors; scale workers; review DLQ.</li> <li>Consumer lag rising \u2192 scale consumers; increase visibility timeout; profile handler.</li> <li>Duplicate effects \u2192 ensure inbox/dedupe; verify <code>MessageGroupId</code>/<code>DeduplicationId</code> mapping.</li> <li>FAILED outbox rows \u2192 fix cause; re-drive by <code>eventId</code> using admin tool.</li> </ul>"},{"location":"10-components/event-bus-outbox/#security-pii","title":"Security &amp; PII","text":"<ul> <li>Events contain IDs, not PII. Outbox payloads are encrypted at rest.</li> <li>IAM: producer can publish to the topic; consumers can read only their queues.</li> </ul>"},{"location":"10-components/ledger-service/","title":"Ledger Service","text":"<p>The Ledger Service is Storo\u2019s book of record. It maintains double\u2011entry journals, computes balances, exposes statements, and guarantees that every money movement is represented by a balanced set of postings. If it isn\u2019t posted here, it didn\u2019t happen.</p>"},{"location":"10-components/ledger-service/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Enforce double\u2011entry accounting for all transfers across rails.  </li> <li>Provide authoritative balances and auditable journals.  </li> <li>Support authorization \u2192 capture \u2192 reversal/return lifecycles.  </li> <li>Handle multi\u2011currency with explicit FX conversion and P&amp;L.  </li> <li>Export partner statements (BAI2\u2011like) and support reconciliation.</li> </ul>"},{"location":"10-components/ledger-service/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Consume domain events and apply posting rules:</li> <li><code>transfers.accepted</code> (hold / memo postings where applicable)</li> <li><code>transfers.settled</code> (final postings)</li> <li><code>transfers.returned</code> (reversal postings)</li> <li>Maintain derived balances (by account, currency).  </li> <li>Emit <code>ledger.balance.updated</code> and <code>ledger.posting.created</code>.  </li> <li>Provide read APIs: balances, journals, statements.  </li> <li>Guard rails: append\u2011only journals; reversals via new entries only.</li> </ul>"},{"location":"10-components/ledger-service/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/ledger-service/#events-consume-envelope-v1","title":"Events (consume; envelope <code>v=1</code>)","text":"<ul> <li><code>transfers.accepted</code></li> <li><code>transfers.settled</code></li> <li><code>transfers.returned</code></li> </ul> <p>Dedupe per Events spec: see ../20-specs/events.md (consumer idempotency by <code>eventId</code>, lifecycle uniqueness for <code>(transferId,type)</code>).</p>"},{"location":"10-components/ledger-service/#events-emit-envelope-v1","title":"Events (emit; envelope <code>v=1</code>)","text":"<ul> <li><code>ledger.posting.created</code></li> <li><code>ledger.balance.updated</code></li> </ul>"},{"location":"10-components/ledger-service/#http-readonly","title":"HTTP (read\u2011only)","text":"<ul> <li><code>GET /balances?accountId=...&amp;currency=...</code></li> <li><code>GET /journal?transferId=...</code> or <code>?accountId=...&amp;from=...&amp;to=...</code></li> <li><code>GET /statements?accountId=...&amp;from=...&amp;to=...&amp;format=bai2|json</code></li> </ul>"},{"location":"10-components/ledger-service/#admin-via-platformbase","title":"Admin (via Platform/Base)","text":"<ul> <li><code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code> provided by Platform/Base and adopted by Ledger.</li> </ul> <p>Write access is event\u2011driven only. Manual adjustments are rare and must go through the Operator Console using explicit adjustment events with approvals/audit.</p>"},{"location":"10-components/ledger-service/#data-model","title":"\ud83d\uddc4 Data Model","text":"<p>tables - <code>accounts</code>   - <code>accountId</code> (pk), <code>type</code> (USER|MERCHANT|LIQUIDITY|FEES|FX|SETTLEMENT|RESERVE|NOSTRO|VOSTRO), <code>tenantId?</code>, <code>currency?</code> (nullable if multi\u2011currency), <code>status</code>, <code>createdAt</code> - <code>journals</code> (immutable)   - <code>journalId</code> (pk), <code>transferId</code>, <code>eventType</code>, <code>occurredAt</code>, <code>memo</code>, <code>exchangeControlRef?</code> - <code>postings</code> (append\u2011only)   - <code>postingId</code> (pk), <code>journalId</code> (fk), <code>debitAccountId</code>, <code>creditAccountId</code>, <code>amountMinor</code>, <code>currency</code>, <code>memo</code> - <code>balances</code> (materialized)   - <code>accountId</code>, <code>currency</code>, <code>balanceMinor</code>, <code>asOf</code> - <code>outbox_ledger</code> \u2013 for emitted events</p> <p>blobs (encrypted) - optional statement snapshots; export artifacts</p>"},{"location":"10-components/ledger-service/#posting-rules-canonical","title":"\ud83e\uddee Posting Rules (canonical)","text":"<p>See: ../20-specs/posting-rules.md</p> <p>All amounts are in minor units (e.g., cents). Examples assume a customer pays a merchant 100.00 with a 1.00 fee.</p>"},{"location":"10-components/ledger-service/#1-accepted-authorization-hold-rails-that-support-authcapture","title":"1) Accepted (authorization / hold) \u2014 rails that support AUTH/CAPTURE","text":"<p>Create memo/hold journal (off\u2011balance or flagged): - Debit: <code>USER_AUTH_HOLD</code> (memo) \u2014 10000 - Credit: <code>LIQUIDITY_AUTH_PENDING</code> (memo) \u2014 10000</p> <p>If the rail has no auth concept (e.g., USDC push), no accepted postings are created.</p>"},{"location":"10-components/ledger-service/#2-settled-final-funds-move","title":"2) Settled (final funds move)","text":"<p>Core settlement postings: - Debit: <code>USER</code> \u2014 10000 - Credit: <code>MERCHANT</code> \u2014 9900 - Credit: <code>FEES</code> \u2014 100   (Storo take rate)</p> <p>If FX occurs (payer USD \u2192 merchant ZAR), split legs: - Debit: <code>USER</code> \u2014 10000 USD - Credit: <code>LIQUIDITY</code> \u2014 10000 USD - Debit: <code>LIQUIDITY</code> \u2014 180000 ZAR - Credit: <code>MERCHANT</code> \u2014 180000 ZAR - Credit/Debit: <code>FX_PNL</code> \u2014 difference from quoted vs realized</p> <p>Cross\u2011border flows may include legs to/from <code>NOSTRO</code>/<code>VOSTRO</code> accounts to reflect settlement with external banks.</p>"},{"location":"10-components/ledger-service/#vat-on-fees-za","title":"VAT on Fees (ZA)","text":"<ul> <li>When fees are vatable, split into <code>FEES_NET</code> and <code>FEES_VAT</code> credits as per <code>20-specs/tax-vat.md</code>.</li> </ul>"},{"location":"10-components/ledger-service/#3-returned-chargeback-reverse-prior-settled","title":"3) Returned / Chargeback (reverse prior settled)","text":"<p>Post the exact contra of the settlement set, preserving original currency: - Debit: <code>MERCHANT</code> \u2014 9900 - Debit: <code>FEES</code> \u2014 100   (or use <code>FEES_REVERSAL</code> to separate) - Credit: <code>USER</code> \u2014 10000</p> <p>For partial returns, amounts reflect the returned portion; keep link to original journal via <code>relatedJournalId</code> (in <code>journals.memo</code>).</p>"},{"location":"10-components/ledger-service/#4-fees-surcharges","title":"4) Fees &amp; Surcharges","text":"<ul> <li>Percentage fees applied at settlement time as separate credit to <code>FEES</code> account.  </li> <li>Per\u2011rail surcharges (e.g., OPPWA) post to <code>FEES_PARTNER</code> account and are netted in reconciliation.</li> </ul>"},{"location":"10-components/ledger-service/#5-rounding","title":"5) Rounding","text":"<ul> <li>Use banker\u2019s rounding when converting decimals \u2192 minor units.  </li> <li>Any rounding residual posts to <code>FX_PNL_ROUNDING</code> (must be near\u2011zero).</li> </ul>"},{"location":"10-components/ledger-service/#diagrams","title":"\ud83d\udcd0 Diagrams","text":""},{"location":"10-components/ledger-service/#event-posting-pipeline","title":"Event \u2192 Posting pipeline","text":"<pre><code>flowchart LR\n  EV[transfers.* event] --&gt; PR[Posting Rules]\n  PR --&gt; JR[Create Journal]\n  JR --&gt; PT[Append Postings (balanced)]\n  PT --&gt; BL[Update Balances]\n  PT --&gt; OE[Emit ledger.posting.created]\n  BL --&gt; BE[Emit ledger.balance.updated]</code></pre>"},{"location":"10-components/ledger-service/#settlement-example-no-fx","title":"Settlement example (no FX)","text":"<pre><code>sequenceDiagram\n  participant GW as Rail Gateway\n  participant L as Ledger\n  participant S as Balance Store\n\n  GW--&gt;&gt;L: transfers.settled {amount=10000, fee=100}\n  L-&gt;&gt;L: create journal J1\n  L-&gt;&gt;L: postings: D USER 10000 / C MERCHANT 9900 / C FEES 100\n  L-&gt;&gt;S: update balances (USER-, MERCHANT+, FEES+)\n  L--&gt;&gt;GW: ledger.posting.created (J1)</code></pre>"},{"location":"10-components/ledger-service/#invariants","title":"\ud83e\uddf1 Invariants","text":"<ul> <li>Balanced: sum(debits) == sum(credits) per journal.  </li> <li>Append\u2011only: no deletes; corrections via new journals.  </li> <li>Idempotent: journal key = hash(<code>transferId</code>,<code>eventType</code>,<code>sequence</code>); duplicates ignored.  </li> <li>Temporal: <code>occurredAt</code> from event; do not rewrite history.</li> </ul> <p>Consumer idempotency: dedupe inbound events by <code>eventId</code>, and enforce lifecycle uniqueness <code>(transferId,eventType)</code> to avoid double-posting.</p>"},{"location":"10-components/ledger-service/#failure-modes-retries","title":"\ud83d\udea8 Failure Modes &amp; Retries","text":"<ul> <li>Duplicate event \u2192 ignored via idempotency key.  </li> <li>Currency mismatch (account vs posting) \u2192 reject and raise operator alert.  </li> <li>Negative balance constraints (if configured) \u2192 block posting and raise exception.  </li> <li>Outbox publish failure \u2192 retry with backoff; no partial commits (journal + outbox in same txn).</li> </ul>"},{"location":"10-components/ledger-service/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: <code>journals/sec</code>, <code>postings/sec</code>, balance update latency, idempotency drop rate.  </li> <li>Gauges: outstanding reversal backlog, FX_PNL daily total.  </li> <li>Logs: structured with <code>transferId</code>, <code>journalId</code>, <code>accountId</code>, <code>currency</code>.  </li> <li>Traces: span across event reception \u2192 journal write \u2192 outbox publish.</li> </ul>"},{"location":"10-components/ledger-service/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Least privilege DB role; append\u2011only constraints at the schema level if possible.  </li> <li>PII: account metadata stored outside postings; journals contain IDs only.  </li> <li>Statement exports signed + timestamped; encrypt artifacts at rest.  </li> <li>Admin endpoints behind service mesh authN/Z; metrics unauthenticated readiness only.</li> </ul>"},{"location":"10-components/ledger-service/#config","title":"\u2699\ufe0f Config","text":"<ul> <li><code>LEDGER_BASE_CURRENCY</code> (reporting), supported currencies.  </li> <li><code>NEGATIVE_BALANCE_POLICY</code> (ALLOW|BLOCK|WARN).  </li> <li><code>FX_QUOTE_SOURCE</code> (provider, TTL).  </li> <li><code>STATEMENT_FORMATS</code> (bai2,json), <code>STATEMENT_TIMEZONE</code>.  </li> <li><code>IDEMPOTENCY_SALT</code> for journal keys.</li> </ul>"},{"location":"10-components/ledger-service/#runbooks","title":"\ud83d\udcd8 Runbooks","text":"<ul> <li>Balances off vs partner \u2192 run T+0/T+1 reconciliation; inspect unmatched queue; verify posting rules version.  </li> <li>FX_PNL spikes \u2192 check quote source latency; ensure correct pair &amp; decimals.  </li> <li>Reversal backlog \u2192 confirm returns events being emitted; investigate gateway DLQs.  </li> <li>Throughput degradation \u2192 check DB contention on <code>balances</code>; consider batched/materialized updates.</li> </ul>"},{"location":"10-components/ledger-service/#slos","title":"\ud83d\udccf SLOs","text":"<ul> <li>Posting latency (P99) \u2264 1s after <code>transfers.settled</code>.  </li> <li>Idempotency duplicate acceptance rate \u2264 0.1%.  </li> <li>Balance read latency (P99) \u2264 200 ms.  </li> <li>Statement generation \u2264 60 s for 100k postings.</li> </ul>"},{"location":"10-components/ledger-service/#test-matrix-essentials","title":"\ud83e\uddea Test Matrix (essentials)","text":"<ul> <li>Round\u2011trip: accepted \u2192 settled \u2192 returned (full &amp; partial).  </li> <li>Multi\u2011currency settlement with FX &amp; rounding residuals.  </li> <li>Idempotency under concurrent duplicates.  </li> <li>Negative balance policy enforcement.  </li> <li>Statement export byte\u2011for\u2011byte determinism for a fixed fixture.</li> </ul>"},{"location":"10-components/ledger-service/#example-journal-posting-payloads","title":"Example: Journal &amp; Posting payloads","text":"<p>Journal (emitted event payload) <pre><code>{\n  \"journalId\": \"jrnl_01HZX...\",\n  \"transferId\": \"tr_01HZY...\",\n  \"eventType\": \"transfers.settled\",\n  \"occurredAt\": \"2025-08-26T10:15:01Z\",\n  \"memo\": \"settlement zimswitch batch 8341\",\n  \"exchangeControlRef\": \"ec_ABC123\"\n}\n</code></pre></p> <p>Posting (emitted event payload) <pre><code>{\n  \"postingId\": \"pst_01HZ...\",\n  \"journalId\": \"jrnl_01HZX...\",\n  \"debitAccountId\": \"acct_user_123\",\n  \"creditAccountId\": \"acct_merchant_987\",\n  \"amountMinor\": 9900,\n  \"currency\": \"ZAR\",\n  \"memo\": \"net to merchant\"\n}\n</code></pre></p> <p>Bottom line: The Ledger turns messy rail realities into deterministic, balanced, auditable facts. Everything else in Storo depends on this discipline.</p>"},{"location":"10-components/operator-console/","title":"Operator Console","text":"<p>The Operator Console is the human-facing interface for resolving exceptions, monitoring transfers, and acting on compliance/reconciliation workflows.</p>"},{"location":"10-components/operator-console/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Provide operators with clear visibility into transfer timelines.  </li> <li>Enable manual intervention for returns, unmatched items, compliance flags.  </li> <li>Reduce need for engineers to access production systems.  </li> </ul>"},{"location":"10-components/operator-console/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Display transfer timelines (events, postings).  </li> <li>Show queues: returns, reconciliation exceptions, compliance hits.  </li> <li>Allow manual resolution: assign unmatched, trigger return, freeze/unfreeze entity.  </li> <li>Surface system health and metrics dashboards.  </li> </ul>"},{"location":"10-components/operator-console/#interfaces","title":"\ud83d\udd0c Interfaces","text":"<ul> <li>Web UI (internal only, authenticated via SSO).  </li> <li>Reads from CTS, Ledger, Compliance, Recon.  </li> <li>Writes via APIs only (never direct DB):  </li> <li><code>POST /returns</code> </li> <li><code>POST /entity/freeze</code> </li> <li><code>POST /entity/unfreeze</code> </li> </ul>"},{"location":"10-components/operator-console/#sequence","title":"\ud83d\udcd0 Sequence","text":"<pre><code>sequenceDiagram\n  participant O as Operator\n  participant OC as Operator Console\n  participant CTS\n  participant Recon\n  participant Compliance\n\n  O-&gt;&gt;OC: view unmatched\n  OC-&gt;&gt;Recon: GET /exceptions\n  O-&gt;&gt;OC: resolve exception\n  OC-&gt;&gt;CTS: POST /returns {transferId, reason}\n  CTS--&gt;&gt;OC: transfers.returned event</code></pre>"},{"location":"10-components/operator-console/#localization-i18n","title":"\ud83c\udf0d Localization (i18n)","text":"<ul> <li>Supported languages: English (en), Afrikaans (af), Zulu (zu), Xhosa (xh), Sotho (st), Tswana (tn).  </li> <li>Strategy: externalized message catalog with keys; locale switch per user.  </li> <li>PII: ensure translations do not expose sensitive data; placeholders only.  </li> </ul>"},{"location":"10-components/operator-console/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>Stale data \u2192 refresh from APIs, not cached snapshots.  </li> <li>Unauthorized access \u2192 enforce SSO + RBAC.  </li> <li>Operator error \u2192 require 4-eyes approval for destructive actions (returns, freezes).  </li> </ul>"},{"location":"10-components/operator-console/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Audit log of every operator action (immutable).  </li> <li>Metrics: queue sizes, resolution times.  </li> <li>Alerts: backlog &gt; SLA.</li> </ul>"},{"location":"10-components/operator-console/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>SSO + role-based access (OPS, COMPLIANCE, ADMIN).  </li> <li>Audit trail mandatory.  </li> <li>PII redacted where not necessary.  </li> </ul>"},{"location":"10-components/operator-console/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>Recon backlog \u2192 assign extra operators.  </li> <li>False compliance flag \u2192 unfreeze with reason, record override.  </li> <li>Frequent operator overrides \u2192 escalate rule/threshold tuning.</li> </ul>"},{"location":"10-components/platform-base/","title":"Platform/Base Library","text":"<p>The Platform/Base Library provides shared utilities for all Storo services, ensuring consistency in health checks, IDs, error handling, time logic, and migrations.</p>"},{"location":"10-components/platform-base/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Provide common admin endpoints for all services.  </li> <li>Standardize time, IDs, errors across the stack.  </li> <li>Support embedded migrations/configs.  </li> <li>Simplify observability and operational tooling.</li> </ul>"},{"location":"10-components/platform-base/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Expose <code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code>.  </li> <li>Provide banking-aware time utilities (cutoffs, holidays).  </li> <li>Standardize error handling (ErrorList, ParseError).  </li> <li>Offer ID generation and request tracing.  </li> <li>Embed DB migrations in service binaries.  </li> </ul> <p>Ship canonical holiday calendars for ZA/ZW and banking-day helpers (<code>Africa/Johannesburg</code>, <code>Africa/Harare</code>).</p>"},{"location":"10-components/platform-base/#contracts","title":"\ud83d\udcd1 Contracts","text":""},{"location":"10-components/platform-base/#admin-endpoints-all-services-adopt-via-platformbase","title":"Admin Endpoints (all services adopt via Platform/Base)","text":"<ul> <li><code>GET /live</code> \u2192 200 when process is up (no dependencies checked)</li> <li><code>GET /ready</code> \u2192 200 when dependencies are healthy (DB/bus); 503 otherwise</li> <li><code>GET /metrics</code> \u2192 Prometheus text format (counters, histograms, gauges)</li> <li><code>GET /version</code> \u2192 JSON</li> </ul> <pre><code>{\n  \"service\": \"storo-cts\",\n  \"version\": \"v1.2.3\",\n  \"gitSha\": \"abcd1234\",\n  \"buildDate\": \"2025-08-27T10:00:00Z\"\n}\n</code></pre> <p>Recommendation: bind admin server to a separate port and restrict exposure to service mesh / localhost.</p>"},{"location":"10-components/platform-base/#time-calendars","title":"\ud83d\udd52 Time &amp; Calendars","text":"<ul> <li>Regions/timezones supported out-of-the-box:</li> <li>ZA \u2192 <code>Africa/Johannesburg</code></li> <li>ZW \u2192 <code>Africa/Harare</code></li> <li>Helpers:</li> <li><code>Now()</code> \u2192 time in configured business TZ</li> <li><code>IsBankingDay(date)</code></li> <li><code>NextBankingDay(from)</code> / <code>PrevBankingDay(from)</code></li> <li><code>CutoffAt(date, rail)</code> \u2192 next effective cutoff from Directory config</li> <li>Calendars: ships canonical ZA/ZW holiday sets; Directory publishes effective calendars consumed by services.</li> </ul>"},{"location":"10-components/platform-base/#errors-ids","title":"\ud83e\uddf0 Errors &amp; IDs","text":"<ul> <li>Error taxonomy aligns with <code>docs/20-specs/error-codes.md</code>.</li> <li>Error helpers: <code>ErrorList</code>, <code>ParseError</code>, consistent fields: <code>{ code, message, details?, traceId? }</code>.</li> <li>IDs:</li> <li><code>ID()</code> \u2192 sortable unique IDs (UUIDv7-style) for entities/events</li> <li>Correlation: propagate W3C <code>traceparent</code> and include <code>traceId</code> in logs/errors</li> </ul>"},{"location":"10-components/platform-base/#migrations-embedded","title":"\ud83d\uddc3\ufe0f Migrations (embedded)","text":"<p>Embed schema migrations into service binaries and run on startup (opt-in flag).</p> <pre><code>import (\n  \"embed\"\n  base \"github.com/storo/platform-base\"\n)\n\n//go:embed migrations/*.sql\nvar migrationsFS embed.FS\n\nfunc main() {\n  db := mustOpenDB()\n  if err := base.Migrate(db, migrationsFS); err != nil { panic(err) }\n  // start admin server, app, consumers...\n}\n</code></pre> <p>Migration file naming: <code>0001_init.sql</code>, <code>0002_add_outbox.sql</code> (idempotent, forward-only). Rollback is handled via new forward migrations.</p>"},{"location":"10-components/platform-base/#interfaces","title":"\ud83d\udd0c Interfaces","text":"<ul> <li>Imported as library into all services.  </li> <li>Provides helpers for admin, time, error, IDs, migrations.  </li> </ul>"},{"location":"10-components/platform-base/#example","title":"\ud83d\udcd0 Example","text":"<pre><code>// Health server\nadmin := base.NewAdminServer(\":8081\")\nadmin.AddLivenessCheck(\"db\", db.Ping)\nadmin.Start()\n\n// Time utils\nt := base.Now()\nif t.IsBankingDay() { ... }\n</code></pre>"},{"location":"10-components/platform-base/#modules","title":"\ud83d\uddc4 Modules","text":"<ul> <li>Admin \u2192 liveness, readiness, metrics, version.  </li> <li>Time \u2192 banking days, holidays, cutoffs.  </li> <li>Errors \u2192 ErrorList, ParseError.  </li> <li>IDs \u2192 ID(), correlation IDs.  </li> <li>Migrations \u2192 embedded FS for DB schema upgrades.  </li> </ul>"},{"location":"10-components/platform-base/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Uniform <code>/metrics</code> for Prometheus.  </li> <li>Structured error/logging helpers.  </li> <li>Request tracing correlation.  </li> </ul>"},{"location":"10-components/platform-base/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Admin endpoints on localhost or service mesh only.  </li> <li>No sensitive data in metrics/logs.  </li> </ul>"},{"location":"10-components/platform-base/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>/live fails \u2192 service not running; check logs.  </li> <li>Migration failed \u2192 rollback DB version, re-run migration.  </li> <li>Clock drift \u2192 verify NTP sync; banking-day logic depends on accurate time.</li> </ul>"},{"location":"10-components/rail-gateway-airtel-momo/","title":"Rail Gateway \u2014 Airtel Money (Mobile Money)","text":"<p>Purpose Adapt canonical transfers to Airtel Money; strict schema validation; webhook handling; events.</p>"},{"location":"10-components/rail-gateway-airtel-momo/#responsibilities","title":"Responsibilities","text":"<ul> <li>Consume <code>transfers.submitted.airtelmomo</code>.</li> <li>Initiate payment and handle callbacks.</li> </ul>"},{"location":"10-components/rail-gateway-airtel-momo/#interfaces","title":"Interfaces","text":"<ul> <li>HTTP: <code>POST /webhooks/airtelmomo</code></li> <li>Events (envelope <code>v=1</code>): as per canonical <code>transfers.*</code></li> </ul>"},{"location":"10-components/rail-gateway-airtel-momo/#data-rules","title":"Data &amp; Rules","text":"<ul> <li><code>airtelmomo_ops</code>; MSISDN/currency validation; idempotency keying.</li> </ul>"},{"location":"10-components/rail-gateway-airtel-momo/#failure-modes","title":"Failure Modes","text":"<ul> <li>Callback gaps \u2192 poll; DLQ on parse/verify failure.</li> </ul>"},{"location":"10-components/rail-gateway-airtel-momo/#observability-security","title":"Observability &amp; Security","text":"<ul> <li>Prompt success rate; signature verify; PII redaction.</li> </ul> <p>See also: Rail Gateway \u2014 Template and Reason Code mappings in ../20-specs/error-codes.md</p>"},{"location":"10-components/rail-gateway-ecocash/","title":"Rail Gateway \u2014 EcoCash (Mobile Money, ZW)","text":"<p>Purpose Adapt canonical transfers to EcoCash mobile money flows (STK/USSD prompts), handle callbacks/statement ingest, and emit domain events.</p>"},{"location":"10-components/rail-gateway-ecocash/#responsibilities","title":"Responsibilities","text":"<ul> <li>Subscribe to <code>transfers.submitted.ecocash</code> (PUSH primary).</li> <li>Trigger STK/USSD prompt, poll status, handle async callbacks.</li> <li>Map reason/return codes; emit <code>accepted/settled/returned/failed</code>.</li> <li>Persist artifacts (redacted) for audit/recon.</li> </ul>"},{"location":"10-components/rail-gateway-ecocash/#interfaces","title":"Interfaces","text":""},{"location":"10-components/rail-gateway-ecocash/#inputs","title":"Inputs","text":"<ul> <li>Events: <code>transfers.submitted.ecocash</code></li> <li>HTTP: <code>POST /webhooks/ecocash</code> (signature verify)</li> </ul>"},{"location":"10-components/rail-gateway-ecocash/#outputs","title":"Outputs","text":"<ul> <li>Events (envelope <code>v=1</code>): <code>transfers.accepted</code>, <code>transfers.settled</code>, <code>transfers.returned</code>, <code>transfers.failed</code></li> </ul>"},{"location":"10-components/rail-gateway-ecocash/#data-model","title":"Data Model","text":"<ul> <li><code>ecocash_ops</code> (transferId, msisdn, amountMinor, currency, opRef, status, reasonCode?)</li> <li><code>outbox_gateway</code>, blobs for requests/responses</li> </ul>"},{"location":"10-components/rail-gateway-ecocash/#algorithms-rules","title":"Algorithms / Rules","text":"<ul> <li>STK prompt initiation; timeout &amp; retry windows.</li> <li>Idempotency: <code>{tenantId}:{transferId}</code> as partner reference.</li> <li>Strict MSISDN validation and currency allowlist.</li> </ul>"},{"location":"10-components/rail-gateway-ecocash/#diagrams","title":"Diagrams","text":"<pre><code>sequenceDiagram\n  participant CTS\n  participant GW as EcoCash GW\n  participant MNO as EcoCash\n  CTS-&gt;&gt;GW: transfers.submitted.ecocash\n  GW-&gt;&gt;MNO: STK prompt\n  MNO--&gt;&gt;GW: accepted {opRef}\n  GW--&gt;&gt;CTS: transfers.accepted\n  MNO--&gt;&gt;GW: settled/return {reason}\n  GW--&gt;&gt;CTS: transfers.settled / transfers.returned</code></pre>"},{"location":"10-components/rail-gateway-ecocash/#failure-modes-retries","title":"Failure Modes &amp; Retries","text":"<ul> <li>Prompt not delivered \u2192 retry/backoff, operator alert after N.</li> <li>Decline/timeout \u2192 <code>failed</code>/<code>returned</code> with mapped reason.</li> </ul>"},{"location":"10-components/rail-gateway-ecocash/#observability","title":"Observability","text":"<ul> <li>Metrics: prompt latency/success, returns rate.</li> </ul>"},{"location":"10-components/rail-gateway-ecocash/#security","title":"Security","text":"<ul> <li>Webhook signature verification; PII redaction.</li> </ul>"},{"location":"10-components/rail-gateway-ecocash/#runbooks","title":"Runbooks","text":"<ul> <li>Replay webhook; quarantine poison messages; contact MNO if outage persists.</li> </ul> <p>See also: Rail Gateway \u2014 Template and Reason Code mappings in ../20-specs/error-codes.md</p>"},{"location":"10-components/rail-gateway-eft/","title":"Rail Gateway \u2014 EFT (BankservAfrica Batch)","text":"<p>Purpose Manage batch submissions and returns for EFT, aligning with Bankserv file formats and cutoffs.</p>"},{"location":"10-components/rail-gateway-eft/#responsibilities","title":"Responsibilities","text":"<ul> <li>Produce batch files; submit to partner; ingest settlement/return files.</li> <li>Emit <code>accepted/settled/returned/failed</code> events accordingly.</li> </ul>"},{"location":"10-components/rail-gateway-eft/#interfaces","title":"Interfaces","text":"<ul> <li>Files: batch submission, settlement, returns.</li> <li>Events (envelope <code>v=1</code>): <code>transfers.*</code></li> </ul>"},{"location":"10-components/rail-gateway-eft/#data-model","title":"Data Model","text":"<ul> <li><code>eft_batches</code>, <code>eft_lines</code>, artifacts for file copies.</li> </ul>"},{"location":"10-components/rail-gateway-eft/#rules","title":"Rules","text":"<ul> <li>Cutoffs, windows, file validation (record counts, checksums).</li> </ul>"},{"location":"10-components/rail-gateway-eft/#debicheck-mandates-za","title":"DebiCheck Mandates (ZA)","text":"<ul> <li>Mandate lifecycle: create \u2192 amend \u2192 cancel; store mandate reference and consent metadata.</li> <li>Pull payments: verify active mandate before submission; include mandateRef in payload.</li> <li>Returns: map mandate-related reason codes to <code>transfers.returned</code> with details.</li> </ul>"},{"location":"10-components/rail-gateway-eft/#failure-modes","title":"Failure Modes","text":"<ul> <li>File reject; late returns; mismatched totals \u2192 recon exception.</li> </ul>"},{"location":"10-components/rail-gateway-eft/#observability-security","title":"Observability &amp; Security","text":"<ul> <li>Metrics: batch success rate; PII minimal in files; encryption at rest.</li> </ul>"},{"location":"10-components/rail-gateway-mtn-momo/","title":"Rail Gateway \u2014 MTN MoMo (Mobile Money)","text":"<p>Purpose Translate canonical transfers to MTN MoMo APIs (P2P/P2M), enforce validation, process webhooks, and emit events.</p>"},{"location":"10-components/rail-gateway-mtn-momo/#responsibilities","title":"Responsibilities","text":"<ul> <li>Consume <code>transfers.submitted.mtnmomo</code>.</li> <li>Initiate payment request (PUSH), handle consent/approval callbacks.</li> <li>Emit lifecycle events; persist artifacts.</li> </ul>"},{"location":"10-components/rail-gateway-mtn-momo/#interfaces","title":"Interfaces","text":""},{"location":"10-components/rail-gateway-mtn-momo/#inputs","title":"Inputs","text":"<ul> <li>Events: <code>transfers.submitted.mtnmomo</code></li> <li>HTTP: <code>POST /webhooks/mtnmomo</code></li> </ul>"},{"location":"10-components/rail-gateway-mtn-momo/#outputs","title":"Outputs","text":"<ul> <li>Events (envelope <code>v=1</code>): <code>transfers.accepted</code>, <code>transfers.settled</code>, <code>transfers.returned</code>, <code>transfers.failed</code></li> </ul>"},{"location":"10-components/rail-gateway-mtn-momo/#data-model","title":"Data Model","text":"<ul> <li><code>mtnmomo_ops</code> (...)</li> </ul>"},{"location":"10-components/rail-gateway-mtn-momo/#rules","title":"Rules","text":"<ul> <li>MSISDN format validation; currency allowlist.</li> <li>Idempotency via partner reference.</li> </ul>"},{"location":"10-components/rail-gateway-mtn-momo/#failure-modes-retries","title":"Failure Modes &amp; Retries","text":"<ul> <li>202/accepted without finalization \u2192 poll until terminal.</li> </ul>"},{"location":"10-components/rail-gateway-mtn-momo/#observability-security","title":"Observability &amp; Security","text":"<ul> <li>Metrics, DLQ; webhook signature verify, redaction.</li> </ul> <p>See also: Rail Gateway \u2014 Template and Reason Code mappings in ../20-specs/error-codes.md</p>"},{"location":"10-components/rail-gateway-oppwa/","title":"Rail Gateway \u2014 OPPWA (Card / Tokenized Payments)","text":"<p>The OPPWA Gateway adapts Storo canonical transfers to OPPWA (Open Payment Platform) APIs used by acquirers/processors (e.g., for Zimswitch card-present/tokenized flows). It validates payloads, transforms to OPPWA request formats, handles webhooks, and emits domain events.</p>"},{"location":"10-components/rail-gateway-oppwa/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Translate canonical transfers into OPPWA REST calls (payments, preauth/capture, refunds).</li> <li>Enforce strict validation of amounts, currencies, tokens/PAN surrogates, and 3DS/SDK data.</li> <li>Handle sync responses and async webhooks to finalize state.</li> <li>Emit accepted/settled/returned/failed events with mapped reason codes.</li> <li>Persist raw requests/responses (redacted) for audit and reconciliation.</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Subscribe to <code>transfers.submitted.oppwa</code>.</li> <li>Map intents:</li> <li><code>AUTH</code> \u2192 OPPWA <code>preauthorization</code></li> <li><code>CAPTURE</code> \u2192 OPPWA <code>capture</code></li> <li><code>PUSH/PULL</code> (rare for cards) \u2192 treated as <code>debit</code>/<code>credit</code> where supported</li> <li>Build requests using merchant credentials / entity routing.</li> <li>Receive webhooks (<code>/webhooks/oppwa</code>) and correlate to transfers.</li> <li>Emit events and store artifacts; support retries and idempotency keys.</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/rail-gateway-oppwa/#events-consume","title":"Events (consume)","text":"<ul> <li><code>transfers.submitted.oppwa</code></li> <li><code>{ transferId, tenantId, amount, currency, payer, payee, intent, metadata{ token, threeDS, merchantRef } }</code></li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#events-emit-envelope-v1","title":"Events (emit; envelope <code>v=1</code>)","text":"<ul> <li><code>transfers.accepted</code> \u2192 <code>{ transferId, rail:\"oppwa\", opRef, resultCode }</code></li> <li><code>transfers.settled</code> \u2192 <code>{ transferId, rail:\"oppwa\", opRef, captured:true, settlementDate? }</code></li> <li><code>transfers.returned</code> \u2192 <code>{ transferId, rail:\"oppwa\", opRef, reasonCode }</code></li> <li><code>transfers.failed</code> \u2192 <code>{ transferId, rail:\"oppwa\", reason, details }</code></li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#http","title":"HTTP","text":"<ul> <li><code>POST /webhooks/oppwa</code> (verify signature, parse, correlate)</li> <li>Admin: <code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code></li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#data-model","title":"\ud83d\uddc4 Data Model","text":"<ul> <li>table: <code>oppwa_ops</code></li> <li><code>id</code> (pk), <code>transferId</code>, <code>tenantId</code></li> <li><code>merchantId</code>, <code>entityId</code> (per-tenant/route), <code>opRef</code></li> <li><code>intent</code> (AUTH|CAPTURE|REFUND), <code>amountMinor</code>, <code>currency</code></li> <li><code>status</code> (INIT|ACCEPTED|CAPTURED|RETURNED|FAILED)</li> <li><code>resultCode</code>, <code>reasonCode</code>, <code>riskScore</code> (nullable)</li> <li><code>createdAt</code>, <code>updatedAt</code></li> <li>table: <code>outbox_gateway</code> \u2013 for events</li> <li>blob: redacted request/response JSON snapshots (encrypted), webhook payloads</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#transform-validation","title":"\ud83d\udd01 Transform &amp; Validation","text":"<ul> <li>Currency/amount \u2192 use minor units; reject &gt; 2 dp amounts for fiat.</li> <li>Tokenization \u2192 require network token / OPPWA token; never store PAN.</li> <li>3DS \u2192 include 3DS server results when present; pass-through fields via metadata.</li> <li>Idempotency \u2192 set OPPWA idempotency keys using <code>{tenantId}:{transferId}</code>.</li> <li>Reason mapping \u2192 maintain mapping table from OPPWA result/return codes \u2192 Storo <code>reason</code> enums.</li> <li>Auth/Capture split \u2192 only capture after explicit command or webhook indicating capture.</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#sequence-auth-capture","title":"\ud83d\udcd0 Sequence (Auth \u2192 Capture)","text":"<pre><code>sequenceDiagram\n  participant CTS as Canonical Transfer Service\n  participant GW as OPPWA Gateway\n  participant OPP as OPPWA API\n  participant WH as Webhook Receiver\n\n  CTS-&gt;&gt;GW: transfers.submitted.oppwa (intent=AUTH)\n  GW-&gt;&gt;OPP: POST /payments (preauthorization)\n  OPP--&gt;&gt;GW: 200 result { opRef, resultCode }\n  GW--&gt;&gt;CTS: transfers.accepted { opRef }\n  WH--&gt;&gt;GW: webhook { opRef, captured }\n  GW--&gt;&gt;CTS: transfers.settled { opRef }</code></pre>"},{"location":"10-components/rail-gateway-oppwa/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>DoS/429 from OPPWA \u2192 backoff + retry; escalate if sustained</li> <li>Invalid token / expired \u2192 <code>transfers.failed{reason:\"TOKEN_INVALID\"}</code></li> <li>Chargeback/return \u2192 emit <code>transfers.returned</code> with reason mapping</li> <li>Signature mismatch on webhook \u2192 reject + alert</li> <li>Currency not supported for merchant entity \u2192 fail fast</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: request latency, success rate by intent, webhook processing lag</li> <li>Error buckets by <code>resultCode</code> / <code>reasonCode</code></li> <li>DLQ depth for failed webhooks / submissions</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Verify webhook signatures; rotate secrets</li> <li>Redact PAN-like fields aggressively; tokenize everything</li> <li>Encrypt blobs at rest; least-privileged access to merchant credentials</li> <li>PCI scope: keep CTS and Ledger out of PAN scope; gateway isolates card data</li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#config","title":"\u2699\ufe0f Config","text":"<ul> <li><code>OPPWA_BASE_URL</code>, per-tenant <code>ENTITY_ID</code>, <code>MERCHANT_ID</code>, <code>API_KEY</code></li> <li><code>WEBHOOK_SECRET</code>, <code>IDEMPOTENCY_PREFIX</code></li> <li><code>TIMEOUT_MS</code>, <code>RETRY_MAX</code>, <code>BACKOFF</code></li> <li><code>REASON_CODE_MAP</code> (versioned), <code>CURRENCY_ALLOWLIST</code></li> </ul>"},{"location":"10-components/rail-gateway-oppwa/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>High 401/403 rates: check API key rotation, entity mapping</li> <li>Webhook gaps: verify public endpoint, firewall, signature; replay from OPPWA portal if available</li> <li>Frequent declines: inspect 3DS setup and tokenization source; check risk engine outcomes</li> </ul> <p>See also: Rail Gateway \u2014 Template and Reason Code mappings in ../20-specs/error-codes.md</p>"},{"location":"10-components/rail-gateway-payshap/","title":"Rail Gateway \u2014 PayShap (ZA Instant Proxy Payments)","text":"<p>Purpose Integrate proxy-based instant payments (PayShap), handling proxy resolution, submission, and returns.</p>"},{"location":"10-components/rail-gateway-payshap/#responsibilities","title":"Responsibilities","text":"<ul> <li>Consume <code>transfers.submitted.payshap</code>.</li> <li>Resolve proxy (cell/email/ID) \u2192 account; submit payment; handle timeouts/returns.</li> </ul>"},{"location":"10-components/rail-gateway-payshap/#interfaces","title":"Interfaces","text":""},{"location":"10-components/rail-gateway-payshap/#inputs","title":"Inputs","text":"<ul> <li>Events: <code>transfers.submitted.payshap</code></li> <li>HTTP: <code>POST /webhooks/payshap</code></li> </ul>"},{"location":"10-components/rail-gateway-payshap/#outputs","title":"Outputs","text":"<ul> <li>Events (envelope <code>v=1</code>): <code>transfers.accepted</code>, <code>transfers.settled</code>, <code>transfers.returned</code>, <code>transfers.failed</code></li> </ul>"},{"location":"10-components/rail-gateway-payshap/#data-model","title":"Data Model","text":"<ul> <li><code>payshap_ops</code> (proxyType, proxyValue, resolvedAccount, opRef, status, reasonCode)</li> </ul>"},{"location":"10-components/rail-gateway-payshap/#rules","title":"Rules","text":"<ul> <li>Proxy validation and supported types; cutoff/timeouts per scheme.</li> <li>Reason code mapping.</li> </ul>"},{"location":"10-components/rail-gateway-payshap/#failure-modes","title":"Failure Modes","text":"<ul> <li>Resolution failure; submission timeout; duplicate notifications.</li> </ul>"},{"location":"10-components/rail-gateway-payshap/#observability-security","title":"Observability &amp; Security","text":"<ul> <li>Metrics: resolution latency, success; webhook signature; PII redaction.</li> </ul> <p>See also: Rail Gateway \u2014 Template and Reason Code mappings in ../20-specs/error-codes.md</p>"},{"location":"10-components/rail-gateway-rtgs/","title":"Rail Gateway \u2014 RTGS (High-Value)","text":"<p>Purpose Handle high-value, real-time gross settlement submissions and acknowledgments.</p>"},{"location":"10-components/rail-gateway-rtgs/#responsibilities","title":"Responsibilities","text":"<ul> <li>Consume <code>transfers.submitted.rtgs</code>.</li> <li>Submit payment via partner/bank API; handle acknowledgments and settlement confirmations.</li> </ul>"},{"location":"10-components/rail-gateway-rtgs/#interfaces","title":"Interfaces","text":"<ul> <li>Events (envelope <code>v=1</code>): <code>transfers.*</code></li> <li>Files/API: as per partner specifications.</li> </ul>"},{"location":"10-components/rail-gateway-rtgs/#data-model","title":"Data Model","text":"<ul> <li><code>rtgs_ops</code> (transferId, amount, currency, opRef, status)</li> </ul>"},{"location":"10-components/rail-gateway-rtgs/#rules","title":"Rules","text":"<ul> <li>High-value thresholds; cutoff windows; stronger idempotency.</li> </ul>"},{"location":"10-components/rail-gateway-rtgs/#failure-modes","title":"Failure Modes","text":"<ul> <li>Queueing at partner; manual operator intervention paths.</li> </ul>"},{"location":"10-components/rail-gateway-rtgs/#observability-security","title":"Observability &amp; Security","text":"<ul> <li>Metrics: ack/settle latency; strong auth; PII minimization.</li> </ul> <p>See also: Rail Gateway \u2014 Template and Reason Code mappings in ../20-specs/error-codes.md</p>"},{"location":"10-components/rail-gateway-template/","title":"Rail Gateway \u2014 Template","text":"<p>Use this template when creating a new rail gateway component doc.</p>"},{"location":"10-components/rail-gateway-template/#purpose","title":"Purpose","text":"<p>Adapt canonical transfers to the rail; strict schema validation; webhooks/file ingest; emit events.</p>"},{"location":"10-components/rail-gateway-template/#responsibilities","title":"Responsibilities","text":"<ul> <li>Consume <code>transfers.submitted.&lt;rail&gt;</code>.</li> <li>Initiate/submit payment and handle callbacks/files.</li> <li>Map reason/return codes; emit <code>accepted/settled/returned/failed</code>.</li> <li>Persist artifacts (redacted) for audit/recon; use outbox for events.</li> </ul>"},{"location":"10-components/rail-gateway-template/#interfaces","title":"Interfaces","text":""},{"location":"10-components/rail-gateway-template/#inputs","title":"Inputs","text":"<ul> <li>Events: <code>transfers.submitted.&lt;rail&gt;</code></li> <li>HTTP/Webhooks or Files as per rail</li> </ul>"},{"location":"10-components/rail-gateway-template/#outputs","title":"Outputs","text":"<ul> <li>Events (envelope <code>v=1</code>): <code>transfers.accepted</code>, <code>transfers.settled</code>, <code>transfers.returned</code>, <code>transfers.failed</code></li> </ul>"},{"location":"10-components/rail-gateway-template/#data-model","title":"Data Model","text":"<ul> <li><code>&lt;rail&gt;_ops</code> (transferId, tenantId, opRef, amountMinor, currency, status, reasonCode?)</li> <li><code>outbox_gateway</code>, encrypted blobs for requests/responses</li> </ul>"},{"location":"10-components/rail-gateway-template/#transform-validation","title":"Transform &amp; Validation","text":"<ul> <li>Strict validation of identifiers, amounts, currencies.</li> <li>Idempotency: <code>{tenantId}:{transferId}</code> partner reference.</li> <li>Reason mapping \u2192 Storo enums (see <code>docs/20-specs/error-codes.md</code>).</li> </ul>"},{"location":"10-components/rail-gateway-template/#diagrams-example","title":"Diagrams (example)","text":"<pre><code>sequenceDiagram\n  participant CTS\n  participant GW as &lt;Rail&gt; GW\n  participant RAIL as &lt;Rail&gt;\n  CTS-&gt;&gt;GW: transfers.submitted.&lt;rail&gt;\n  GW-&gt;&gt;RAIL: submit\n  RAIL--&gt;&gt;GW: accepted {opRef}\n  GW--&gt;&gt;CTS: transfers.accepted\n  RAIL--&gt;&gt;GW: settled/return {reason}\n  GW--&gt;&gt;CTS: transfers.settled / transfers.returned</code></pre>"},{"location":"10-components/rail-gateway-template/#failure-modes-retries","title":"Failure Modes &amp; Retries","text":"<ul> <li>Submission failure \u2192 backoff/retry; DLQ for poison payloads.</li> <li>Timeout \u2192 emit <code>failed</code> or <code>returned</code> per scheme rules.</li> </ul>"},{"location":"10-components/rail-gateway-template/#observability-security","title":"Observability &amp; Security","text":"<ul> <li>Metrics: submit/settle latency, returns rate; DLQ depth.</li> <li>Webhook signature verification / PII redaction.</li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/","title":"Rail Gateway \u2014 USDC on Algorand","text":"<p>The USDC/Algorand Gateway adapts Storo\u2019s canonical transfers to on-chain USDC movements on the Algorand network. It validates requests, constructs transactions, submits to the network (via Algod/Indexer/provider), listens for confirmations, and emits domain events.</p>"},{"location":"10-components/rail-gateway-usdc-algo/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Translate canonical transfers into Algorand transactions (ASA transfers).</li> <li>Provide strict validation (asset, amounts, addresses, fees).</li> <li>Handle submission and confirmation with retries and reorg safety.</li> <li>Emit transfers.accepted / transfers.settled / transfers.failed as reality unfolds.</li> <li>Persist raw tx metadata for audit and reconciliation.</li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Subscribe to <code>transfers.submitted.usdc</code> events.</li> <li>Validate: payer/payee accounts, ASA ID (USDC), decimals, amount, memo fields, network params.</li> <li>Construct and sign transactions (online hot wallet or external signer/HSM).</li> <li>Submit to network; poll or subscribe for confirmations (N blocks).</li> <li>Emit outcome events and persist artifacts (txid, round, fees).</li> <li>Surface health (<code>/live</code>, <code>/ready</code>), metrics, version via Platform/Base.</li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/rail-gateway-usdc-algo/#events-consume","title":"Events (consume)","text":"<ul> <li><code>transfers.submitted.usdc</code></li> <li>payload: <code>{ transferId, tenantId, amount{value,currency}, payer, payee, intent: \"PUSH\"|\"PULL\"|\"CAPTURE\"|\"AUTH\", metadata{} }</code></li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#events-emit-envelope-v1","title":"Events (emit; envelope <code>v=1</code>)","text":"<ul> <li><code>transfers.accepted</code> \u2192 <code>{ transferId, rail:\"usdc-algo\", txId, suggestedRound }</code></li> <li><code>transfers.settled</code> \u2192 <code>{ transferId, rail:\"usdc-algo\", txId, confirmedRound, feeMicroAlgos }</code></li> <li><code>transfers.failed</code> \u2192 <code>{ transferId, rail:\"usdc-algo\", reason, details }</code></li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#http-admin","title":"HTTP (admin)","text":"<ul> <li><code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code></li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#data-model","title":"\ud83d\uddc4 Data Model","text":"<ul> <li>table: <code>usdc_algo_tx</code></li> <li><code>id</code> (pk), <code>transferId</code>, <code>tenantId</code></li> <li><code>txId</code>, <code>firstValid</code>, <code>lastValid</code>, <code>confirmedRound</code></li> <li><code>payerAddr</code>, <code>payeeAddr</code>, <code>amountBaseUnits</code> (int)</li> <li><code>feeMicroAlgos</code>, <code>note</code> (base64), <code>network</code> (mainnet/testnet)</li> <li><code>status</code> (PENDING|CONFIRMED|FAILED), <code>error</code> (nullable)</li> <li><code>createdAt</code>, <code>updatedAt</code></li> <li>table: <code>outbox_gateway</code> \u2013 standard outbox for event publishing</li> </ul> <p>Raw payloads (signed txn, provider receipts) should be stored encrypted in blob storage with references here.</p>"},{"location":"10-components/rail-gateway-usdc-algo/#transform-validation","title":"\ud83d\udd01 Transform &amp; Validation","text":"<ul> <li>Currency must be <code>USD</code> with USDC ASA mapped to <code>assetId</code> (config).</li> <li>Decimals: Convert from canonical decimal to base units (10^decimals).</li> <li>Addresses: Bech32/base32 Algorand addresses; ensure payer has opted-in to ASA.</li> <li>Fees: Enforce min fee; allow overpay for fast confirm (config).</li> <li>Auth/Capture: On-chain AUTH is simulated via escrow account or timelocked pattern (optional, roadmap). Default intent is PUSH.</li> <li>Memo/Note: Encode limited metadata in <code>note</code> (&lt;= 1 KB best practice). Do not put PII in chain notes.</li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#sequence-happy-path","title":"\ud83d\udcd0 Sequence (Happy Path)","text":"<pre><code>sequenceDiagram\n  participant CTS as Canonical Transfer Service\n  participant GW as USDC/Algorand Gateway\n  participant ALG as Algorand Network\n\n  CTS-&gt;&gt;GW: transfers.submitted.usdc\n  GW-&gt;&gt;GW: validate + build txn\n  GW-&gt;&gt;ALG: submit signed txn\n  ALG--&gt;&gt;GW: tx accepted (txId)\n  GW--&gt;&gt;CTS: transfers.accepted {txId}\n  ALG--&gt;&gt;GW: confirmed at round N\n  GW--&gt;&gt;CTS: transfers.settled {txId, round}</code></pre>"},{"location":"10-components/rail-gateway-usdc-algo/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>Invalid account / not opted-in \u2192 <code>transfers.failed{reason:\"NOT_OPTED_IN\"}</code></li> <li>Insufficient balance / fee \u2192 <code>...{\"INSUFFICIENT_FUNDS\"}</code></li> <li>RPC/provider timeout \u2192 retry with backoff; surface <code>accepted</code> only after tx is seen</li> <li>Chain reorg / orphan (rare on Algorand) \u2192 re-check finality window, re-emit <code>failed</code> if dropped</li> <li>Signer/HSM unavailable \u2192 circuit break, keep events in DLQ</li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: submit latency, confirmation latency, success rate, DLQ size, provider error codes</li> <li>Logs: txId, transferId, address short-hash, round; no PII</li> <li>Traces: propagate <code>x-request-id</code> / <code>trace-id</code> from CTS</li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Keys in HSM or isolated signer; never log material</li> <li>Principle of least privilege on provider API keys</li> <li>Encrypt raw signed txn artifacts at rest</li> <li>Feature flag to disable on-chain <code>note</code></li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#config","title":"\u2699\ufe0f Config","text":"<ul> <li><code>ALGOD_URL</code>, <code>ALGOD_TOKEN</code>, <code>INDEXER_URL</code></li> <li><code>USDC_ASSET_ID</code>, <code>DECIMALS</code></li> <li><code>CONFIRMATIONS</code> (blocks), <code>SUBMIT_RETRY_MAX</code></li> <li><code>SIGNER_ENDPOINT</code> (optional), <code>NETWORK</code></li> </ul>"},{"location":"10-components/rail-gateway-usdc-algo/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>Stuck in PENDING: check provider status; if mempool full, rebroadcast; verify fee</li> <li>Frequent INSUFFICIENT_FUNDS: inspect payer funding policy; enable preflight balance check</li> <li>High confirmation latency: increase fee or confirmation window temporarily</li> <li>Signer down: fail closed; drain DLQ after recovery</li> </ul> <p>See also: Rail Gateway \u2014 Template and Reason Code mappings in ../20-specs/error-codes.md</p>"},{"location":"10-components/rail-gateway-zimswitch/","title":"Rail Gateway \u2014 Zimswitch (Card / ISO 8583 via OPPWA)","text":"<p>The Zimswitch Gateway adapts Storo canonical transfers to Zimswitch-connected acquiring via OPPWA/ISO 8583 semantics. It validates messages, transforms to processor requests, handles callbacks/settlement files, and emits domain events.</p> <p>Note: Some Zimswitch integrations front with OPPWA JSON APIs while the underlying network uses ISO 8583. We model both: primary REST submission with strict ISO field discipline in validation and mapping.</p>"},{"location":"10-components/rail-gateway-zimswitch/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Translate canonical transfers to Zimswitch/OPPWA requests with ISO-grade validation.</li> <li>Support card-present (tap-on-phone, online) and card-not-present (tokenized) flows where permitted.</li> <li>Handle accept/settle/return lifecycle + reconciliation with daily settlement files.</li> <li>Emit domain events with mapped reason codes and retain artifacts for audit.</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Subscribe to <code>transfers.submitted.zimswitch</code>.</li> <li>Validate BIN/member routing via Directory &amp; Routing.</li> <li>Construct request: amount, currency (ZWL/ZAR/USD), merchant data, token/PAN surrogate, terminal capabilities.</li> <li>Submit to processor; handle synchronous result and async callbacks.</li> <li>Ingest settlement files (daily) for reconciliation and late returns.</li> <li>Emit <code>accepted/settled/returned/failed</code> and store payloads (redacted).</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/rail-gateway-zimswitch/#events-consume","title":"Events (consume)","text":"<ul> <li><code>transfers.submitted.zimswitch</code></li> <li><code>{ transferId, tenantId, amount, currency, payer, payee, intent, metadata{ token|panRef, emv, terminal, merchantRef } }</code></li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#events-emit-envelope-v1","title":"Events (emit; envelope <code>v=1</code>)","text":"<ul> <li><code>transfers.accepted</code> \u2192 <code>{ transferId, rail:\"zimswitch\", acqRef, authCode }</code></li> <li><code>transfers.settled</code> \u2192 <code>{ transferId, rail:\"zimswitch\", settlementDate, batchId? }</code></li> <li><code>transfers.returned</code> \u2192 <code>{ transferId, rail:\"zimswitch\", reasonCode }</code></li> <li><code>transfers.failed</code> \u2192 <code>{ transferId, rail:\"zimswitch\", reason, details }</code></li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#http","title":"HTTP","text":"<ul> <li><code>POST /webhooks/zimswitch</code> (if using REST front-end)</li> <li>Admin: <code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code></li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#files-reconciliation","title":"Files / Reconciliation","text":"<ul> <li>Consume settlement/return files delivered by processor; normalize to <code>StatementLine</code> and emit <code>recon.statement.ingested</code></li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#data-model","title":"\ud83d\uddc4 Data Model","text":"<ul> <li>table: <code>zimswitch_ops</code></li> <li><code>id</code> (pk), <code>transferId</code>, <code>tenantId</code>, <code>acquirerId</code>, <code>merchantId</code>, <code>terminalId</code></li> <li><code>acqRef</code>, <code>authCode</code>, <code>panBin</code>, <code>amountMinor</code>, <code>currency</code></li> <li><code>status</code> (INIT|ACCEPTED|CAPTURED|SETTLED|RETURNED|FAILED)</li> <li><code>isoFields</code> (json redacted), <code>resultCode</code>, <code>reasonCode</code></li> <li><code>createdAt</code>, <code>updatedAt</code></li> <li>table: <code>outbox_gateway</code></li> <li>blob: request/response artifacts, settlement files (encrypted)</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#transform-validation","title":"\ud83d\udd01 Transform &amp; Validation","text":"<ul> <li>BIN routing via Directory: ensure card BIN is allowed and mapped to correct acquirer.</li> <li>Currency rules per merchant/acquirer (ZWL/ZAR/USD); enforce decimal places.</li> <li>ISO fields discipline:</li> <li>F2 PAN \u2192 token/surrogate only (never store PAN)</li> <li>F3 Processing Code \u2192 map from intent (00 purchase, 20 refund, etc.)</li> <li>F4 Amount \u2192 minor units</li> <li>F22 POS Entry Mode (tap-on-phone vs ecom), F25 POS Condition Code</li> <li>F55 EMV data when present</li> <li>3DS/CVM: pass-through checks; reject inconsistent combinations.</li> <li>Idempotency: include <code>{tenantId}:{transferId}</code> in merchant reference; de-dupe repeats.</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#sequence-tap-on-phone-purchase","title":"\ud83d\udcd0 Sequence (Tap-on-Phone Purchase)","text":"<pre><code>sequenceDiagram\n  participant CTS as Canonical Transfer Service\n  participant GW as Zimswitch Gateway\n  participant PROC as Processor/OPPWA\n  participant RECON as Reconciliation\n\n  CTS-&gt;&gt;GW: transfers.submitted.zimswitch\n  GW-&gt;&gt;GW: validate + build request (ISO fields)\n  GW-&gt;&gt;PROC: submit payment\n  PROC--&gt;&gt;GW: auth approved { acqRef, authCode }\n  GW--&gt;&gt;CTS: transfers.accepted\n  RECON--&gt;&gt;GW: daily settlement file\n  GW--&gt;&gt;CTS: transfers.settled { settlementDate, batchId }</code></pre>"},{"location":"10-components/rail-gateway-zimswitch/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>BIN not allowed / unknown member \u2192 fail fast (routing)</li> <li>Decline \u2192 emit <code>transfers.failed</code> with mapped reason</li> <li>Chargeback/return (T+N) \u2192 from settlement files/webhooks \u2192 emit <code>transfers.returned</code></li> <li>Webhook signature mismatch \u2192 reject and alert</li> <li>File ingest failure \u2192 pause recon pipeline; reprocess from last checkpoint</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: approval rate, latency, returns rate, recon match %</li> <li>Error buckets by ISO result/return codes</li> <li>DLQ sizes for webhooks and file ingests</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>PCI containment in gateway; no PAN or full track data persisted</li> <li>Tokenization only; redact EMV tags except whitelisted fields</li> <li>Encrypt artifacts and settlement files at rest</li> <li>Rotate webhook/file-transfer credentials regularly</li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#config","title":"\u2699\ufe0f Config","text":"<ul> <li>Processor endpoints, per-merchant credentials</li> <li><code>WEBHOOK_SECRET</code>, <code>FILE_PULL_SCHEDULE</code></li> <li><code>CURRENCY_ALLOWLIST</code>, <code>BIN_ALLOWLIST</code></li> <li><code>REASON_CODE_MAP</code>, <code>ISO_FIELD_WHITELIST</code></li> </ul>"},{"location":"10-components/rail-gateway-zimswitch/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>Approval rate drop: check acquirer status, BIN routing config, risk engine flags</li> <li>Recon mismatches: inspect mapping keys (acqRef, authCode, amount/date window)</li> <li>Return spike: analyze reason codes; notify CTS to throttle high-risk merchants</li> </ul> <p>See also: Rail Gateway \u2014 Template and Reason Code mappings in ../20-specs/error-codes.md</p>"},{"location":"10-components/reconciliation-returns/","title":"Reconciliation &amp; Returns Service","text":"<p>The Reconciliation &amp; Returns Service ensures Storo\u2019s books stay aligned with rail statements and handles disputes/returns as first-class flows.</p>"},{"location":"10-components/reconciliation-returns/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Ingest statements/settlement files from rails.  </li> <li>Match against canonical transfers.  </li> <li>Emit settlement or return events.  </li> <li>Queue unmatched items for operator review.  </li> <li>Model returns/disputes as state transitions.</li> </ul>"},{"location":"10-components/reconciliation-returns/#responsibilities","title":"\ud83d\udee0 Responsibilities","text":"<ul> <li>Scheduled pull/ingest of rail statements (files, APIs, on-chain events).  </li> <li>Normalize to internal <code>StatementLine</code> model.  </li> <li>Match to existing transfers (composite keys).  </li> <li>Emit <code>transfers.settled</code> (late confirm) or <code>transfers.returned</code>.  </li> <li>Push unmatched \u2192 exception queue for Operator Console.  </li> <li>Support manual raise of returns.</li> </ul>"},{"location":"10-components/reconciliation-returns/#interfaces","title":"\ud83d\udd0c Interfaces","text":""},{"location":"10-components/reconciliation-returns/#events-consume","title":"Events (consume)","text":"<ul> <li><code>recon.statement.ingested</code></li> </ul>"},{"location":"10-components/reconciliation-returns/#events-emit","title":"Events (emit)","text":"<ul> <li><code>transfers.settled</code> </li> <li><code>transfers.returned</code> </li> <li><code>recon.exception.opened</code> </li> </ul>"},{"location":"10-components/reconciliation-returns/#http","title":"HTTP","text":"<ul> <li><code>POST /returns</code> (manual raise)  </li> <li>Admin: <code>GET /live</code>, <code>GET /ready</code>, <code>GET /metrics</code>, <code>GET /version</code></li> </ul>"},{"location":"10-components/reconciliation-returns/#data-model","title":"\ud83d\uddc4 Data Model","text":"<ul> <li><code>statements</code> (rail, fileId, source, importedAt)  </li> <li><code>statement_lines</code> (id, statementId, externalRef, amount, currency, date, type, reason?)  </li> <li>Matching keys (per rail) typically include: <code>{ externalRef | (acqRef,authCode) | txId } + amount + date window</code>.  </li> <li><code>matches</code> (lineId, transferId, matchedAt)  </li> <li><code>exceptions</code> (id, lineId, status, resolvedAt, operatorId?)  </li> <li><code>outbox_recon</code> </li> </ul>"},{"location":"10-components/reconciliation-returns/#file-specifications-per-rail","title":"\ud83d\udcc4 File Specifications (per rail)","text":"<ul> <li>EFT (Bankserv): settlement and return record layouts, cutoffs, T+N windows.</li> <li>PayShap: real-time exceptions/returns mapping to <code>StatementLine</code>.</li> <li>ZIPIT/RTGS: daily statements and chargeback reason codes.</li> </ul>"},{"location":"10-components/reconciliation-returns/#sequence","title":"\ud83d\udcd0 Sequence","text":"<pre><code>sequenceDiagram\n  participant R as Reconciliation\n  participant Rail as Rail Source\n  participant CTS\n  participant L as Ledger\n\n  Rail--&gt;&gt;R: daily statement file\n  R-&gt;&gt;R: normalize lines\n  R--&gt;&gt;CTS: transfers.settled (if not yet settled)\n  R--&gt;&gt;CTS: transfers.returned (if return/chargeback)\n  R--&gt;&gt;CTS: recon.exception.opened (if unmatched)\n  CTS-&gt;&gt;L: post reversals / settlements\n  Note over CTS,L: Ledger applies Posting Rules to reverse prior settled entries</code></pre>"},{"location":"10-components/reconciliation-returns/#failure-modes","title":"\ud83d\udea8 Failure Modes","text":"<ul> <li>File ingest failed \u2192 pause, retry, operator alert.  </li> <li>Hash mismatch \u2192 reject, re-request file.  </li> <li>High unmatched rate \u2192 escalate ops, inspect Directory/CTS config.  </li> </ul>"},{"location":"10-components/reconciliation-returns/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: match rate, unmatched backlog, return rates.  </li> <li>Logs: structured with transferId, lineId, fileId.  </li> </ul>"},{"location":"10-components/reconciliation-returns/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Encrypt raw statement files.  </li> <li>Least privilege on file source credentials.  </li> </ul>"},{"location":"10-components/reconciliation-returns/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>Unmatched backlog \u2192 operator assigns manually.  </li> <li>High return rate \u2192 throttle merchant, investigate risk.  </li> <li>File delivery gap \u2192 contact partner, reconcile manually.  </li> </ul>"},{"location":"10-components/regulatory-reporting/","title":"Regulatory Reporting Service","text":"<p>Purpose Prepare and submit statutory reports (BoP, goAML) for ZA/ZW; manage schedules, receipts, and retries.</p>"},{"location":"10-components/regulatory-reporting/#responsibilities","title":"Responsibilities","text":"<ul> <li>Aggregate required data from events/services.  </li> <li>Build BoP files/API payloads and goAML STR/CTR submissions.  </li> <li>Manage submission windows, retries, and DLQs.  </li> <li>Store immutable receipts and audit logs.</li> </ul>"},{"location":"10-components/regulatory-reporting/#interfaces","title":"Interfaces","text":""},{"location":"10-components/regulatory-reporting/#inputs","title":"Inputs","text":"<ul> <li>Events: <code>transfers.*</code> (as needed), ledger postings (read-only API).  </li> <li>Internal reads: CTS/Ledger/Compliance summaries.</li> </ul>"},{"location":"10-components/regulatory-reporting/#outputs","title":"Outputs","text":"<ul> <li>Files/APIs: BoP to SARB authorized dealer; goAML to FIC/FIU.  </li> <li>Events: <code>reg.submission.created</code>, <code>reg.submission.acknowledged</code>, <code>reg.submission.failed</code>.</li> </ul>"},{"location":"10-components/regulatory-reporting/#data-model","title":"Data Model","text":"<ul> <li><code>reg_submissions</code> (id, type, scope, payloadRef, status, submittedAt, receiptRef).  </li> <li><code>outbox_reg</code> for event emission.  </li> <li>Artifacts: encrypted payloads and receipts.</li> </ul>"},{"location":"10-components/regulatory-reporting/#runbooks","title":"Runbooks","text":"<ul> <li>Submission failure: retry with backoff; escalate per contact matrix.  </li> <li>Corrections: T+1 resubmission referencing prior filing.  </li> </ul>"},{"location":"10-components/regulatory-reporting/#security","title":"Security","text":"<ul> <li>Least privilege to source systems; encrypt at rest; PII minimization in artifacts.  </li> <li>Access controlled endpoints for manual replay.</li> </ul>"},{"location":"10-components/woocommerce/","title":"WooCommerce \u2194\ufe0f Storo CTS Plugin (USDC Example)","text":"<p>This document describes a production\u2011ready WooCommerce plugin that connects a merchant\u2019s store to Storo\u2019s Canonical Transfer Service (CTS) to accept USDC (AVAX) payments. It covers integration flows, mapping, idempotency, and operational concerns with Mermaid diagrams.</p>"},{"location":"10-components/woocommerce/#1-objectives","title":"1) Objectives","text":"<ul> <li>Let WooCommerce merchants accept USDC at checkout using Storo CTS.</li> <li>Keep the storefront UX native (Woo buttons, order notes, refunds) while offloading payment orchestration to CTS.</li> <li>Ensure idempotency, observability, and clear failure handling.</li> </ul>"},{"location":"10-components/woocommerce/#2-highlevel-architecture","title":"2) High\u2011Level Architecture","text":"<pre><code>flowchart LR\n  subgraph Shopper\n    U[Customer Browser]\n  end\n\n  subgraph Woo[Merchant WooCommerce]\n    WC[WooCore + Orders]\n    P[Storo Payment Gateway Plugin]\n    WH[Woo REST Webhooks]\n  end\n\n  subgraph Storo\n    API[CTS API]\n    BUS[events.transfers.*]\n    GW[USDC Gateway]\n  end\n\n  U --&gt;|\"Checkout: Place Order\"| WC\n  WC --&gt; P\n  P --&gt;|\"POST /transfers (Idempotency-Key)\"| API\n  API --&gt;|\"events.transfers.submitted.usdc\"| BUS\n  BUS --&gt; GW\n  GW --&gt;|\"accepted/settled\"| BUS\n  BUS --&gt;|\"webhook callback\"| WH\n  WH --&gt;|\"update order meta/status\"| WC\n</code></pre>"},{"location":"10-components/woocommerce/#3-checkout-sequence-happy-path-nonblocking-settlement","title":"3) Checkout Sequence (Happy Path, non\u2011blocking settlement)","text":"<pre><code>sequenceDiagram\n  autonumber\n  participant U as Shopper\n  participant WC as WooCommerce\n  participant P as Storo Plugin\n  participant API as CTS/API\n  participant BUS as EventBus\n  participant GW as Gateway(USDC)\n  participant WH as Woo Webhook Endpoint\n\n  U-&gt;&gt;WC: Place order (payment method = Storo USDC)\n  WC-&gt;&gt;P: on_payment_process(order)\n  Note over P: Build canonical request + Idempotency-Key\n  P-&gt;&gt;API: POST /transfers {Idempotency-Key}\n  API--&gt;&gt;P: 201 {transferId, state: SUBMITTED}\n  P-&gt;&gt;WC: mark order as \"on-hold\" (awaiting crypto payment)\n  API-&gt;&gt;BUS: emit transfers.submitted.usdc (async)\n  BUS-&gt;&gt;GW: deliver submitted.usdc\n  GW-&gt;&gt;BUS: events.transfers.accepted\n  BUS-&gt;&gt;WH: POST /wc/storo/webhook {accepted}\n  WH-&gt;&gt;WC: add order note \"Payment accepted\"\n  GW-&gt;&gt;BUS: events.transfers.settled\n  BUS-&gt;&gt;WH: POST /wc/storo/webhook {settled}\n  WH-&gt;&gt;WC: set status \"processing\" (or \"completed\")\n  WH--&gt;&gt;U: Thank\u2011you page reflects paid</code></pre> <p>Key points</p> <ul> <li>The plugin returns the shopper immediately after CTS persists &amp; returns <code>SUBMITTED</code>.</li> <li>Order remains On\u2011Hold until <code>accepted</code>/<code>settled</code> webhook updates it.</li> </ul>"},{"location":"10-components/woocommerce/#4-data-mapping-woo-cts","title":"4) Data Mapping (Woo \u2194\ufe0f CTS)","text":"Woo Source CTS Target Notes <code>order_id</code> <code>externalRef</code> Stable reference from Woo to CTS <code>order_total</code> <code>amount.value</code> / <code>amount.currency</code> Currency can be <code>USD</code> for USDC 1:1; FX rules configurable <code>billing_email</code>/<code>user_id</code> <code>payer</code> PII encrypted server\u2011side; plugin sends IDs, not PII, when possible Merchant USDC dest (wallet/tenant) <code>payee</code> Provisioned during plugin onboarding <code>Idempotency-Key</code> Header + <code>bodyHash</code> e.g., <code>woocommerce:&lt;storeId&gt;:order:&lt;orderId&gt;</code> <code>payment_method_title</code> <code>metadata.gateway</code> e.g., <code>storo-usdc</code> <p>Canonical request (example)</p> <pre><code>{\n  \"tenantId\": \"tnt_demo\",\n  \"intent\": \"PUSH\",\n  \"amount\": { \"value\": \"49.99\", \"currency\": \"USD\" },\n  \"payer\": { \"type\": \"WALLET\", \"id\": \"shopper-123\" },\n  \"payee\": { \"type\": \"WALLET\", \"provider\": \"USDC_AVAX\", \"id\": \"0xMERCHANT...\" },\n  \"externalRef\": \"woo_100045\",\n  \"metadata\": { \"platform\": \"woocommerce\", \"plugin_version\": \"1.0.0\" }\n}\n</code></pre>"},{"location":"10-components/woocommerce/#5-plugin-components","title":"5) Plugin Components","text":"<pre><code>graph TD\n  subgraph Plugin\n    H[\"Settings UI (Admin)\"]\n    G[\"Gateway Class (WC_Payment_Gateway)\"]\n    C[\"Client (CTS SDK)\"]\n    W[\"Webhook Controller\"]\n    I[\"Idempotency Service\"]\n    L[\"Logger/Telemetry\"]\n  end\n  H --&gt; G\n  G --&gt; I\n  G --&gt; C\n  W --&gt; G\n  G --&gt; L\n  W --&gt; L\n</code></pre> <p>Responsibilities</p> <ul> <li>Settings UI: API keys, merchant wallet, network (AVAX), test mode, webhook secret.</li> <li>Gateway Class: Implements <code>process_payment</code>, order status transitions, thank\u2011you handling.</li> <li>CTS Client: Retries, timeouts, schema version header, <code>Idempotency-Key</code>.</li> <li>Webhook Controller: Verifies signature; updates order status on <code>accepted</code>/<code>settled</code>/<code>returned</code>/<code>failed</code>.</li> <li>Idempotency Service: Stable key generation + replay safety on Woo retries.</li> <li>Logger: Structured logs with <code>order_id</code>, <code>transferId</code>, <code>tenantId</code> (no PII fields).</li> </ul>"},{"location":"10-components/woocommerce/#6-order-state-machine-woo-cts","title":"6) Order State Machine (Woo + CTS)","text":"<pre><code>stateDiagram-v2\n  [*] --&gt; PENDING\n  PENDING --&gt; ON_HOLD: CTS POST 201 (SUBMITTED)\n  ON_HOLD --&gt; PROCESSING: webhook accepted/settled\n  PROCESSING --&gt; COMPLETED: fulfillment done\n  ON_HOLD --&gt; FAILED: webhook failed/returned\n  PENDING --&gt; FAILED: validation/compliance deny\n  COMPLETED --&gt; [*]\n  FAILED --&gt; [*]</code></pre> <p>Notes</p> <ul> <li>If <code>accepted</code> arrives first, move to Processing, then to Completed on <code>settled</code>.</li> <li>If <code>returned/failed</code>, move to Failed and expose reason in order notes.</li> </ul>"},{"location":"10-components/woocommerce/#7-webhook-contract-from-storo-woo","title":"7) Webhook Contract (from Storo \u2192 Woo)","text":"<p>Endpoint: <code>POST https://merchant.store/wc/storo/webhook</code></p> <p>Headers: <code>X-Storo-Signature</code>, <code>X-Storo-Timestamp</code>, <code>X-Request-Id</code></p> <p>Body (accepted)</p> <pre><code>{\n  \"type\": \"events.transfers.accepted\",\n  \"transferId\": \"tr_123\",\n  \"externalRef\": \"woo_100045\",\n  \"occurredAt\": \"2025-08-28T12:34:56Z\",\n  \"envelope\": {\"v\":1},\n  \"metadata\": {\"rail\":\"usdc\"}\n}\n</code></pre> <p>Body (settled) is identical with <code>type = events.transfers.settled</code>.</p> <p>Webhook handler behavior</p> <ol> <li>Verify signature \u2192 401 if invalid.</li> <li>Lookup <code>order_id</code> via <code>externalRef</code>.</li> <li>Idempotent update of order status; add note with timestamp + <code>transferId</code>.</li> </ol>"},{"location":"10-components/woocommerce/#8-usdc-flow-rails-specifics","title":"8) USDC Flow (rails specifics)","text":"<pre><code>flowchart LR\n  P[Plugin] --&gt; API[CTS]\n  API --&gt; OUTBOX[Outbox]\n  OUTBOX --&gt; BUS[events.transfers.submitted.usdc]\n  BUS --&gt; GW[USDC Gateway]\n  GW --&gt;|submit tx on AVAX| CHAIN[(AVAX C-Chain)]\n  CHAIN --&gt; GW\n  GW --&gt; BUS\n  BUS --&gt; WH[Woo Webhook]</code></pre> <ul> <li>Gateway uses a relayer to handle gas; merchant receives USDC on their AVAX address.</li> <li>CTS does not block Woo checkout waiting for settlement.</li> </ul>"},{"location":"10-components/woocommerce/#9-errors-retries","title":"9) Errors &amp; Retries","text":"Situation Source Plugin Behavior Compliance deny CTS sync response 422 Fail payment; order \u2192 Failed; show friendly error Routing unavailable CTS 502 Keep order Pending; show retry button; exponential backoff client\u2011side Webhook missed Network issue Admin action: \u201cRe\u2011deliver last 24h\u201d button; plugin can poll <code>GET /transfers/:id</code> as fallback Duplicate checkout Shopper retries Same Idempotency\u2011Key \u2192 plugin handles 200/201 idempotently"},{"location":"10-components/woocommerce/#10-configuration-onboarding","title":"10) Configuration &amp; Onboarding","text":"<ul> <li>API Keys: Tenant\u2011scoped key from Storo Console.</li> <li>Merchant Wallet (USDC): Provided during onboarding; validated against network.</li> <li>Webhook Secret: Rotate via plugin UI; validate on each callback.</li> <li>Test Mode: Sandboxed CTS tenant &amp; USDC test network.</li> </ul>"},{"location":"10-components/woocommerce/#11-observability","title":"11) Observability","text":"<ul> <li>Order Notes include transfer lifecycle markers.</li> <li>Admin Dashboard Widget: last 50 events, settlement latency p95, failure counts.</li> <li>Logging: Structured (order_id, transferId, tenantId, type). No PII.</li> </ul>"},{"location":"10-components/woocommerce/#12-example-admin-runbook","title":"12) Example Admin Runbook","text":"<ol> <li>Order stuck On\u2011Hold &gt; 10 min \u2192 check webhook delivery logs.</li> <li>If missing, press Re\u2011deliver in Storo Console or poll <code>GET /transfers/:id</code>.</li> <li>If <code>returned/failed</code>, contact customer; optionally retry new payment method.</li> </ol>"},{"location":"10-components/woocommerce/#13-security","title":"13) Security","text":"<ul> <li>HMAC\u2011signed webhooks; 5\u2011minute timestamp window.</li> <li>Least\u2011privilege API key; rotate every 90 days.</li> <li>PII never stored in plugin; only references &amp; IDs.</li> </ul>"},{"location":"10-components/woocommerce/#14-future-enhancements","title":"14) Future Enhancements","text":"<ul> <li>Refunds: Map Woo refunds \u2192 <code>transfers.pull</code> or reversal flow.</li> <li>Partial Payments: Split shipments \u2192 multiple transferIds.</li> <li>Multi\u2011rail fallback: If USDC unavailable, offer Zimswitch card or M\u2011Pesa.</li> </ul>"},{"location":"10-mvp/","title":"\ud83d\udce6 Storo MVP \u2013 Pilot with 20 Merchants","text":""},{"location":"10-mvp/#goal","title":"\ud83c\udfaf Goal","text":"<p>Demonstrate the end-to-end viability of Storo\u2019s Canonical Transfer Service (CTS) and POS/payment ecosystem in a controlled pilot with 20 merchants. The MVP validates:</p> <ul> <li>Unified transfer orchestration (CTS front-door)</li> <li>USDC-based merchant acceptance (POS / wallet QR)</li> <li>Compliance + routing flows in production conditions</li> <li>Idempotency, event publishing, and state tracking</li> <li>Merchant onboarding, cash-out, and reporting</li> </ul>"},{"location":"10-mvp/#scope","title":"\ud83d\udd11 Scope","text":"<ul> <li> <p>In scope:</p> </li> <li> <p>CTS API (create &amp; fetch transfers)</p> </li> <li>Compliance screening before submission</li> <li>Directory &amp; Routing service integration</li> <li>POS App (Android, QR/NFC) for 20 merchants</li> <li>Merchant Dashboard (basic web + WhatsApp notif)</li> <li>Off-ramp partner (Encryptus/FiveWest) for cash-out</li> <li> <p>Event streaming (<code>transfers.*</code>) into observability</p> </li> <li> <p>Out of scope (future):</p> </li> <li> <p>Card issuance (Visa/Mastercard rails)</p> </li> <li>Advanced inventory module</li> <li>Credit lines/float management</li> </ul>"},{"location":"10-mvp/#architecture-mvp-slice","title":"\ud83c\udfd7 Architecture (MVP slice)","text":"<ul> <li>Clients: Merchant POS app (Sunmi/PAX devices) + Merchant Dashboard</li> <li> <p>Core: Canonical Transfer Service (CTS)</p> </li> <li> <p>Deduplication + normalization</p> </li> <li>Pre-screening (Compliance)</li> <li>Routing (Directory)</li> <li>Outbox pattern for event publishing</li> <li>Rails: USDC over AVAX chain (custodial wallets, relayer)</li> <li>Partners: Encryptus API for fiat cash-out</li> <li>Observability: metrics (latency, transfer states), logs, tracing</li> </ul> <pre><code>flowchart LR\n    POS[Merchant POS/QR] --&gt; |POST /transfers| CTS\n    Dashboard --&gt; |API| CTS\n    CTS --&gt; |Screen| Compliance\n    CTS --&gt; |Route| Directory\n    CTS --&gt; |Emit events| Outbox --&gt; EventBus\n    CTS --&gt; |Submit USDC tx| AVAX\n    AVAX --&gt; |Confirm| CTS\n    CTS --&gt; |Cash-out| OffRamp[Encryptus/FiveWest]\n    EventBus --&gt; Observability</code></pre>"},{"location":"10-mvp/#merchant-pilot-experience","title":"\ud83d\udcf2 Merchant Pilot Experience","text":"<ul> <li>20 merchants onboarded with custodial USDC wallets.</li> <li>Accept customer payments via QR or NFC.</li> <li>Merchant app shows real-time settlement state (<code>INITIATED \u2192 SUBMITTED \u2192 SETTLED</code>).</li> <li> <p>Option to:</p> </li> <li> <p>Retain USDC for restocking with suppliers.</p> </li> <li>Cash out to ZAR via off-ramp (real-time, small fees).</li> </ul>"},{"location":"10-mvp/#data-model-mvp","title":"\ud83d\uddc4 Data Model (MVP)","text":"<ul> <li><code>transfers</code>, <code>transfer_events</code>, <code>outbox_transfers</code> tables as per CTS design.</li> <li>Merchant registry: <code>{merchantId, walletAddr, POS_deviceId, tenantId}</code>.</li> <li>Off-ramp logs: <code>{merchantId, transferId, fiatAmount, provider}</code>.</li> </ul>"},{"location":"10-mvp/#kpis-for-pilot","title":"\ud83d\udcca KPIs for Pilot","text":"<ul> <li>Throughput: \u2265 100 transfers/day across 20 merchants.</li> <li>Latency: p95 &lt; 2.5s from POS \u2192 state=SUBMITTED.</li> <li>Reliability: \u2265 99% transfers reach SETTLED or FAILED with event trail.</li> <li>Merchant NPS: qualitative feedback on usability, cash-out, reporting.</li> </ul>"},{"location":"10-mvp/#runbook-pilot-specific","title":"\ud83d\udcd8 Runbook (Pilot-Specific)","text":"<ul> <li>If POS device fails \u2192 replace via spare pool (20% buffer).</li> <li>If compliance service down \u2192 fail-safe: reject submissions.</li> <li>If AVAX relayer gas issues \u2192 auto-fund hot wallet from treasury.</li> <li>If off-ramp unavailable \u2192 queue cash-outs, notify merchants.</li> </ul>"},{"location":"10-mvp/#next-steps-after-pilot","title":"\ud83d\ude80 Next Steps after Pilot","text":"<ol> <li>Expand to 100 merchants.</li> <li>Add card issuance (USDC debit card).</li> <li>Layer inventory/B2B module.</li> <li>Explore credit line + float minimization strategy.</li> </ol>"},{"location":"20-specs/api-canonical-transfer/","title":"Canonical Transfer API","text":"<p>The Canonical Transfer Service (CTS) exposes the primary API for creating and retrieving transfers.</p>"},{"location":"20-specs/api-canonical-transfer/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Provide a unified API for initiating transfers.  </li> <li>Normalize requests into canonical model.  </li> <li>Return transfer state and timeline.</li> </ul>"},{"location":"20-specs/api-canonical-transfer/#endpoints","title":"\ud83d\udd0c Endpoints","text":""},{"location":"20-specs/api-canonical-transfer/#post-transfers","title":"<code>POST /transfers</code>","text":"<p>Creates a new transfer.</p> <p>Headers - <code>Idempotency-Key</code>: unique key per client request.</p> <p>Request Body <pre><code>{\n  \"tenantId\": \"tn_456\",\n  \"payer\": { \"accountId\": \"acct_001\" },\n  \"payee\": { \"accountId\": \"acct_999\" },\n  \"amount\": { \"value\": 1000, \"currency\": \"USD\" },\n  \"rail\": \"usdc-algo\",\n  \"intent\": \"PUSH\",\n  \"externalRef\": \"ext_abc123\",\n  \"metadata\": { \"invoiceId\": \"inv_555\" }\n}\n</code></pre></p> <p>Response <pre><code>{\n  \"transferId\": \"tr_12345\",\n  \"state\": \"SUBMITTED\",\n  \"nextAction\": \"await_settlement\"\n}\n</code></pre></p> <p>Errors - <code>409 Conflict</code> \u2013 duplicate idempotency key. - <code>422 EntityDenied</code> \u2013 compliance block. - <code>502 RoutingUnavailable</code> \u2013 directory lookup failed. - <code>500 RailUnavailable</code> \u2013 rail gateway issue.</p>"},{"location":"20-specs/api-canonical-transfer/#get-transfersid","title":"<code>GET /transfers/:id</code>","text":"<p>Returns transfer details and event timeline.</p> <p>Response <pre><code>{\n  \"transferId\": \"tr_12345\",\n  \"tenantId\": \"tn_456\",\n  \"state\": \"SETTLED\",\n  \"events\": [\n    { \"type\": \"transfers.initiated\", \"occurredAt\": \"...\" },\n    { \"type\": \"transfers.submitted.usdc\", \"occurredAt\": \"...\" },\n    { \"type\": \"transfers.settled\", \"occurredAt\": \"...\" }\n  ]\n}\n</code></pre></p>"},{"location":"20-specs/api-canonical-transfer/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: POST latency, error rates, transfer creation/sec.  </li> <li>Logs: transferId, tenantId, eventId.  </li> <li>Traces: full timeline correlation.</li> </ul>"},{"location":"20-specs/chart-of-accounts/","title":"Chart of Accounts (Storo)","text":"<p>The Chart of Accounts (CoA) is the backbone of Storo\u2019s ledger. It defines all account types, their normal balances, and how they roll into financial statements. Based on lessons from Accounting for Developers and adapted to payments systems.</p>"},{"location":"20-specs/chart-of-accounts/#principles","title":"Principles","text":"<ul> <li>Double-entry: Every posting must debit one account and credit another.  </li> <li>Normal balance: Each account has a default side (debit or credit) where increases are recorded.  </li> <li>Hierarchy: Top-level categories are fixed, sub-accounts can be extended per tenant/product.  </li> <li>Accrual basis: Income and expenses recognized when earned, not just when cash moves.  </li> </ul>"},{"location":"20-specs/chart-of-accounts/#top-level-categories","title":"Top-Level Categories","text":""},{"location":"20-specs/chart-of-accounts/#1-assets-normal-balance-debit","title":"1. Assets (Normal Balance: Debit)","text":"<ul> <li>Liquidity (Cash/USDC Pool) </li> <li>Settlement In Transit (funds in process of clearing)  </li> <li>Accounts Receivable (e.g., unsettled merchant payments)  </li> <li>Inventory / Collateral (if applicable for product extensions)  </li> </ul>"},{"location":"20-specs/chart-of-accounts/#2-liabilities-normal-balance-credit","title":"2. Liabilities (Normal Balance: Credit)","text":"<ul> <li>User Balances (owed to end-users)  </li> <li>Merchant Payables (owed to merchants)  </li> <li>Deferred Revenue (collected in advance, not yet earned)  </li> <li>Chargebacks/Returns Payable </li> </ul>"},{"location":"20-specs/chart-of-accounts/#3-equity-normal-balance-credit","title":"3. Equity (Normal Balance: Credit)","text":"<ul> <li>Contributed Capital </li> <li>Retained Earnings (prior net income carried forward)  </li> <li>Current Period Net Income (closed at end of period into Retained Earnings)  </li> </ul>"},{"location":"20-specs/chart-of-accounts/#4-revenue-normal-balance-credit","title":"4. Revenue (Normal Balance: Credit)","text":"<ul> <li>Transaction Fees Earned </li> <li>FX Spread Income </li> <li>Other Service Fees </li> </ul>"},{"location":"20-specs/chart-of-accounts/#5-expenses-normal-balance-debit","title":"5. Expenses (Normal Balance: Debit)","text":"<ul> <li>Processing Costs (rail fees, partner charges)  </li> <li>Chargeback Losses </li> <li>Operational Expenses (infra, compliance overhead)  </li> </ul>"},{"location":"20-specs/chart-of-accounts/#examples","title":"Examples","text":"<p>User Deposit (USDC \u2192 Wallet) - Debit Liquidity (Asset) - Credit User Balances (Liability)  </p> <p>Merchant Payout (USDC \u2192 Merchant) - Debit Merchant Payables (Liability) - Credit Liquidity (Asset)  </p> <p>Fee Collection - Debit User Balance (Liability) - Credit Transaction Fees Earned (Revenue)  </p> <p>Chargeback - Debit Chargebacks Payable (Liability) - Credit Merchant Payables (Liability)  </p>"},{"location":"20-specs/chart-of-accounts/#notes","title":"Notes","text":"<ul> <li>Accounts can be extended per-tenant under the same category.  </li> <li>All postings must reconcile to ensure Assets = Liabilities + Equity.  </li> </ul>"},{"location":"20-specs/data-retention-pii/","title":"Data Retention &amp; PII Handling","text":"<p>The data retention policy governs how long Storo stores sensitive data and how it is redacted.</p>"},{"location":"20-specs/data-retention-pii/#principles","title":"\ud83c\udfaf Principles","text":"<ul> <li>Minimize PII stored in core DBs.  </li> <li>Encrypt at rest all raw rail payloads.  </li> <li>Retain only what\u2019s needed for audit, compliance, dispute resolution.  </li> <li>Expire or redact data after retention window.</li> </ul>"},{"location":"20-specs/data-retention-pii/#storage-classes","title":"\ud83d\udce6 Storage Classes","text":"<ul> <li>Canonical DBs (CTS, Ledger, Compliance, Directory, Recon) </li> <li>Store IDs, references, metadata only.  </li> <li> <p>No raw PII beyond accountId/tenantId.  </p> </li> <li> <p>Blob Store (encrypted) </p> </li> <li>Stores raw rail payloads, statements.  </li> <li>Access tightly controlled, time-limited.  </li> </ul>"},{"location":"20-specs/data-retention-pii/#retention-windows","title":"\u23f3 Retention Windows","text":"<ul> <li>Transfer &amp; ledger events: 7 years (audit requirement).  </li> <li>Raw rail payloads: 18 months.  </li> <li>Compliance screening results: 5 years.  </li> <li>Operator actions (audit log): 7 years.  </li> </ul>"},{"location":"20-specs/data-retention-pii/#redaction","title":"\ud83e\uddf9 Redaction","text":"<ul> <li>After expiry, replace PII fields with irreversible hashes.  </li> <li>Keep metadata (transferId, amounts, dates).  </li> </ul>"},{"location":"20-specs/data-retention-pii/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>All PII encrypted at rest + in transit.  </li> <li>Logs redact sensitive fields (names, IDs, PANs).  </li> <li>Access scoped to tenant &amp; role.  </li> </ul>"},{"location":"20-specs/data-retention-pii/#popia-cross-border-transfers-za","title":"\ud83c\udf0d POPIA Cross-Border Transfers (ZA)","text":"<ul> <li>Assess adequacy for destination; if inadequate, add contractual safeguards and consent where required.  </li> <li>Maintain a register of cross-border transfers with purpose, destinations, and safeguards.  </li> <li>Ensure processors/sub-processors contractually meet POPIA obligations.  </li> <li>Do not include PII in event payloads unless strictly necessary; prefer references.</li> </ul>"},{"location":"20-specs/data-retention-pii/#runbooks","title":"\ud83e\udded Runbooks","text":"<ul> <li>Retention job failure \u2192 retry, escalate if backlog &gt; 24h.  </li> <li>Legal hold \u2192 suspend deletion for specific entities.  </li> <li>PII exposure incident \u2192 trigger breach protocol immediately.  </li> </ul>"},{"location":"20-specs/error-codes/","title":"Error Taxonomy &amp; Codes","text":"<p>Consistent error codes across APIs.</p>"},{"location":"20-specs/error-codes/#principles","title":"\ud83d\udd11 Principles","text":"<ul> <li>Stable, documented codes.</li> <li>Human-readable messages.</li> <li>Machine-actionable (clients can retry/failover).</li> </ul>"},{"location":"20-specs/error-codes/#categories","title":"\ud83d\uddc2 Categories","text":"<ul> <li>4xx \u2014 Client Errors</li> <li><code>40001</code> Invalid request schema</li> <li><code>40002</code> Idempotency key missing/invalid</li> <li><code>42201</code> Compliance screening: denied</li> <li> <p><code>42202</code> Directory route not found</p> </li> <li> <p>5xx \u2014 Server Errors</p> </li> <li><code>50001</code> Rail adapter unavailable</li> <li><code>50002</code> Outbox publish failure</li> <li><code>50003</code> Ledger posting failed</li> </ul>"},{"location":"20-specs/error-codes/#rail-reason-code-mappings-informative","title":"Rail Reason Code Mappings (informative)","text":"<ul> <li>Mobile Money (EcoCash/MTN/Airtel)</li> <li>Partner decline \u2192 <code>MM_DECLINED</code></li> <li>Insufficient funds \u2192 <code>MM_INSUFFICIENT_FUNDS</code></li> <li> <p>Timeout/no response \u2192 <code>MM_TIMEOUT</code></p> </li> <li> <p>PayShap</p> </li> <li>Proxy invalid \u2192 <code>PS_PROXY_INVALID</code></li> <li>Beneficiary not available \u2192 <code>PS_BENEFICIARY_UNAVAILABLE</code></li> <li>Timeout \u2192 <code>PS_TIMEOUT</code></li> </ul> <p>Exact partner code \u2192 Storo reason maps to be versioned per gateway.</p>"},{"location":"20-specs/error-codes/#notes","title":"\ud83d\udccc Notes","text":"<p>Expand per component (CTS, Ledger, Gateways). All error responses MUST include: <pre><code>{\n  \"code\": \"42201\",\n  \"message\": \"Entity denied by compliance\",\n  \"transferId\": \"tr_12345\",\n  \"timestamp\": \"2025-08-27T12:00:00Z\"\n}\n</code></pre></p>"},{"location":"20-specs/events/","title":"Event Specifications","text":"<p>The Event model defines the envelope and catalog of all domain events emitted across Storo services.</p>"},{"location":"20-specs/events/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Provide a single canonical envelope for all events.  </li> <li>Define the catalog of event types (<code>transfers.*</code>, <code>ledger.*</code>, etc.).  </li> <li>Ensure idempotency and consistency across services.  </li> </ul>"},{"location":"20-specs/events/#event-envelope-v-field","title":"\ud83d\udce6 Event Envelope (v field)","text":"<pre><code>{\n  \"eventId\": \"uuid\",\n  \"type\": \"transfers.settled\",\n  \"v\": 1,\n  \"occurredAt\": \"2025-08-26T10:15:01Z\",\n  \"transferId\": \"tr_123\",\n  \"tenantId\": \"tn_456\",\n  \"payload\": { \"amount\": { \"value\": 1000, \"currency\": \"USD\" } }\n}\n</code></pre> <p>Fields - <code>eventId</code> \u2013 unique ID (UUIDv7 recommended). - <code>type</code> \u2013 dot-delimited string category (see catalog). - <code>v</code> \u2013 envelope schema version (integer, starting at 1). - <code>occurredAt</code> \u2013 ISO8601 UTC timestamp. - <code>transferId</code> \u2013 optional link to transfer (if relevant). - <code>tenantId</code> \u2013 tenant scoping. - <code>payload</code> \u2013 type-specific content.  </p> <p>Optional enrichment (additive) - <code>kycTier</code> \u2013 KYC tier for context (T0|T1|T2). - <code>riskScore</code> \u2013 screening risk score (0-100). - <code>exchangeControlRef</code> \u2013 reference for exchange control/BoP. - <code>taxCode</code> \u2013 tax/VAT code for fee lines. - <code>proxyType</code> \u2013 proxy type for PayShap (cell|email|id).  </p> <p>Additive fields do not break consumers; treat unknown fields as optional.</p>"},{"location":"20-specs/events/#event-catalog","title":"\ud83d\udcda Event Catalog","text":""},{"location":"20-specs/events/#transfers","title":"Transfers","text":"<ul> <li><code>transfers.initiated</code> </li> <li><code>transfers.submitted.&lt;rail&gt;</code> </li> <li><code>transfers.accepted</code> </li> <li><code>transfers.settled</code> </li> <li><code>transfers.returned</code> </li> <li><code>transfers.failed</code> </li> </ul>"},{"location":"20-specs/events/#ledger","title":"Ledger","text":"<ul> <li><code>ledger.posting.created</code> </li> <li><code>ledger.balance.updated</code> </li> </ul>"},{"location":"20-specs/events/#compliance","title":"Compliance","text":"<ul> <li><code>compliance.entity.flagged</code> </li> </ul>"},{"location":"20-specs/events/#reconciliation","title":"Reconciliation","text":"<ul> <li><code>recon.statement.ingested</code> </li> <li><code>recon.exception.opened</code> </li> </ul>"},{"location":"20-specs/events/#directory","title":"Directory","text":"<ul> <li><code>directory.version.updated</code> </li> </ul>"},{"location":"20-specs/events/#idempotency-rules","title":"\ud83d\udd01 Idempotency Rules","text":"<ul> <li>Event consumers must dedupe using <code>eventId</code>.  </li> <li>For transfer lifecycle, <code>(transferId,type)</code> must be unique.  </li> <li>Outbox pattern ensures atomic persistence + publish.</li> </ul>"},{"location":"20-specs/events/#versioning","title":"\ud83e\udded Versioning","text":"<ul> <li>Envelope: <code>v</code> is the envelope schema version (current: 1).  </li> <li>Additive changes (new optional fields) require no version bump.  </li> <li>Breaking payload changes introduce a new <code>type</code> version (e.g., <code>transfers.settled.v2</code>) with dual-publish during migration.</li> </ul>"},{"location":"20-specs/events/#observability","title":"\ud83d\udcca Observability","text":"<ul> <li>Metrics: events/sec by type, lag from occurredAt \u2192 consumed.  </li> <li>Audit: immutable event store recommended for replay/debug.</li> </ul>"},{"location":"20-specs/external-integrations/","title":"External Integrations \u2014 Edge Map","text":"<p>This file maps out external systems Storo must eventually connect to.  </p>"},{"location":"20-specs/external-integrations/#rails","title":"\ud83c\udf0d Rails","text":"<ul> <li>EcoCash / Mobile Money (ZW) \u2192 push-only flows, STK prompts.</li> <li>Zimswitch / OPPWA \u2192 ISO 8583 + JSON APIs, card-present &amp; online.</li> <li>PayShap (SA) \u2192 proxy-based instant payments.</li> <li>USDC/Algorand \u2192 blockchain adapter.</li> <li>EFT/RTGS (SA) \u2192 batch payments, settlement via SARB.</li> </ul>"},{"location":"20-specs/external-integrations/#banks-rtgs","title":"\ud83c\udfe6 Banks &amp; RTGS","text":"<ul> <li>South Africa: NPS, EFT clearing, RTGS.</li> <li>Zimbabwe: Zimswitch settlement partners.</li> </ul>"},{"location":"20-specs/external-integrations/#regulatory","title":"\u2696\ufe0f Regulatory","text":"<ul> <li>South Africa: FIC reporting APIs.</li> <li>Zimbabwe: FIU suspicious activity reporting.</li> <li>Cross-border: FATF Travel Rule (TBD).</li> </ul>"},{"location":"20-specs/external-integrations/#identity-kyc","title":"\ud83c\udd94 Identity &amp; KYC","text":"<ul> <li>Optional MOSIP integration for National ID checks.</li> <li>Local credit bureau lookups (future).</li> <li>SIM-swap signals (mobile operators / third-party providers) for risk.</li> <li>AVS (account verification) and bank account name-matching (ZA) for pull payouts.</li> </ul>"},{"location":"20-specs/external-integrations/#file-specifications-recon","title":"\ud83d\udcc4 File Specifications (Recon)","text":"<ul> <li>Bankserv EFT: settlement/returns file layouts and cutoffs (link: add under recon).</li> <li>PayShap: exception/return notifications mapping.</li> <li>ZIPIT/RTGS: daily statements and reason codes.</li> </ul>"},{"location":"20-specs/external-integrations/#notes","title":"\ud83d\udccc Notes","text":"<p>Each integration will have its own <code>rail-gateway-&lt;name&gt;.md</code> or <code>integration-&lt;name&gt;.md</code>.</p>"},{"location":"20-specs/fixtures/","title":"Golden Fixtures","text":"<p>Golden fixtures are canonical JSON examples used to validate contracts (events and APIs) across services and in CI pipelines.</p>"},{"location":"20-specs/fixtures/#scope","title":"Scope","text":"<ul> <li>Event envelope and payload examples (envelope <code>v=1</code>).</li> <li>Canonical Transfer API requests/responses.</li> <li>Per-rail gateway event samples for <code>accepted/settled/returned/failed</code>.</li> </ul>"},{"location":"20-specs/fixtures/#usage","title":"Usage","text":"<ul> <li>Validate outbound events from providers against fixture schemas.</li> <li>Validate inbound event consumers via golden test vectors.</li> <li>Reference fixtures in CI <code>contract-validate</code> job (see <code>docs/50-repo-structure/ci-cd.md</code>).</li> </ul>"},{"location":"20-specs/fixtures/#examples","title":"Examples","text":""},{"location":"20-specs/fixtures/#event-transferssettled-v1","title":"Event: transfers.settled (v1)","text":"<pre><code>{\n  \"eventId\": \"018f3d20-1111-7c89-b1e3-7a7f5d3b9b10\",\n  \"type\": \"transfers.settled\",\n  \"v\": 1,\n  \"occurredAt\": \"2025-08-26T10:15:01Z\",\n  \"transferId\": \"tr_12345\",\n  \"tenantId\": \"tn_67890\",\n  \"payload\": {\n    \"amount\": { \"value\": 1000, \"currency\": \"USD\" },\n    \"rail\": \"usdc-algo\"\n  }\n}\n</code></pre>"},{"location":"20-specs/fixtures/#api-post-transfers-request","title":"API: POST /transfers request","text":"<pre><code>{\n  \"tenantId\": \"tn_456\",\n  \"payer\": { \"accountId\": \"acct_001\" },\n  \"payee\": { \"accountId\": \"acct_999\" },\n  \"amount\": { \"value\": 1000, \"currency\": \"USD\" },\n  \"rail\": \"usdc-algo\",\n  \"intent\": \"PUSH\",\n  \"externalRef\": \"ext_abc123\",\n  \"metadata\": { \"invoiceId\": \"inv_555\" }\n}\n</code></pre>"},{"location":"20-specs/fixtures/#api-post-transfers-response","title":"API: POST /transfers response","text":"<pre><code>{\n  \"transferId\": \"tr_12345\",\n  \"state\": \"SUBMITTED\",\n  \"nextAction\": \"await_settlement\"\n}\n</code></pre>"},{"location":"20-specs/fx-policy/","title":"FX Policy (USD/ZAR/ZWL)","text":"<p>Defines quote sources, TTL, and audit requirements for FX conversions in supported corridors.</p>"},{"location":"20-specs/fx-policy/#quote-sources","title":"Quote Sources","text":"<ul> <li>RBZ auction (ZW) vs Market providers (ZA) \u2014 configurable per tenant/corridor.</li> <li>Provenance recorded with quotes; fallback hierarchy.</li> </ul>"},{"location":"20-specs/fx-policy/#ttl-usage","title":"TTL &amp; Usage","text":"<ul> <li>TTL per corridor; reject expired quotes.</li> <li>Store applied rate on event/journal for audit.</li> </ul>"},{"location":"20-specs/fx-policy/#controls","title":"Controls","text":"<ul> <li>Max deviation vs reference index; alert on breach.</li> <li>Hedging hooks: external position management (future).</li> </ul>"},{"location":"20-specs/fx-policy/#observability","title":"Observability","text":"<ul> <li>Metrics: quote age, deviation, rejection rate.</li> </ul> <p>Last updated: 2025-08-27</p>"},{"location":"20-specs/posting-rules/","title":"Posting Rules (Expanded)","text":"<p>Defines how Storo translates transfer lifecycle events into double\u2011entry ledger postings. This is the authoritative mapping for <code>ledger-service</code>.</p>"},{"location":"20-specs/posting-rules/#principles","title":"Principles","text":"<ul> <li>Every posting set must balance (sum debits = sum credits).  </li> <li>Postings are append\u2011only; reversals are explicit.  </li> <li>Ledger is accrual\u2011based: income/expenses recognized when earned, not when paid.  </li> <li>Use normal balances from chart\u2011of\u2011accounts.md.  </li> </ul>"},{"location":"20-specs/posting-rules/#event-posting-rules","title":"Event \u2192 Posting Rules","text":""},{"location":"20-specs/posting-rules/#1-transfersaccepted-auth-reservation","title":"1. <code>transfers.accepted</code> (AUTH / reservation)","text":"<ul> <li>If rail supports authorization (card\u2011like), create pending/memo postings:</li> </ul> Debit (Dr) Credit (Cr) Notes Rail Settlement Pending User / Payer Off\u2011balance memo (not cash movement yet)"},{"location":"20-specs/posting-rules/#2-transferssettled-funds-final","title":"2. <code>transfers.settled</code> (funds final)","text":""},{"location":"20-specs/posting-rules/#case-push-payment-payer-sends-to-payee","title":"Case: PUSH payment (payer sends to payee)","text":"Debit (Dr) Credit (Cr) Notes User / Payer Merchant / Payee Principal transfer Merchant / Payee Fees Revenue If fee charged (separate leg) FX Loss Merchant / Payee If FX conversion loss applied Merchant / Payee FX Gain If FX conversion gain applied"},{"location":"20-specs/posting-rules/#case-pull-payment-merchant-pulls-funds","title":"Case: PULL payment (merchant pulls funds)","text":"Debit (Dr) Credit (Cr) Notes User / Payer Merchant / Payee Principal Merchant / Payee Fees Revenue Optional fee leg"},{"location":"20-specs/posting-rules/#perrail-surcharges-and-partner-fees-netting","title":"Per\u2011rail surcharges and partner fees (netting)","text":"Debit (Dr) Credit (Cr) Notes Merchant / Payee Fees Partner Partner surcharge retained by Storo on behalf of partner Fees Partner Partner Payable Net settlement to partner at recon/settlement time <p>Netting entries reduce operational payouts; settle partner payable on statement reconciliation.</p>"},{"location":"20-specs/posting-rules/#3-transfersreturned-rail-return-chargeback","title":"3. <code>transfers.returned</code> (rail return / chargeback)","text":"Debit (Dr) Credit (Cr) Notes Merchant / Payee User / Payer Reverse principal Fees Expense Merchant / Payee Return fees absorbed"},{"location":"20-specs/posting-rules/#4-transfersfailed-technical-failure","title":"4. <code>transfers.failed</code> (technical failure)","text":"<ul> <li>No postings (transfer never finalized).</li> </ul>"},{"location":"20-specs/posting-rules/#period-closing-entries-ops","title":"Period Closing Entries (Ops)","text":"<p>At end of reporting period (see closing-the-books.md):</p> <ul> <li>Close temporary Income and Expense accounts to Retained Earnings.  </li> <li>Reconciliation must confirm balances vs external statements before close.  </li> </ul>"},{"location":"20-specs/posting-rules/#example-walkthrough","title":"Example Walkthrough","text":"<p>User pays Merchant 100 ZAR via USDC rail. Fee = 2 ZAR.</p> <ol> <li>Event: <code>transfers.settled</code></li> <li>Ledger postings:</li> </ol> Debit (Dr) Credit (Cr) Amount User Account Merchant Account 100 Merchant Account Fees Revenue 2 <p>Merchant net = 98 ZAR. System recognized 2 ZAR as revenue.</p>"},{"location":"20-specs/posting-rules/#exceptions","title":"Exceptions","text":"<ul> <li>Negative balances: only Liquidity/FX/Reserve accounts allowed.  </li> <li>Multi\u2011currency: FX legs must always be paired (gain or loss).  </li> <li>Manual journal entries require dual approval and clear memo.  </li> </ul>"},{"location":"20-specs/posting-rules/#references","title":"References","text":"<ul> <li>chart-of-accounts.md (account categories, normal balances)  </li> <li>closing-the-books.md (period cycle)  </li> <li>tax-vat.md (VAT on fees)  </li> </ul>"},{"location":"20-specs/regulatory-reporting/","title":"Regulatory Reporting (ZA/ZW)","text":"<p>Outlines BoP (SARB exchange control) and goAML (FIC/FIU) reporting interfaces.</p>"},{"location":"20-specs/regulatory-reporting/#bop-reporting-sarb","title":"BoP Reporting (SARB)","text":"<ul> <li>Scope: cross-border payments and receipts.</li> <li>Data: payer/payee, purpose codes, currency, amount, FX rate, <code>exchangeControlRef</code>.</li> <li>Frequency: daily batch; T+1 corrections.</li> <li>Interface: file/API adapter (service TBD: <code>storo-reg-reporting</code>).</li> </ul>"},{"location":"20-specs/regulatory-reporting/#goaml-strctr","title":"goAML (STR/CTR)","text":"<ul> <li>Thresholds: cash/crypto limits per jurisdiction.</li> <li>Triggers: rules over events (riskScore, amounts, patterns).</li> <li>Payload: goAML XML/JSON forms; attachments redacted.</li> <li>Submission: secure API with retry/backoff and receipt tracking.</li> </ul>"},{"location":"20-specs/regulatory-reporting/#event-additions","title":"Event Additions","text":"<ul> <li>Optional fields:</li> <li><code>exchangeControlRef</code> (string)</li> <li><code>purposeCode</code> (string)</li> </ul>"},{"location":"20-specs/regulatory-reporting/#ops-audit","title":"Ops &amp; Audit","text":"<ul> <li>Immutable submission log with receipts and timestamps.</li> <li>DLQ for failed submissions; manual replay runbook.</li> </ul> <p>Last updated: 2025-08-27</p>"},{"location":"20-specs/risk-limits/","title":"Risk Limits &amp; KYC Tiers (ZA/ZW)","text":"<p>Defines tiered onboarding and runtime velocity controls aligned to FICA (ZA) and analogous ZW regimes.</p>"},{"location":"20-specs/risk-limits/#kyc-tiers","title":"KYC Tiers","text":"<ul> <li>Tier 0 (Minimal)</li> <li>Allowed: low-value transactions; no cross-border.</li> <li>Requirements: basic identity (name, mobile), phone verification.</li> <li> <p>Limits: daily/monthly caps; no PULL.</p> </li> <li> <p>Tier 1 (Standard)</p> </li> <li>Allowed: domestic transfers; moderate limits.</li> <li>Requirements: ID/passport, selfie/biometric, address proof.</li> <li> <p>Limits: higher daily/monthly; PULL optional.</p> </li> <li> <p>Tier 2 (Enhanced)</p> </li> <li>Allowed: cross-border, higher limits.</li> <li>Requirements: full KYC, income/proof of funds; enhanced due diligence.</li> <li>Limits: bespoke per-tenant.</li> </ul>"},{"location":"20-specs/risk-limits/#runtime-controls","title":"Runtime Controls","text":"<ul> <li>Velocity: txn count and value per window (1h/24h/30d) by <code>kycTier</code>.</li> <li>Corridor: per-rail and cross-border maxima, exchange-control flags.</li> <li>Risk score gates: deny or require review above thresholds.</li> </ul>"},{"location":"20-specs/risk-limits/#contract-additions","title":"Contract Additions","text":"<ul> <li>Event enrichment fields (optional):</li> <li><code>kycTier</code>: string (T0|T1|T2)</li> <li><code>riskScore</code>: number (0-100)</li> </ul>"},{"location":"20-specs/risk-limits/#enforcement-points","title":"Enforcement Points","text":"<ul> <li>CTS pre-submit policy check using cached tier and counters.</li> <li>Compliance <code>/screen</code> returns <code>score</code> consumed by CTS.</li> <li>Directory can convey per-rail caps.</li> </ul>"},{"location":"20-specs/risk-limits/#observability","title":"Observability","text":"<ul> <li>Metrics: policy blocks, window saturation, false-positive review rate.</li> <li>Alerts: anomaly in risk-score distribution.</li> </ul> <p>Last updated: 2025-08-27</p>"},{"location":"20-specs/tax-vat/","title":"Tax &amp; VAT (ZA/ZW)","text":"<p>Guidance on tax treatment for fees and surcharges in the Storo ledger.</p>"},{"location":"20-specs/tax-vat/#vat-basics-za","title":"VAT Basics (ZA)","text":"<ul> <li>Standard rate: 15% (as of doc date).  </li> <li>Taxable supplies: Storo service fees typically vatable; confirm per tenant.</li> <li>Invoicing: include VAT breakdown and tax codes per line.</li> </ul>"},{"location":"20-specs/tax-vat/#zimbabwe-considerations","title":"Zimbabwe Considerations","text":"<ul> <li>Local VAT/sales tax nuances to be configured per tenant/product; document rates.</li> </ul>"},{"location":"20-specs/tax-vat/#ledger-representation","title":"Ledger Representation","text":"<ul> <li>Fees split into net and VAT components at settlement time.</li> <li>Example (ZAR): amount 100.00; fee 2.00 excl VAT; VAT 0.30 (15%).</li> </ul> <pre><code>Dr USER 100.00\nCr MERCHANT 98.00\nCr FEES_NET 2.00\nCr FEES_VAT 0.30\n</code></pre> <p>Accounts may be configured under Revenue/Tax control accounts.</p>"},{"location":"20-specs/tax-vat/#eventmetadata","title":"Event/Metadata","text":"<ul> <li>Add <code>taxCode</code> (optional) in events referencing fee lines.</li> </ul>"},{"location":"20-specs/tax-vat/#observability","title":"Observability","text":"<ul> <li>Metrics: VAT accrued/day; reconciliation with invoices.</li> </ul> <p>Last updated: 2025-08-27</p>"},{"location":"30-diagrams/component-nucleus/","title":"Component: Nucleus","text":"<pre><code>flowchart LR\n  subgraph Client/Partners\n    A[Client Apps / Merchants / WhatsApp Bot]\n  end\n\n  subgraph Core[\"Storo Nucleus\"]\n    direction LR\n\n    subgraph API[\"Canonical Transfer Service (API)\"]\n      CTS[POST /transfers&lt;br/&gt;GET /transfers/:id&lt;br/&gt;Idempotency]\n    end\n\n    subgraph GW[\"Rail Gateways\"]\n      ZG[Zimswitch Gateway]\n      OG[OPPWA Gateway]\n      UG[USDC/Algorand Gateway]\n    end\n\n    subgraph L[\"Ledger Service\"]\n      LJ[Journal &amp; Postings]\n      LB[Balances &amp; Statements]\n    end\n\n    subgraph C[\"Compliance Screening\"]\n      CS[Local Watchlist Index&lt;br/&gt;/screen]\n    end\n\n    subgraph D[\"Directory &amp; Routing\"]\n      DR[Institutions/BINs&lt;br/&gt;Fees &amp; Windows]\n    end\n\n    subgraph R[\"Reconciliation &amp; Returns\"]\n      RC[Statement Ingest&lt;br/&gt;Unmatched Queue]\n    end\n\n    subgraph B[\"Event Bus + Outbox\"]\n      EB[(Topics: transfers.*, ledger.*, recon.*)]\n    end\n\n    subgraph O[\"Operator Console\"]\n      OC[Ops UI&lt;br/&gt;Returns/Recon/Flags]\n    end\n\n    subgraph PL[\"Platform/Base\"]\n      AD[/ /live /ready /metrics /version /]\n      TM[Banking Time &amp; Holidays]\n      IDG[ID/Tracing &amp; Errors]\n    end\n  end\n\n  A --&gt;|create intent| CTS\n  CTS --&gt;|pre-screen| CS\n  CS --&gt;|allow/deny| CTS\n  CTS --&gt;|route| D\n  D --&gt; CTS\n  CTS --&gt;|submit| ZG\n  CTS --&gt;|submit| OG\n  CTS --&gt;|submit| UG\n\n  ZG --&gt; EB\n  OG --&gt; EB\n  UG --&gt; EB\n\n  EB --&gt; CTS\n  EB --&gt; L\n  EB --&gt; R\n  EB --&gt; O\n\n  L &lt;--&gt; R\n  R --&gt;|nightly ingest| EB\n\n  OC --- O\n  PL --- CTS\n  PL --- GW\n  PL --- L\n  PL --- C\n  PL --- D\n  PL --- R</code></pre>"},{"location":"30-diagrams/lifecycle-state/","title":"Transfer Lifecycle","text":"<pre><code>stateDiagram-v2\n  [*] --&gt; INITIATED\n  INITIATED --&gt; SUBMITTED: CTS submits.&lt;rail&gt;\n  SUBMITTED --&gt; ACCEPTED: rail reference received\n  ACCEPTED --&gt; SETTLED: funds final\n  ACCEPTED --&gt; RETURNED: return/chargeback code\n  SUBMITTED --&gt; FAILED: technical failure\n  SETTLED --&gt; [*]\n  RETURNED --&gt; [*]\n  FAILED --&gt; [*]</code></pre>"},{"location":"30-diagrams/recon-matching/","title":"Reconciliation Matching","text":"<pre><code>flowchart TD\n  ST[(Rail Statement Files / On-chain Events)]\n  NORM[Normalize to StatementLine]\n  MATCH{Match to\nTransfers?}\n  EMIT1[Emit transfers.settled]\n  EMIT2[Emit transfers.returned]\n  EXC[Open recon.exception]\n  OP[Operator Console]\n\n  ST --&gt; NORM --&gt; MATCH\n  MATCH --&gt;|Settlement| EMIT1\n  MATCH --&gt;|Return| EMIT2\n  MATCH --&gt;|No| EXC --&gt; OP</code></pre>"},{"location":"30-diagrams/sequence-bop-reporting/","title":"Sequence: BoP Reporting Pipeline","text":"<pre><code>sequenceDiagram\n  participant CTS\n  participant LED as Ledger\n  participant REG as Regulatory Reporting\n  participant AD as Authorized Dealer/SARB\n\n  CTS--&gt;&gt;REG: transfers.settled (subset)\n  LED--&gt;&gt;REG: postings/read (summary)\n  REG-&gt;&gt;REG: build BoP payload\n  REG-&gt;&gt;AD: submit BoP\n  AD--&gt;&gt;REG: receipt/ack\n  REG--&gt;&gt;CTS: reg.submission.acknowledged</code></pre>"},{"location":"30-diagrams/sequence-eft-batch/","title":"Sequence: EFT Batch","text":"<pre><code>sequenceDiagram\n  participant CTS\n  participant EFT as EFT Gateway\n  participant PARTNER as Bankserv Partner\n  participant R as Reconciliation\n\n  CTS-&gt;&gt;EFT: enqueue transfers\n  EFT-&gt;&gt;PARTNER: submit batch file\n  PARTNER--&gt;&gt;EFT: ack/reject\n  EFT--&gt;&gt;CTS: transfers.accepted (per line)\n  PARTNER--&gt;&gt;EFT: settlement/returns files\n  EFT--&gt;&gt;R: recon.statement.ingested\n  R--&gt;&gt;CTS: transfers.settled / transfers.returned</code></pre>"},{"location":"30-diagrams/sequence-return-oppwa/","title":"Sequence: Return (OPPWA)","text":"<pre><code>sequenceDiagram\n  participant CTS as Canonical Transfer Service\n  participant GW as OPPWA Gateway\n  participant OPP as OPPWA API\n  participant WH as Webhook Receiver\n  participant L as Ledger\n  participant OC as Operator Console\n\n  CTS-&gt;&gt;GW: transfers.submitted.oppwa (intent=AUTH)\n  GW-&gt;&gt;OPP: POST /payments (preauth)\n  OPP--&gt;&gt;GW: result {opRef, resultCode}\n  GW--&gt;&gt;CTS: transfers.accepted {opRef}\n\n  %% Later, dispute/return arrives\n  WH--&gt;&gt;GW: webhook {opRef, reasonCode, chargeback:true}\n  GW--&gt;&gt;CTS: transfers.returned {reasonCode}\n  CTS--&gt;&gt;L: transfers.returned\n  L--&gt;&gt;OC: ledger.posting.created (reversal)</code></pre>"},{"location":"30-diagrams/sequence-stk-ecocash/","title":"Sequence: EcoCash STK Prompt","text":"<pre><code>sequenceDiagram\n  participant CTS\n  participant GW as EcoCash GW\n  participant MNO as EcoCash\n  participant L as Ledger\n\n  CTS-&gt;&gt;GW: transfers.submitted.ecocash\n  GW-&gt;&gt;MNO: STK prompt\n  MNO--&gt;&gt;GW: accepted {opRef}\n  GW--&gt;&gt;CTS: transfers.accepted\n  MNO--&gt;&gt;GW: settled/return\n  GW--&gt;&gt;CTS: transfers.settled / transfers.returned\n  CTS--&gt;&gt;L: transfers.settled / transfers.returned</code></pre>"},{"location":"30-diagrams/sequence-submit-payshap/","title":"Sequence: Submit PayShap","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant CTS as Canonical Transfer Service\n  participant DR as Directory\n  participant GW as PayShap Gateway\n  participant L as Ledger\n\n  Client-&gt;&gt;CTS: POST /transfers (proxy)\n  CTS-&gt;&gt;DR: resolve proxy\n  DR--&gt;&gt;CTS: account route\n  CTS-&gt;&gt;GW: transfers.submitted.payshap\n  GW--&gt;&gt;CTS: transfers.accepted\n  GW--&gt;&gt;CTS: transfers.settled\n  CTS--&gt;&gt;L: transfers.settled\n  L--&gt;&gt;CTS: ledger.posting.created</code></pre>"},{"location":"30-diagrams/sequence-submit-usdc/","title":"Sequence: Submit USDC","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant CTS as Canonical Transfer Service\n  participant CS as Compliance\n  participant DR as Directory\n  participant GW as USDC/Algorand Gateway\n  participant L as Ledger\n\n  Client-&gt;&gt;CTS: POST /transfers (idempotency-key)\n  CTS-&gt;&gt;CTS: dedupe &amp; normalize\n  CTS-&gt;&gt;CS: POST /screen (payer, payee)\n  CS--&gt;&gt;CTS: allow\n  CTS-&gt;&gt;DR: GET /routes?rail=usdc-algo\n  DR--&gt;&gt;CTS: { endpoint, fees, window }\n  CTS-&gt;&gt;GW: transfers.submitted.usdc\n  GW--&gt;&gt;CTS: transfers.accepted {txId}\n  GW--&gt;&gt;CTS: transfers.settled {txId, round}\n  CTS--&gt;&gt;L: transfers.settled\n  L--&gt;&gt;CTS: ledger.posting.created</code></pre>"},{"location":"40-ops/closing-the-books/","title":"Closing the Books (Ops Runbook)","text":"<p>The process of finalizing accounting for a period (day, month, quarter, year). Based on accrual accounting and double-entry principles.</p>"},{"location":"40-ops/closing-the-books/#daily-tasks","title":"Daily Tasks","text":"<ol> <li>Reconciliation </li> <li>Ingest statements from rails (Zimswitch, OPPWA, Algorand).  </li> <li>Match to transfers in Storo.  </li> <li> <p>Investigate unmatched items in Operator Console.  </p> </li> <li> <p>Ledger Validation </p> </li> <li>Run posting check: every debit has equal credit.  </li> <li> <p>Generate trial balance.  </p> </li> <li> <p>Compliance Delta Check </p> </li> <li>Re-run re-screening for entities against updated lists.  </li> </ol>"},{"location":"40-ops/closing-the-books/#monthly-period-end-tasks","title":"Monthly / Period-End Tasks","text":"<ol> <li>Income Statement </li> <li> <p>Summarize revenues (fees, FX) and expenses (processing, chargebacks).  </p> </li> <li> <p>Close Temporary Accounts </p> </li> <li>Zero out revenue and expense accounts.  </li> <li> <p>Roll net income into Current Period Net Income account.  </p> </li> <li> <p>Balance Sheet </p> </li> <li>Validate: Assets = Liabilities + Equity.  </li> <li> <p>Snapshot balances for audit/export.  </p> </li> <li> <p>Cash Flow Statement </p> </li> <li>Derive from balance changes (Liquidity movements).  </li> </ol>"},{"location":"40-ops/closing-the-books/#technical-steps","title":"Technical Steps","text":"<ol> <li>Freeze event ingestion at cutoff.  </li> <li>Run reconciliation batch job.  </li> <li>Generate trial balance \u2192 verify zero-sum.  </li> <li>Post closing entries:  </li> <li>Debit/Credit Revenue \u2192 Net Income.  </li> <li>Debit/Credit Expenses \u2192 Net Income.  </li> <li>Close Net Income \u2192 Retained Earnings.  </li> <li>Unlock event ingestion.  </li> </ol>"},{"location":"40-ops/closing-the-books/#operator-notes","title":"Operator Notes","text":"<ul> <li>If unmatched transactions remain, escalate before closing.  </li> <li>If balances don\u2019t tie (A=L+E), halt closing and investigate ledger.  </li> <li>All reports (Balance Sheet, Income Statement) are versioned and immutable.  </li> </ul>"},{"location":"40-ops/observability/","title":"Observability","text":"<p>Metrics, logs, and tracing conventions for Storo.</p>"},{"location":"40-ops/observability/#golden-signals","title":"Golden Signals","text":"<ul> <li>Latency: API p95/p99 (CTS), event publish lag (outbox \u2192 bus), ledger posting latency.  </li> <li>Traffic: transfers/sec by rail, events/sec by topic.  </li> <li>Errors: rate by type; DLQ sizes.  </li> <li>Saturation: outbox backlog, consumer lag, DB write IOPS.  </li> </ul> <p>Telco variability: expect higher latency/timeouts during peak/maintenance windows on USSD/STK rails; adjust SLOs accordingly.</p>"},{"location":"40-ops/observability/#metrics-prometheus-names","title":"Metrics (Prometheus names)","text":"<ul> <li><code>cts_requests_total{route,code}</code> </li> <li><code>cts_request_duration_seconds_bucket{route}</code> </li> <li><code>gateway_submit_duration_seconds_bucket{rail}</code> </li> <li><code>event_outbox_backlog{service}</code> </li> <li><code>event_publish_lag_seconds{service}</code> </li> <li><code>event_consumer_lag_seconds{service,topic}</code> </li> <li><code>ledger_posting_latency_seconds_bucket</code> </li> <li><code>recon_match_rate</code> , <code>recon_unmatched_backlog</code> </li> <li><code>compliance_screen_latency_seconds_bucket</code> , <code>compliance_index_age_hours</code></li> </ul> <p>Load-shedding alerts: page on <code>event_publish_lag_seconds{service}</code> and <code>gateway_submit_duration_seconds_bucket{rail=~\"(ecocash|mtnmomo|airtelmomo)\"}</code> when exceeding thresholds during known windows.</p>"},{"location":"40-ops/observability/#logs","title":"Logs","text":"<ul> <li>JSON only.  </li> <li>Required fields: <code>ts</code>, <code>level</code>, <code>service</code>, <code>tenantId</code>, <code>transferId?</code>, <code>eventId?</code>, <code>traceId?</code>.  </li> <li>PII redaction applied before emit.</li> </ul>"},{"location":"40-ops/observability/#tracing","title":"Tracing","text":"<ul> <li>Propagate <code>traceparent</code> across services.  </li> <li>Spans: <code>cts.create</code>, <code>gateway.submit</code>, <code>ledger.post</code>, <code>recon.ingest</code>.  </li> <li>Sample rate: 10% baseline; 100% on error paths.</li> </ul>"},{"location":"40-ops/observability/#dashboards","title":"Dashboards","text":"<ul> <li>Exec: transfers by rail, approval/return rates, SLAs.  </li> <li>SRE: outbox backlogs, publish lag, consumer lag, broker health.  </li> <li>Finance/Ops: settlement totals, fees, FX P&amp;L, recon match rate.</li> </ul>"},{"location":"40-ops/regulatory/","title":"Regulatory Ops (STR/CTR, BoP)","text":"<p>Operational procedures for regulatory submissions in ZA/ZW.</p>"},{"location":"40-ops/regulatory/#pipelines","title":"Pipelines","text":"<ul> <li>BoP: aggregate cross-border events \u2192 build payload \u2192 submit \u2192 store receipt.</li> <li>goAML: detect triggers \u2192 generate STR/CTR \u2192 submit \u2192 track status.</li> </ul>"},{"location":"40-ops/regulatory/#runbooks","title":"Runbooks","text":"<ul> <li>Submission failures: retry policy, contact points, escalation matrix.</li> <li>Corrections: T+1 resubmission with reference to prior filing.</li> <li>DSAR/POPIA: ensure redactions and legal holds before export.</li> </ul>"},{"location":"40-ops/regulatory/#observability","title":"Observability","text":"<ul> <li>Metrics: submissions/day, failure rate, mean time to receipt.</li> <li>Dashboards: pipeline health, backlog, DLQ.</li> </ul> <p>Last updated: 2025-08-27</p>"},{"location":"40-ops/runbooks/","title":"Runbooks","text":"<p>Operational procedures for Storo nucleus components. Keep these pragmatic and up to date.</p>"},{"location":"40-ops/runbooks/#transfers-stuck-in-submitted","title":"Transfers stuck in SUBMITTED","text":"<p>Symptoms - Many transfers in <code>SUBMITTED</code> for &gt; X minutes. - Gateways show growing outbox backlog.</p> <p>Checks 1. Gateway <code>/ready</code> and <code>/metrics</code> for the affected rail. 2. Event bus health; consumer lag. 3. Directory lookup SLOs (routing latency spikes?).  </p> <p>Actions - Restart gateway dispatcher if wedged. - Drain DLQ after verifying poison messages are quarantined. - Temporarily throttle creation rate from CTS for the tenant with spikes.  </p> <p>Postmortem notes - Attach event IDs and sample transferIds. - Record root cause and prevention (ADR if architectural).</p>"},{"location":"40-ops/runbooks/#reconciliation-unmatched-backlog","title":"Reconciliation unmatched backlog","text":"<p>Symptoms - <code>recon.exception.opened</code> spiking, queue &gt; SLA.  </p> <p>Checks 1. Statement ingest success rate and file checksums. 2. Directory fee tables / windows version drift. 3. Key mapping (acqRef/authCode/externalRef) consistency.  </p> <p>Actions - Assign operators to bulk-assign obvious matches. - Re-run ingest from last checkpoint if normalization bug found. - File partner ticket if delivery gaps observed.  </p>"},{"location":"40-ops/runbooks/#compliance-stale-index","title":"Compliance stale index","text":"<p>Symptoms - Alert: compliance list age &gt; 24h.  </p> <p>Checks 1. Downloader logs (network, checksum mismatch). 2. Disk space / blob store quota.  </p> <p>Actions - Trigger manual list refresh. - Roll back to last good index if corruption detected. - If still failing, force CTS to deny by policy until lists are healthy.  </p>"},{"location":"40-ops/runbooks/#ledger-posting-failures","title":"Ledger posting failures","text":"<p>Symptoms - <code>currency mismatch</code> or <code>negative balance blocked</code>.  </p> <p>Checks 1. Posting rules version and inputs from event. 2. Account config (currency, status).  </p> <p>Actions - Open exception, block further postings for the tenant if systemic. - Patch rules (PR) and replay events.  </p>"},{"location":"40-ops/runbooks/#event-bus-backlog","title":"Event bus backlog","text":"<p>Symptoms - High outbox backlog, consumer lag.  </p> <p>Checks 1. Bus broker health, partition leaders. 2. Dispatcher logs for auth / throttling errors.  </p> <p>Actions - Scale consumers horizontally. - Increase partitions if saturated. - Enable backpressure on producers (CTS) temporarily.</p>"},{"location":"40-ops/runbooks/#load-shedding-resilience-za","title":"Load-shedding resilience (ZA)","text":"<p>Symptoms - Increased timeouts/latency during scheduled power cuts; spikes in retries/DLQ.  </p> <p>Checks 1. Gateway submit/confirm latency; retry counters. 2. Outbox backlog and consumer lag around shedding windows. 3. Infrastructure node availability in affected regions.  </p> <p>Actions - Increase backoff and retry windows temporarily; enable circuit breakers. - Prefer idempotent replays after power restoration. - Throttle CTS create rate for impacted tenants. - Schedule maintenance/ingests away from shedding windows.  </p> <p>Alerts - Alert on publish lag, retry spikes, and failure-rate thresholds during known windows.  </p>"},{"location":"40-ops/runbooks/#popia-dsar-data-subject-accesserasure","title":"POPIA DSAR (Data Subject Access/Erasure)","text":"<p>Scope - Handle access/correction/erasure requests while honoring legal holds and retention.</p> <p>Steps 1. Verify requestor identity and authority. 2. Locate records across services (CTS, Ledger, Compliance, Recon, blobs). 3. Produce access report with redactions; log disclosure. 4. For erasure: apply anonymization where permitted; record legal holds where applicable. 5. Update DSAR register with timestamps and outcome.  </p> <p>Controls - Do not delete immutable audit/journal data; apply irreversible hashing where allowed. - Approval workflow for erasure.</p>"},{"location":"40-ops/security/","title":"Security","text":"<p>Standards for secrets, access, PCI scope, and PII handling in Storo.</p>"},{"location":"40-ops/security/#secrets-management","title":"Secrets Management","text":"<ul> <li>Stored in a centralized vault (e.g., HashiCorp Vault).  </li> <li>Rotated at least every 90 days; immediate rotation on incident.  </li> <li>No secrets in environment variables for long-lived services without vault agent.  </li> </ul>"},{"location":"40-ops/security/#access-control","title":"Access Control","text":"<ul> <li>Service-to-service auth via mTLS or mesh-issued JWT.  </li> <li>RBAC for Operator Console (OPS, COMPLIANCE, ADMIN).  </li> <li>Principle of least privilege to DBs and blob stores.</li> </ul>"},{"location":"40-ops/security/#pci-pan-scope","title":"PCI &amp; PAN Scope","text":"<ul> <li>Card data handled exclusively in OPPWA/Zimswitch gateway.  </li> <li>PAN/token never flows into CTS or Ledger.  </li> <li>Webhook/file artifacts are redacted and encrypted.</li> </ul>"},{"location":"40-ops/security/#pci-saq-tokenization-in-region","title":"PCI SAQ &amp; Tokenization (in-region)","text":"<ul> <li>Prefer network tokenization or vetted token vaults; avoid PAN handling outside gateways.  </li> <li>Scope reduction: isolate gateways; segment networks; harden endpoints.  </li> <li>Complete appropriate SAQ (likely SAQ D for service providers) with compensating controls documented.  </li> </ul>"},{"location":"40-ops/security/#pii-handling","title":"PII Handling","text":"<ul> <li>Encrypt at rest; redact in logs and events.  </li> <li>Minimize in DBs; store raw artifacts in encrypted blob store.  </li> <li>Data retention per <code>20-specs/data-retention-pii.md</code>.</li> </ul>"},{"location":"40-ops/security/#popia-south-africa","title":"POPIA (South Africa)","text":"<ul> <li>Lawful basis: document processing purposes per flow (screening, settlement, reporting).  </li> <li>Cross-border transfers: assess adequate protection or implement contractual safeguards; record in audits.  </li> <li>Data subject rights: verify identity; fulfill access/correction/erasure subject to legal holds.  </li> <li>Privacy by design: DPIA for new rails; minimize PII in events; default encryption.</li> </ul>"},{"location":"40-ops/security/#licensing-scheme-participation-zazw","title":"Licensing &amp; Scheme Participation (ZA/ZW)","text":"<ul> <li>Role options: PSP, System Operator, or via sponsor bank; document per environment.  </li> <li>PASA participation: outline sponsor relationships, limits, and responsibilities.  </li> <li>Operational controls: incident management, segregation of duties, change management.</li> </ul>"},{"location":"40-ops/security/#secure-coding","title":"Secure Coding","text":"<ul> <li>Input validation at boundaries; strict schema checks.  </li> <li>Dependency scanning and SAST/DAST in CI.  </li> <li>Security headers on all admin endpoints.</li> </ul>"},{"location":"40-ops/security/#incident-response","title":"Incident Response","text":"<ul> <li>24/7 on-call rotation; breach protocol documented.  </li> <li>Forensics: immutable logs and event store.  </li> <li>Post-incident ADR if architectural changes required.</li> </ul>"},{"location":"50-repo-structure/ci-cd/","title":"CI/CD Standard (per service)","text":"<p>Canonical GitHub Actions workflow + required checks for all Storo service repos.</p>"},{"location":"50-repo-structure/ci-cd/#required-checks","title":"Required Checks","text":"<ul> <li>lint: golangci\u2011lint / eslint</li> <li>test: unit tests + golden fixtures</li> <li>contract\u2011validate: ensure emitted/consumed events &amp; APIs conform to <code>storo-specs</code></li> <li>migrations\u2011dry\u2011run: for services with DB migrations</li> <li>build: Docker image</li> <li>publish: tag <code>svc:X.Y.Z</code> and <code>svc:X</code></li> </ul>"},{"location":"50-repo-structure/ci-cd/#example-workflow-githubworkflowsciyml","title":"Example Workflow (<code>.github/workflows/ci.yml</code>)","text":"<pre><code>name: CI\n\non:\n  push:\n    branches: [ main ]\n    tags: [ 'v*.*.*' ]\n  pull_request:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with: { go-version: '1.22' }\n      - run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n      - run: golangci-lint run ./...\n\n  test:\n    runs-on: ubuntu-latest\n    services:\n      postgres:\n        image: postgres:16\n        env:\n          POSTGRES_PASSWORD: postgres\n        ports: [ '5432:5432' ]\n        options: &gt;-\n          --health-cmd=\"pg_isready -U postgres\"\n          --health-interval=10s\n          --health-timeout=5s\n          --health-retries=5\n      localstack:\n        image: localstack/localstack:3\n        env:\n          SERVICES: sns,sqs,s3\n        ports: [ '4566:4566' ]\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with: { go-version: '1.22' }\n      - run: make db   # apply embedded migrations\n      - run: make test # includes golden fixture tests\n\n  contract-validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Install Node\n        uses: actions/setup-node@v4\n        with: { node-version: '20' }\n      - run: npm i -D @storo/specs ajv\n      - run: npm run validate:events  # project script validates fixtures/outbound events against envelope v=1\n      - run: npm run validate:openapi # if this repo exposes HTTP\n\n  build:\n    needs: [lint, test, contract-validate]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Docker build\n        run: |\n          docker build -t ghcr.io/storo/${{ github.event.repository.name }}:${{ github.sha }} .\n      - name: Log in to GHCR\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Push SHA image\n        run: docker push ghcr.io/storo/${{ github.event.repository.name }}:${{ github.sha }}\n\n  publish:\n    if: startsWith(github.ref, 'refs/tags/v')\n    needs: [build]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Tag &amp; push semver images\n        run: |\n          IMAGE=ghcr.io/storo/${{ github.event.repository.name }}\n          TAG=${GITHUB_REF#refs/tags/}\n          MAJOR=$(echo $TAG | cut -d. -f1)\n          docker pull $IMAGE:${{ github.sha }}\n          docker tag  $IMAGE:${{ github.sha }} $IMAGE:$TAG\n          docker tag  $IMAGE:${{ github.sha }} $IMAGE:$MAJOR\n          docker push $IMAGE:$TAG\n          docker push $IMAGE:$MAJOR\n</code></pre>"},{"location":"50-repo-structure/ci-cd/#branching-protection","title":"Branching &amp; Protection","text":"<ul> <li>Trunk\u2011based: short\u2011lived PRs to <code>main</code>, protected branch.</li> <li>Required status checks: all jobs above.</li> <li>Conventional commits recommended; changelogs generated on tag.</li> </ul>"},{"location":"50-repo-structure/ci-cd/#deploy-via-storo-infra","title":"Deploy (via <code>storo-infra</code>)","text":"<ul> <li>Terraform pins image tags per env (dev/staging/prod).</li> <li>PR to bump tag = deploy. Rollback = revert tag.</li> <li>Deploy during SAST business hours; staging soak \u2265 24h for sensitive services.</li> </ul>"},{"location":"50-repo-structure/ci-cd/#secrets-tokens-in-ci","title":"Secrets &amp; Tokens in CI","text":""},{"location":"50-repo-structure/ci-cd/#contract-validation-fixtures","title":"Contract Validation &amp; Fixtures","text":"<ul> <li>Source of truth: see <code>Specs \u2192 Events</code> (envelope <code>v=1</code>) and <code>Specs \u2192 Fixtures</code> for golden examples.</li> <li>Minimum checks:</li> <li>Validate outbound events from providers (gateways, ledger, CTS) against envelope <code>v=1</code> and event schemas.</li> <li>Validate inbound consumer fixtures (e.g., ledger consuming <code>transfers.settled</code>) using AJV/<code>@storo/specs</code>.</li> <li>Recommended project scripts:</li> <li><code>validate:events</code> \u2192 runs schema checks on all event samples under <code>fixtures/events/*.json</code>.</li> <li> <p><code>validate:openapi</code> \u2192 validates OpenAPI if the repo exposes HTTP.</p> </li> <li> <p>Use GitHub Environments or OpenID Connect to assume AWS roles. No long\u2011lived keys.</p> </li> <li>Service\u2011specific permissions; least privilege to push images / read Secrets Manager where necessary.</li> </ul>"},{"location":"50-repo-structure/local-dev/","title":"Local Development (storo\u2011devstack)","text":"<p>How to run Storo locally without a monorepo. You\u2019ll run the fleet via Docker and swap one service for your local build.</p>"},{"location":"50-repo-structure/local-dev/#prereqs","title":"Prereqs","text":"<ul> <li>Docker Desktop / Colima</li> <li>Make or Task</li> <li>Go 1.22 (for Go services), Node 20 (for console)</li> <li><code>storo-devstack</code> repo cloned</li> </ul> <p>Devstack provides: Postgres (multi\u2011DB), LocalStack (SNS/SQS), Prometheus, Grafana, and released service images.</p>"},{"location":"50-repo-structure/local-dev/#start-the-fleet","title":"Start the Fleet","text":"<pre><code>git clone git@github.com:storo/storo-devstack.git\ncd storo-devstack\ndocker compose up -d\n</code></pre> <p>Services come up with released images. Grafana is available at http://localhost:3000 (admin/admin by default).</p>"},{"location":"50-repo-structure/local-dev/#develop-one-service-locally","title":"Develop One Service Locally","text":"<p>Example: work on storo-gw-usdc while everything else runs in containers.</p> <p>1) Clone your service and start it locally: <pre><code>git clone git@github.com:storo/storo-gw-usdc.git\ncd storo-gw-usdc\nmake dev    # or task dev (hot reload)\n</code></pre></p> <p>2) In <code>storo-devstack/docker-compose.override.example.yml</code>, copy to <code>docker-compose.override.yml</code> and disable the service container, mapping your local port:</p> <pre><code># docker-compose.override.yml\nservices:\n  gw-usdc:\n    deploy:\n      replicas: 0  # disable container; we'll run it locally\n  # If the stack expects a port:\n  #   ports:\n  #     - \"8085:8085\"  # match your local gw-usdc listen port\n</code></pre> <p>3) Ensure env points to devstack infra: - Postgres: <code>postgres://localhost:5432/gw_usdc?sslmode=disable</code> - SQS/SNS (LocalStack): <code>http://localhost:4566</code> with dummy creds - S3 (for payloads): <code>http://localhost:4566</code></p> <p>4) Seed data (optional): <pre><code>make seed   # directory entries, holidays, test tenants\n</code></pre></p> <p>You can now post a transfer to CTS in devstack and watch events reach your local gateway.</p>"},{"location":"50-repo-structure/local-dev/#example-smoke-test-usdc-happy-path","title":"Example: Smoke Test (USDC Happy Path)","text":"<pre><code># Create a transfer\ncurl -XPOST http://localhost:8080/v1/transfers   -H 'Idempotency-Key: demo-1'   -d '{\n    \"tenantId\":\"tn_demo\",\n    \"payer\":{\"accountId\":\"acct_payer\"},\n    \"payee\":{\"accountId\":\"acct_merchant\"},\n    \"amount\":{\"value\":1000,\"currency\":\"USD\"},\n    \"rail\":\"usdc-algo\",\"intent\":\"PUSH\",\"externalRef\":\"ext_demo\"\n  }'\n</code></pre> <p>Verify in logs: - CTS emits <code>transfers.submitted.usdc</code> - Your local <code>gw-usdc</code> consumes and emits <code>accepted</code> then <code>settled</code> - Ledger in devstack posts entries</p>"},{"location":"50-repo-structure/local-dev/#tilt-optional-live-reload","title":"Tilt (optional, live reload)","text":"<p>If you prefer Tilt for hot\u2011reload: - <code>storo-devstack/Tiltfile</code> includes services. Comment out the one you run locally. - Point your local service to devstack infra as above.</p>"},{"location":"50-repo-structure/local-dev/#timezone-cutoffs","title":"Timezone &amp; Cutoffs","text":"<p>Business rules use Africa/Johannesburg. For predictable tests: - Export <code>TZ=Africa/Johannesburg</code> - Seed holidays via <code>platform-base</code> fixtures</p>"},{"location":"50-repo-structure/local-dev/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Events not flowing: check LocalStack is up (<code>awslocal sns list-topics</code>).</li> <li>DLQ growing: open Grafana \u2192 \u201cEvent Backlogs\u201d dashboard.</li> <li>DB migrations: run <code>make db</code> in the service repo to apply embedded migrations.</li> <li>CORS (console): set <code>CORS_ALLOWED_ORIGINS=http://localhost:3001</code> on services that expose HTTP APIs.</li> </ul>"},{"location":"50-repo-structure/local-dev/#clean-up","title":"Clean Up","text":"<pre><code>docker compose down -v  # stop and remove volumes\n</code></pre> <p>This resets your local DBs and queues.</p>"},{"location":"50-repo-structure/multi-repo-architecture/","title":"Multi\u2011Repo Architecture (Storo)","text":"<p>How Storo\u2019s nucleus is organized across independent repositories so multiple teams can ship fast without stepping on each other.</p> <p>This document defines which repos exist, who owns them, how they interoperate (contracts-first), and how you develop locally without a monorepo. It also sets versioning rules, release flows, and deprecation discipline.</p>"},{"location":"50-repo-structure/multi-repo-architecture/#goals-nongoals","title":"Goals &amp; Non\u2011Goals","text":"<p>Goals - Independent deployability and ownership per service. - Contract\u2011first interoperability (events &amp; APIs) with machine\u2011verifiable schemas. - Clear local dev story: run one service locally while the rest run as containers. - Locked\u2011down release &amp; rollback process per service.</p> <p>Non\u2011Goals - A single build system for everything (keep repos simple). - Tight coupling via shared DBs (no cross\u2011service DB calls).</p>"},{"location":"50-repo-structure/multi-repo-architecture/#repository-map-source-of-truth","title":"Repository Map (source of truth)","text":"Repo Purpose Tech Owners Notes storo-specs Event schemas (JSON Schema), APIs (OpenAPI), golden fixtures, codegen JSON/YAML, Node scripts Platform Publishes <code>@storo/specs</code> (npm) and <code>github.com/storo/specs-go</code> (Go) storo-cts Canonical Transfer Service (API + orchestration) Go, Postgres, SQS/SNS Payments Core Emits <code>transfers.submitted.&lt;rail&gt;</code> storo-gw-usdc USDC/Algorand rail gateway Go, Postgres, SQS/SNS Rails Team Strict transform + event emission storo-gw-oppwa OPPWA gateway Go Rails Team Webhooks verified &amp; signed storo-gw-zimswitch Zimswitch/ISO8583 gateway Go Rails Team ISO fixtures + golden tests storo-ledger Double\u2011entry, append\u2011only ledger Go, Postgres Finance Eng Consumes <code>transfers.*</code> \u2192 postings storo-compliance Local watchlist index + screening Go Risk/Compliance Ingests OFAC/UN/EU/SA lists storo-directory Institutions, BINs, fees, settlement windows Go Platform Versioned datasets storo-recon Statement ingest + matching + returns Go Finance Ops Emits <code>transfers.settled/returned</code> storo-operator-console Internal UI (timeline, exceptions, flags) Next.js/TS Ops Auth via SSO/RBAC storo-devstack Local docker compose / Tilt to run the fleet Compose/Tilt DX Lets each dev swap a single local service storo-infra Terraform + env config (dev/stage/prod) Terraform Infra Controls image tags, secrets, IAM storo-observability Dashboards, alert rules Grafana/Prom SRE Golden signals and SLOs <p>Ownership is explicit. Each repo has CODEOWNERS and a simple <code>Makefile</code>/<code>Taskfile</code> so onboarding is fast.</p>"},{"location":"50-repo-structure/multi-repo-architecture/#repo-classification-and-naming-conventions","title":"Repo classification and naming conventions","text":"<p>Convention - Libraries and shared packages MUST use the <code>-lib</code> suffix and contain no Lambdas. - Services and gateways (no <code>-lib</code> suffix) may include Lambdas where serverless is beneficial (webhooks, async processors, scheduled jobs). - Infra repos do not themselves contain Lambdas but define/deploy them.</p> Repo Type Lambdas Description storo-specs Contracts source (publishes libs) N/A Source of truth for event and API schemas; publishes <code>@storo/specs</code> (TS) and <code>storo-specs-go-lib</code> (Go). storo-specs-go-lib Library No Generated Go types/validators from <code>storo-specs</code>. storo-platform-lib Library No Shared domain types, business time/holiday calendars, RBAC helpers. storo-outbox-lib Library No Outbox helpers: transactional writes, idempotency keys, retry/backoff, metrics. storo-otel-lib Library No OpenTelemetry setup, logging, tracing, metrics helpers. storo-cts Service Yes Canonical Transfer Service API/orchestration; may run webhook or async processors as Lambdas. storo-gw-usdc Gateway Service Yes USDC/Algorand rail gateway; webhook handlers and async processors as Lambdas. storo-gw-oppwa Gateway Service Yes OPPWA gateway; signed webhooks and callbacks as Lambdas. storo-gw-zimswitch Gateway Service Possible ISO8583 processing; primarily containerized, Lambdas possible for specific async tasks. storo-ledger Service No Double-entry ledger; stateful DB workers; not expected to use Lambdas. storo-compliance Service Possible Screening; may use Lambdas for list ingestion/refresh, core service containerized. storo-directory Service Possible Reference datasets; may use Lambdas for scheduled imports; core reads are containerized. storo-recon Service Possible Statement ingest/matching; may use Lambdas for schedulers/extractors. storo-operator-console UI/Web No Internal Next.js app for ops; no Lambdas in repo (hosting may use edge/serverless runtime). storo-devstack Dev tooling No Local docker compose/Tilt; no Lambdas. storo-infra Infra N/A Terraform for environments, images, IAM, secrets; deploys container workloads. storo-cdk-infra Infra N/A CDK for serverless components (Lambda, API Gateway, SQS/SNS bindings) for serverless use-cases. storo-observability Observability N/A Dashboards and alert rules (Grafana/Prometheus). <p>Notes - Gateways and CTS are the primary candidates to include Lambdas (webhooks, async enrich/emit, scheduled maintenance). - Libraries never ship compute. If a repo might own runtime code, it should not carry the <code>-lib</code> suffix. - <code>storo-cdk-infra</code> is introduced to manage serverless stacks alongside <code>storo-infra</code> (Terraform) for containerized infrastructure.</p>"},{"location":"50-repo-structure/multi-repo-architecture/#contractsfirst-single-source-of-truth","title":"Contracts\u2011First (single source of truth)","text":""},{"location":"50-repo-structure/multi-repo-architecture/#storospecs","title":"storo\u2011specs","text":"<ul> <li>Events: JSON Schemas under <code>events/</code> with version fields (e.g., <code>\"v\": 1</code>).  </li> <li>APIs: OpenAPI under <code>api/</code> (CTS <code>/v1/transfers</code>, Ledger reads, etc.).  </li> <li>Fixtures: Golden JSON examples validated in CI.  </li> <li>Codegen: Publishes on tag:</li> <li>Go types/validators \u2192 <code>github.com/storo/specs-go</code> (semantic versioned)</li> <li>TS types/clients \u2192 <code>@storo/specs</code> (npm semver)</li> </ul> <p>Rule: Service repos pin a specific tag and validate in CI that all in/out payloads conform.</p>"},{"location":"50-repo-structure/multi-repo-architecture/#event-api-versioning","title":"Event &amp; API Versioning","text":"<ul> <li>Additive changes (new optional field): minor bump in <code>storo-specs</code>, no event version change required.</li> <li>Breaking changes: introduce new event version (e.g., <code>transfers.settled v2</code>) and dual\u2011publish during migration; consumers add support then deprecate v1.</li> <li>HTTP APIs: path versioning (<code>/v1/...</code>). Breaking change \u21d2 add <code>/v2</code> and run both until cutover.</li> <li>Deprecation policy: announce, dual\u2011run \u2265 2 releases, remove only after consumers are migrated.</li> </ul>"},{"location":"50-repo-structure/multi-repo-architecture/#local-development-no-monorepo-pain","title":"Local Development (no monorepo pain)","text":"<p>Use storo-devstack to run the fleet with released images + infrastructure (Postgres, LocalStack, Prometheus, Grafana). Then swap one service for a local build.</p>"},{"location":"50-repo-structure/multi-repo-architecture/#workflow","title":"Workflow","text":"<ol> <li><code>git clone storo-devstack &amp;&amp; docker compose up -d</code> </li> <li><code>git clone storo-gw-usdc &amp;&amp; make dev</code> (runs the gateway on your machine)</li> <li>In <code>storo-devstack/docker-compose.override.yml</code>, map the gateway\u2019s host port to the fleet and disable the container for that service.</li> <li>Iterate with hot reload (air/reflex). The rest of the system keeps using released images.</li> </ol> <p>Why this works: Contracts are pinned. Your local service talks to Live Postgres &amp; LocalStack queues created by devstack, so flows are realistic.</p>"},{"location":"50-repo-structure/multi-repo-architecture/#cicd-per-service","title":"CI/CD per Service","text":"<p>Pipeline (GitHub Actions) 1. <code>lint</code> (golangci\u2011lint / eslint) 2. <code>test</code> (unit + fixtures) 3. <code>contract-validate</code> (AJV vs <code>@storo/specs</code>; or <code>specs-go</code> validate) 4. <code>build</code> (Docker) 5. <code>publish</code> (<code>svc:X.Y.Z</code> + <code>svc:X</code>) 6. (optional) Chart publish (Helm)  </p> <p>storo-infra references image tags per env. Deploy is a tag flip (dev \u2192 stage \u2192 prod).</p>"},{"location":"50-repo-structure/multi-repo-architecture/#environments-secrets","title":"Environments &amp; Secrets","text":"<ul> <li>Envs: dev, staging, prod (separate AWS accounts).  </li> <li>Secrets in AWS Secrets Manager; IAM least privilege per service.  </li> <li>Business timezone is Africa/Johannesburg; holiday calendars bundled in <code>platform-base</code>.</li> </ul>"},{"location":"50-repo-structure/multi-repo-architecture/#observability-slos","title":"Observability &amp; SLOs","text":"<ul> <li>OpenTelemetry on all services. Prometheus metrics scraped by devstack &amp; prod.  </li> <li>Golden signals per ADR/observability doc: API latency, outbox backlog, consumer lag, ledger posting latency, recon match rate.  </li> <li>Alert rules live in <code>storo-observability</code> repo and are applied by Infra.</li> </ul>"},{"location":"50-repo-structure/multi-repo-architecture/#data-safety-rails","title":"Data &amp; Safety Rails","text":"<ul> <li>No cross\u2011service DB access. Only APIs/events.  </li> <li>Outbox required (ADR\u20110001). State change + event in the same txn.  </li> <li>Ledger is double\u2011entry, append\u2011only (ADR\u20110002).  </li> <li>Compliance must pass for submission; stale lists \u21d2 deny by policy.  </li> <li>Recon must close exceptions before end\u2011of\u2011day books close.</li> </ul>"},{"location":"50-repo-structure/multi-repo-architecture/#branching-releases","title":"Branching &amp; Releases","text":"<ul> <li>Trunk\u2011based with short\u2011lived PRs.  </li> <li>CI gates: unit, contract, migrations dry\u2011run.  </li> <li>Release by tagging (<code>vX.Y.Z</code>) \u2192 image publish.  </li> <li>Rollback: revert image tag in <code>storo-infra</code> (no code revert required).</li> </ul>"},{"location":"50-repo-structure/multi-repo-architecture/#repository-templates-consistency","title":"Repository Templates (consistency)","text":"<p>Each Go service repo includes: - <code>/cmd/service/main.go</code> with <code>/live</code>, <code>/ready</code>, <code>/metrics</code>, <code>/version</code> - <code>/internal/</code> (handlers, consumers, posting rules) - <code>/migrations/</code> (embedded) - Outbox &amp; optional Inbox (dedupe) tables - <code>Makefile</code> / <code>Taskfile.yml</code> - <code>.github/workflows/ci.yml</code> (pipeline above) - <code>docs/README.md</code> (local dev, env vars, example payloads)  </p>"},{"location":"50-repo-structure/multi-repo-architecture/#mermaid-map-repos-flows","title":"Mermaid Map (repos &amp; flows)","text":"<pre><code>flowchart LR\n  subgraph Specs\n    SP[storo-specs]\n  end\n\n  subgraph Rails\n    GU[storo-gw-usdc]\n    GO[storo-gw-oppwa]\n    GZ[storo-gw-zimswitch]\n  end\n\n  CTS[storo-cts]\n  LED[storo-ledger]\n  CMP[storo-compliance]\n  DIR[storo-directory]\n  REC[storo-recon]\n  UI[storo-operator-console]\n  DS[storo-devstack]\n  INF[storo-infra]\n\n  SP --&gt; CTS\n  SP --&gt; GU\n  SP --&gt; GO\n  SP --&gt; GZ\n  SP --&gt; LED\n  SP --&gt; CMP\n  SP --&gt; DIR\n  SP --&gt; REC\n  SP --&gt; UI\n\n  CTS --&gt;|transfers.submitted.*| GU\n  CTS --&gt;|transfers.submitted.*| GO\n  CTS --&gt;|transfers.submitted.*| GZ\n\n  GU --&gt;|transfers.accepted/settled/returned| CTS\n  GO --&gt;|\u2026| CTS\n  GZ --&gt;|\u2026| CTS\n\n  CTS --&gt; LED\n  REC --&gt; CTS\n  DIR --&gt; CTS\n  CMP --&gt; CTS\n  UI --&gt; CTS\n\n  DS --- CTS\n  DS --- GU\n  DS --- LED\n  INF --- CTS\n  INF --- Rails</code></pre>"},{"location":"50-repo-structure/multi-repo-architecture/#deprecation-migration-playbook","title":"Deprecation &amp; Migration Playbook","text":"<ol> <li>Propose change \u2192 write/update ADR in storo-specs PR.  </li> <li>Add schema change (new event version or additive field).  </li> <li>Publish new <code>specs-go</code> / <code>@storo/specs</code> tags.  </li> <li>Update providers first (emit both versions if breaking).  </li> <li>Update consumers to accept new version; ship.  </li> <li>Remove old version after \u22652 releases and a green prod window.</li> </ol>"},{"location":"50-repo-structure/multi-repo-architecture/#security-compliance-notes","title":"Security &amp; Compliance Notes","text":"<ul> <li>PAN/PCI scope stays inside gateways; no PAN in CTS/Ledger events.  </li> <li>PII minimized; raw rail payloads stored encrypted in blob store with TTL per policy.  </li> <li>Audit logs on the Operator Console; 4\u2011eyes for returns &amp; freezes.</li> </ul>"},{"location":"50-repo-structure/multi-repo-architecture/#actionable-next-steps-docsonly","title":"Actionable Next Steps (docs\u2011only)","text":"<ul> <li>Create repo stubs (empty READMEs) for all repos listed.  </li> <li>Add this doc under <code>docs/50-repo-structure/multi-repo-architecture.md</code>.  </li> <li>Draft <code>release-strategy.md</code> (semver details, dual\u2011publish patterns, deprecation checklist).  </li> <li>Draft <code>local-dev.md</code> (devstack usage + override examples).  </li> <li>Draft <code>ci-cd.md</code> (standard CI template + required checks).</li> </ul> <p>Once these docs exist, teams can start coding without waiting on a monorepo setup and with contracts locked by <code>storo-specs</code>.</p>"},{"location":"50-repo-structure/release-strategy/","title":"Release Strategy","text":"<p>Versioning, compatibility, and deprecation policy for Storo\u2019s multi\u2011repo nucleus.</p>"},{"location":"50-repo-structure/release-strategy/#goals","title":"Goals","text":"<ul> <li>Ship services independently with predictable compatibility.</li> <li>Keep contracts-first (events + APIs) as the single source of truth.</li> <li>Enable safe rollbacks (just flip image tags).</li> <li>Avoid hard breaks: use dual\u2011publish and additive changes.</li> </ul>"},{"location":"50-repo-structure/release-strategy/#semantic-versioning-semver","title":"Semantic Versioning (SemVer)","text":"<ul> <li>All repos use X.Y.Z.</li> <li>X = breaking</li> <li>Y = backward\u2011compatible features</li> <li>Z = fixes/internal</li> </ul>"},{"location":"50-repo-structure/release-strategy/#images-packages","title":"Images &amp; Packages","text":"<ul> <li>Docker: <code>svc:X.Y.Z</code> and <code>svc:X</code> (major alias)</li> <li>Go module (<code>specs-go</code>): <code>vX.Y.Z</code> tags</li> <li>NPM (<code>@storo/specs</code>): semver tags</li> </ul>"},{"location":"50-repo-structure/release-strategy/#events-json-schema-versioning","title":"Events (JSON Schema) Versioning","text":"<ul> <li>Each event in <code>storo-specs</code> has an explicit envelope with a <code>\"v\"</code> field:   <pre><code>{ \"eventId\":\"...\", \"type\":\"transfers.settled\", \"v\":1, \"occurredAt\":\"...\", \"transferId\":\"...\", \"tenantId\":\"...\", \"payload\":{...} }\n</code></pre></li> <li>Additive changes (new optional fields in <code>payload</code>) \u21d2 minor bump of <code>storo-specs</code>; no change to <code>v</code>.</li> <li>Breaking changes \u21d2 introduce new event version (e.g., <code>v2</code>), keep <code>v1</code> schemas.  </li> <li>Providers (e.g., gateways) dual\u2011publish <code>v1</code> and <code>v2</code> for \u2265 2 releases.</li> <li>Consumers (e.g., ledger/recon) add support for <code>v2</code> before we retire <code>v1</code>.</li> </ul> <p>Consumer rule: always validate by <code>type + v</code> and reject unknown versions with a clear metric/log.</p>"},{"location":"50-repo-structure/release-strategy/#http-apis-versioning","title":"HTTP APIs Versioning","text":"<ul> <li>Path versioning: <code>/v1/...</code>, breaking change \u21d2 new path <code>/v2/...</code>.</li> <li>Run both versions until all clients migrate; publish sunset date.</li> </ul>"},{"location":"50-repo-structure/release-strategy/#deprecation-policy","title":"Deprecation Policy","text":"<ol> <li>Propose change + ADR in <code>storo-specs</code> PR.</li> <li>Announce (changelog + #dev\u2011announcements), add sunset date.</li> <li>Dual\u2011run (events/APIs) for \u2265 2 releases or agreed window.</li> <li>Measure: consumer readiness dashboards.</li> <li>Remove old version after sign\u2011off.</li> </ol>"},{"location":"50-repo-structure/release-strategy/#release-flow-per-service","title":"Release Flow (per service)","text":"<ol> <li>Merge to <code>main</code> (all checks green).</li> <li>Tag <code>vX.Y.Z</code> \u2192 CI builds/pushes images.</li> <li><code>storo-infra</code> PR bumps the env pin:</li> <li>dev \u2192 staging \u2192 prod (separate PRs), with Africa/Johannesburg cutoffs in mind.</li> <li>Rollback = revert tag pin in <code>storo-infra</code>.</li> </ol>"},{"location":"50-repo-structure/release-strategy/#rollout-patterns","title":"Rollout Patterns","text":"<ul> <li>Canary: ship to \u226410% traffic via separate task set/service.</li> <li>Shadow (events): consume <code>v2</code> in a shadow consumer and compare outcomes before switching.</li> <li>Feature Flags: CTS per\u2011tenant throttles, gateway partner toggles.</li> </ul>"},{"location":"50-repo-structure/release-strategy/#compatibility-matrix-example","title":"Compatibility Matrix (example)","text":"Producer Event Current Next Policy gw-usdc transfers.settled v1 v2 dual\u2011publish 2 releases ledger consumes <code>settled</code> v1 v1+v2 must accept both recon consumes <code>settled</code> v1 v1+v2 must accept both"},{"location":"50-repo-structure/release-strategy/#changelogs","title":"Changelogs","text":"<ul> <li>Each repo maintains <code>CHANGELOG.md</code> (Keep a Changelog format).</li> <li><code>storo-specs</code> also publishes a schema diff in release notes.</li> </ul>"},{"location":"50-repo-structure/release-strategy/#slas-for-releases","title":"SLAs for Releases","text":"<ul> <li>Prod changes during business hours SAST only (unless hotfix).</li> <li>Staging soak time: \u2265 24h for gateways and ledger changes.</li> <li>Emergency rollback target: &lt; 10 minutes (tag flip + health checks).</li> </ul>"},{"location":"60-infra/aws-infra/","title":"AWS Infrastructure Blueprint (Storo Nucleus)","text":""},{"location":"60-infra/aws-infra/#general","title":"General","text":"<ul> <li>VPC (3 AZs); public subnets (ALB/NLB), private subnets (ECS/RDS), VPC endpoints (S3, SQS, SNS, Secrets Manager, ECR, CloudWatch).</li> <li>Compute: ECS Fargate (services + workers); cron via EventBridge Scheduler \u2192 Fargate tasks.</li> <li>Images/Artifacts: ECR; S3 for payloads/statement files (KMS-CMK).</li> <li>Config/Secrets: SSM Parameter Store + Secrets Manager (rotation); per-task IAM roles.</li> <li>CI/CD: GitHub Actions OIDC \u2192 AWS; ECR push; Terraform (<code>storo-infra</code>) apply.</li> <li>Observability: CloudWatch logs/metrics/alarms; OpenTelemetry to AMP/Managed Grafana; X-Ray optional.</li> <li>Security: ALB + WAF (public), internal ALBs; TLS (ACM); KMS on RDS/S3/SNS/SQS; least\u2011privilege SGs &amp; IAM.</li> </ul>"},{"location":"60-infra/aws-infra/#event-bus-outbox-crosscutting","title":"Event Bus &amp; Outbox (cross\u2011cutting)","text":"<ul> <li>Topics: SNS per domain (<code>transfers</code>, <code>ledger</code>, <code>recon</code>, <code>compliance</code>) with SQS subscriptions per consumer.</li> <li>Queues: SQS standard with DLQs; visibility timeout &gt; max handler time; redrive policy.</li> <li>Ordering (rare): SNS/SQS FIFO for specific flows.</li> <li>Scaling: ECS autoscale on SQS depth; alarms on outbox backlog and consumer lag.</li> <li>Replay: Outbox in RDS; DLQ replay runbooks.</li> </ul>"},{"location":"60-infra/aws-infra/#data-stores","title":"Data Stores","text":"<ul> <li>RDS Postgres (Multi\u2011AZ) per service (CTS, Ledger, Directory, Recon, Compliance); PITR; Performance Insights.</li> <li>S3 buckets per domain: <code>rail-artifacts</code>, <code>statements</code>, <code>raw-webhooks</code> (encryption, lifecycle, bucket policies).</li> <li>Optional: Elasticache Redis for hot lookups (Directory); OpenSearch only if needed for operator search.</li> </ul>"},{"location":"60-infra/aws-infra/#canonical-transfer-service-cts","title":"Canonical Transfer Service (CTS)","text":"<ul> <li>ECS Fargate behind public ALB (HTTPS, ACM). Private internal ALB for service\u2011to\u2011service where applicable.</li> <li>RDS <code>storo_cts</code> (transfers, transfer_events, outbox).</li> <li>NAT egress for partners as needed; prefer VPC endpoints for AWS services.</li> </ul>"},{"location":"60-infra/aws-infra/#rail-gateways-ecocash-mtnairtel-oppwa-zimswitch-payshap-usdcalgo","title":"Rail Gateways (EcoCash, MTN/Airtel, OPPWA, Zimswitch, PayShap, USDC/Algo)","text":"<ul> <li>ECS Fargate per gateway in private subnets; internal ALB.</li> <li>Public webhooks via dedicated public ALB + WAF, path <code>/webhooks/&lt;rail&gt;</code>.</li> <li>S3: raw payload snapshots; SQS DLQ for poison messages.</li> <li>Signing (USDC): CloudHSM or external signer; keys never leave enclave; task role scoped to signer.</li> <li>Partner connectivity: NAT egress; PrivateLink where supported.</li> </ul>"},{"location":"60-infra/aws-infra/#ledger-service","title":"Ledger Service","text":"<ul> <li>ECS Fargate + RDS <code>storo_ledger</code> (journals, postings, balances, outbox).</li> <li>SQS consumers for <code>transfers.accepted/settled/returned</code>; emit <code>ledger.*</code> to SNS.</li> <li>Internal ALB for read API; optional RDS Proxy; consider partitioning/archival strategy.</li> </ul>"},{"location":"60-infra/aws-infra/#compliance-screening","title":"Compliance Screening","text":"<ul> <li>ECS Fargate + RDS <code>storo_compliance</code>; S3 for list sources; EventBridge for scheduled refresh.</li> <li>Private ingress from CTS; alarms on index age; DLQ for ingest failures.</li> </ul>"},{"location":"60-infra/aws-infra/#directory-routing","title":"Directory &amp; Routing","text":"<ul> <li>ECS Fargate + RDS <code>storo_directory</code>; emits <code>directory.version.updated</code>.</li> <li>Optional Redis cache; internal <code>/routes</code> and <code>/calendars</code> APIs.</li> </ul>"},{"location":"60-infra/aws-infra/#reconciliation-returns","title":"Reconciliation &amp; Returns","text":"<ul> <li>S3 landing buckets per rail; S3 Put \u2192 SQS \u2192 ECS normalize workers.</li> <li>Recon service (ECS + RDS <code>storo_recon</code>) matches lines \u2192 emits <code>transfers.settled/returned</code>.</li> <li>EventBridge Scheduler for partner pulls; AWS Transfer Family for SFTP if required.</li> </ul>"},{"location":"60-infra/aws-infra/#operator-console","title":"Operator Console","text":"<ul> <li>Internal Next.js on ECS behind internal ALB; access via AWS VPN/Client VPN or Identity Center.</li> <li>Optionally CloudFront + WAF + Cognito/Identity Center for controlled external access.</li> </ul>"},{"location":"60-infra/aws-infra/#environments-regions","title":"Environments &amp; Regions","text":"<ul> <li>Separate AWS accounts: dev, staging, prod (Organizations, SCPs, guardrails).</li> <li>Region: af\u2011south\u20111 for ZA residency; assess ZW residency needs.</li> <li>Per\u2011env VPC stacks; ECR image promotion by tag; snapshot retention (35d), cross\u2011account copy for DR.</li> </ul>"},{"location":"60-infra/aws-infra/#ha-dr-backups","title":"HA, DR, Backups","text":"<ul> <li>RDS Multi\u2011AZ, PITR, snapshots; S3 versioning + lifecycle; SNS/SQS DLQs.</li> <li>ECS desired count \u2265 2 for critical services across 3 AZs; ALB health checks.</li> <li>Runbooks: DLQ drains, outbox replays, RDS failovers.</li> </ul>"},{"location":"60-infra/aws-infra/#cost-scaling","title":"Cost &amp; Scaling","text":"<ul> <li>Reduce NAT egress via VPC endpoints (S3 Gateway, SQS/SNS/SM/ECR/Logs interfaces).</li> <li>Autoscale: CPU/Memory + custom (SQS depth, publish lag).</li> <li>Fargate Spot for non\u2011critical batch workers (recon), if acceptable.</li> </ul>"},{"location":"60-infra/aws-infra/#networking-security","title":"Networking &amp; Security","text":"<ul> <li>SGs per service; no 0.0.0.0/0 on private tasks; WAF on public ALBs.</li> <li>IAM: per\u2011task roles; scoped access to S3 prefixes/SNS topics/SQS queues/KMS keys.</li> <li>Audit: CloudTrail, Config, GuardDuty, Security Hub; log retention per policy.</li> </ul>"},{"location":"60-infra/aws-infra/#pipeline-per-service","title":"Pipeline (per service)","text":"<ul> <li>Build: GitHub Actions \u2192 ECR.</li> <li>Deploy: Terraform plans/applies; ECS service update; one\u2011off migration task before rollout.</li> <li>Contract checks in CI using Fixtures; optional canary tasks; rollback via task set or previous image tag.</li> </ul>"},{"location":"60-infra/aws-infra/#serverless-pilot-option-a-lambda-api-gateway-aurora-serverless-v2","title":"Serverless Pilot (Option A) \u2014 Lambda + API Gateway + Aurora Serverless v2","text":"<ul> <li>Pilot decision: use API Gateway + Lambda, Aurora Serverless v2 (PostgreSQL) via RDS Proxy, SNS FIFO + SQS FIFO for events.</li> <li>Keep ECS guidance above for future non\u2011serverless services; pilot focuses on serverless for CTS and lightweight consumers.</li> </ul>"},{"location":"60-infra/aws-infra/#stacks-infra-repo-cdk","title":"Stacks (infra repo, CDK)","text":"<ul> <li>SharedVpcStack: VPC (2\u20133 AZs), private subnets for Lambdas + DB, NAT, interface endpoints (SQS/SNS/SM/Logs/ECR), SGs.</li> <li>DatabaseStack: Aurora Serverless v2 (min ACU 0.5\u20131, max 4), Multi\u2011AZ, RDS Proxy (IAM auth), parameter groups, Secrets Manager.</li> <li>EventingStack: SNS FIFO topic <code>events.transfers</code> with KMS; SQS FIFO DLQs and publish policy.</li> <li>ApiGatewayStack: API Gateway HTTP API (or REST if usage plans needed), WAF, stages, custom domain.</li> <li>ObservabilityStack: CloudWatch log groups, dashboards, alarms (p95, 5xx, SLO burn), X\u2011Ray.</li> <li>Outputs to SSM Parameter Store (per env):</li> <li><code>/storo/${env}/api/id</code>, <code>/storo/${env}/sns/events-transfers/arn</code>,</li> <li><code>/storo/${env}/rds/proxy/endpoint</code>, <code>/storo/${env}/rds/secret/arn</code>.</li> </ul>"},{"location":"60-infra/aws-infra/#service-stacks-service-repos-cdk","title":"Service stacks (service repos, CDK)","text":"<ul> <li>Import SSM parameters, then define:</li> <li>Lambdas: <code>cts-api</code>, <code>cts-outbox-worker</code>, optional <code>cts-inbound-consumer</code>.</li> <li>API routes on shared API (integration + route) using imported API ID.</li> <li>SQS FIFO queues subscribed to <code>events.transfers</code> (per consumer) with DLQs and alarms.</li> <li>IAM roles: scoped to publish to SNS, read SQS, connect via RDS Proxy, read secrets.</li> <li>Alarms/dashboards: p95, 5xx, queue lag, outbox failure rate, Lambda errors/throttles.</li> </ul>"},{"location":"60-infra/aws-infra/#eventing-ordering-dedupe","title":"Eventing (ordering &amp; dedupe)","text":"<ul> <li>SNS FIFO <code>events.transfers</code> with SQS FIFO subscribers per consumer.</li> <li>MessageGroupId = <code>transferId</code> (per\u2011key ordering), MessageDeduplicationId = <code>eventId</code>.</li> <li>DLQs: SQS standard per subscriber; 14d retention; runbooks for re\u2011drive.</li> </ul>"},{"location":"60-infra/aws-infra/#cdk-snippets-typescript","title":"CDK snippets (TypeScript)","text":"<p>Register a Lambda on the shared API: <pre><code>const apiId = ssm.StringParameter.valueForStringParameter(this, `/storo/${env}/api/id`);\nconst httpApi = apigwv2.HttpApi.fromHttpApiAttributes(this, 'SharedApi', { httpApiId: apiId });\nconst fn = new lambda.NodejsFunction(this, 'CtsApiFn', { vpc, vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },\n  environment: { RDS_PROXY_ENDPOINT: proxy.endpoint }, tracing: lambda.Tracing.ACTIVE });\nnew apigwv2i.HttpLambdaIntegration('CtsApiInt', fn);\nhttpApi.addRoutes({ path: '/transfers', methods: [apigwv2.HttpMethod.POST], integration: new apigwv2i.HttpLambdaIntegration('Int', fn) });\n</code></pre></p> <p>Subscribe SQS FIFO to SNS FIFO: <pre><code>const topicArn = ssm.StringParameter.valueForStringParameter(this, `/storo/${env}/sns/events-transfers/arn`);\nconst topic = sns.Topic.fromTopicArn(this, 'EventsTransfers', topicArn);\nconst q = new sqs.Queue(this, 'GatewayQueue', { fifo: true, contentBasedDeduplication: false });\nnew sns.Subscription(this, 'Sub', { topic, endpoint: q.queueArn, protocol: sns.SubscriptionProtocol.SQS,\n  rawMessageDelivery: true, deadLetterQueue: new sqs.Queue(this, 'DLQ') });\n</code></pre></p> <p>Outbox worker schedule: <pre><code>new events.Rule(this, 'OutboxSchedule', { schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n  targets: [new targets.LambdaFunction(outboxFn, { retryAttempts: 2 })] });\n</code></pre></p>"},{"location":"60-infra/aws-infra/#cicd-github-actions-with-oidc","title":"CI/CD (GitHub Actions with OIDC)","text":"<ul> <li>Jobs: lint/test \u2192 cdk synth \u2192 cdk diff \u2192 deploy dev \u2192 integration tests \u2192 promote stage/prod with approval.</li> <li>Migrations (Flyway/Liquibase) step runs against RDS Proxy before Lambda canary. <pre><code>permissions: { id-token: write, contents: read }\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: aws-actions/configure-aws-credentials@v4\n        with: { role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCT }}:role/gh-oidc-cdk, aws-region: af-south-1 }\n      - run: npm ci &amp;&amp; npm run build &amp;&amp; npx cdk synth\n      - run: ./scripts/migrate.sh # runs flyway with RDS Proxy\n      - run: npx cdk deploy CtsServiceStack --require-approval never\n</code></pre></li> </ul>"},{"location":"60-infra/aws-infra/#deployment-order","title":"Deployment order","text":"<p>1) Infra repo: VPC \u2192 DB + Proxy \u2192 Eventing \u2192 API \u2192 Observability \u2192 write SSM params. 2) Service repos: migrations \u2192 Lambdas \u2192 API routes \u2192 SNS/SQS subs \u2192 alarms. 3) Canary release via CodeDeploy Lambda alias (10%/10m) \u2192 100%.</p>"},{"location":"60-infra/aws-infra/#security-cost-notes","title":"Security &amp; cost notes","text":"<ul> <li>IAM least\u2011privilege per Lambda; SGs restrict DB access to RDS Proxy.</li> <li>Secrets Manager rotation (90d); IAM auth to RDS Proxy where feasible.</li> <li>Aurora min/max ACU per env; reserved concurrency caps; long polling SQS; schedule down non\u2011prod at night.</li> </ul>"},{"location":"70-sprints/epics-and-stories/","title":"\ud83d\udee0 Storo Nucleus \u2014 Kanban Board (with Repos, Langs, Infra Deps)","text":"<p>Columns: Backlog \u2192 In Progress \u2192 Review \u2192 Done Each task card includes: - Repo: where code/docs live - Lang: primary implementation language - Infra: infra dependencies (DB, SNS/SQS, etc.)</p>"},{"location":"70-sprints/epics-and-stories/#backlog","title":"\ud83d\ude80 Backlog","text":""},{"location":"70-sprints/epics-and-stories/#infrastructure-foundations","title":"\ud83d\udfe6 Infrastructure Foundations","text":"<ul> <li>[ ] Provision Aurora PostgreSQL Serverless v2 (multi-AZ)  </li> <li>Repo: <code>infra-stacks</code> (Terraform/CDK)  </li> <li>Lang: HCL/TypeScript (CDK)  </li> <li> <p>Infra: AWS RDS, VPC, Subnets  </p> </li> <li> <p>[ ] Configure RDS Proxy  </p> </li> <li>Repo: <code>infra-stacks</code> </li> <li>Lang: HCL/TypeScript  </li> <li> <p>Infra: RDS Proxy, Secrets Manager  </p> </li> <li> <p>[ ] Setup VPC, subnets, security groups  </p> </li> <li>Repo: <code>infra-stacks</code> </li> <li>Lang: HCL/TypeScript  </li> <li> <p>Infra: VPC, SGs, Route Tables  </p> </li> <li> <p>[ ] Setup Secrets Manager entries (DB creds, CTS API keys)  </p> </li> <li>Repo: <code>infra-stacks</code> </li> <li>Lang: HCL/TypeScript  </li> <li> <p>Infra: AWS Secrets Manager  </p> </li> <li> <p>[ ] Create SNS FIFO topic: <code>events.transfers</code> </p> </li> <li>Repo: <code>infra-stacks</code> </li> <li>Lang: HCL/TypeScript  </li> <li> <p>Infra: AWS SNS FIFO  </p> </li> <li> <p>[ ] Create SQS FIFO queues: <code>gateway.usdc</code>, <code>ledger.postings</code>, <code>projections.timeline</code> </p> </li> <li>Repo: <code>infra-stacks</code> </li> <li>Lang: HCL/TypeScript  </li> <li> <p>Infra: AWS SQS FIFO  </p> </li> <li> <p>[ ] Attach IAM publish/consume policies  </p> </li> <li>Repo: <code>infra-stacks</code> </li> <li>Lang: HCL/TypeScript  </li> <li> <p>Infra: AWS IAM  </p> </li> <li> <p>[ ] Baseline CloudWatch dashboards (API latency, backlog, lag)  </p> </li> <li>Repo: <code>infra-observability</code> </li> <li>Lang: TypeScript/Terraform  </li> <li> <p>Infra: AWS CloudWatch  </p> </li> <li> <p>[ ] Enable X-Ray tracing for services  </p> </li> <li>Repo: <code>infra-observability</code> </li> <li>Lang: TypeScript  </li> <li>Infra: AWS X-Ray  </li> </ul>"},{"location":"70-sprints/epics-and-stories/#contracts-first","title":"\ud83d\udfe6 Contracts-First","text":"<ul> <li>[ ] Finalize Event Envelope v1 (<code>events.md</code>)  </li> <li>Repo: <code>storo-specs</code> </li> <li>Lang: Markdown/JSON Schema  </li> <li> <p>Infra: None  </p> </li> <li> <p>[ ] Define Canonical Transfer API (<code>POST/GET /transfers</code>)  </p> </li> <li>Repo: <code>storo-specs</code> </li> <li>Lang: OpenAPI (YAML), Markdown  </li> <li> <p>Infra: None  </p> </li> <li> <p>[ ] Publish golden fixtures (sample transfers/events)  </p> </li> <li>Repo: <code>storo-specs</code> </li> <li>Lang: JSON/YAML  </li> <li> <p>Infra: None  </p> </li> <li> <p>[ ] Contract validation CI job (<code>contract-validate</code>)  </p> </li> <li>Repo: <code>storo-specs</code>, <code>cts-api</code>, <code>rail-gateway-*</code> </li> <li>Lang: TS/Go, GitHub Actions  </li> <li>Infra: CI/CD pipelines  </li> </ul>"},{"location":"70-sprints/epics-and-stories/#cts-api","title":"\ud83d\udfe6 CTS API","text":"<ul> <li>[ ] Scaffold CTS API service (Node/TS)  </li> <li>Repo: <code>cts-api</code> </li> <li>Lang: TypeScript (NestJS/Express)  </li> <li> <p>Infra: Aurora, Secrets Manager  </p> </li> <li> <p>[ ] Add <code>/live</code>, <code>/ready</code>, <code>/metrics</code>, <code>/version</code> endpoints  </p> </li> <li>Repo: <code>cts-api</code> </li> <li>Lang: TS  </li> <li> <p>Infra: None  </p> </li> <li> <p>[ ] Implement Idempotency middleware (Idempotency-Key + body hash)  </p> </li> <li>Repo: <code>cts-api</code> </li> <li>Lang: TS  </li> <li> <p>Infra: Aurora (idempotency table)  </p> </li> <li> <p>[ ] Implement Canonical Request normalizer  </p> </li> <li>Repo: <code>cts-api</code> </li> <li>Lang: TS  </li> <li> <p>Infra: None  </p> </li> <li> <p>[ ] Add POST <code>/transfers</code>: validate, normalize, insert into <code>transfers</code> + <code>outbox</code> </p> </li> <li>Repo: <code>cts-api</code> </li> <li>Lang: TS  </li> <li> <p>Infra: Aurora  </p> </li> <li> <p>[ ] Add GET <code>/transfers/:id</code>: return state + timeline  </p> </li> <li>Repo: <code>cts-api</code> </li> <li>Lang: TS  </li> <li> <p>Infra: Aurora  </p> </li> <li> <p>[ ] Structured logging (transferId, tenantId, eventId)  </p> </li> <li>Repo: <code>cts-api</code> </li> <li>Lang: TS  </li> <li>Infra: CloudWatch, X-Ray  </li> </ul>"},{"location":"70-sprints/epics-and-stories/#compliance-adapter","title":"\ud83d\udfe6 Compliance Adapter","text":"<ul> <li>[ ] Define /screen API contract (inputs/outputs)  </li> <li>Repo: <code>storo-specs</code> </li> <li>Lang: Markdown/OpenAPI  </li> <li> <p>Infra: None  </p> </li> <li> <p>[ ] Implement Compliance API client  </p> </li> <li>Repo: <code>cts-api</code> </li> <li>Lang: TS  </li> <li> <p>Infra: HTTP \u2192 compliance service  </p> </li> <li> <p>[ ] Integrate Compliance check in CTS POST flow  </p> </li> <li>Repo: <code>cts-api</code> </li> <li>Lang: TS  </li> <li>Infra: Compliance service endpoint  </li> </ul>"},{"location":"70-sprints/epics-and-stories/#directory-adapter","title":"\ud83d\udfe6 Directory Adapter","text":"<ul> <li>[ ] Define /routes API contract (inputs/outputs)  </li> <li>Repo: <code>storo-specs</code> </li> <li>Lang: Markdown/OpenAPI  </li> <li> <p>Infra: None  </p> </li> <li> <p>[ ] Implement Directory API client (400ms timeout, retries, cache)  </p> </li> <li>Repo: <code>cts-api</code> </li> <li>Lang: TS  </li> <li> <p>Infra: Directory service endpoint, Redis/memory cache  </p> </li> <li> <p>[ ] Integrate Directory lookup in CTS POST flow  </p> </li> <li>Repo: <code>cts-api</code> </li> <li>Lang: TS  </li> <li>Infra: Directory service endpoint  </li> </ul>"},{"location":"70-sprints/epics-and-stories/#outbox-dispatcher","title":"\ud83d\udfe6 Outbox Dispatcher","text":"<ul> <li>[ ] Create outbox table schema in Aurora  </li> <li>Repo: <code>cts-api</code> </li> <li>Lang: SQL migrations  </li> <li> <p>Infra: Aurora  </p> </li> <li> <p>[ ] Worker: poll PENDING rows  </p> </li> <li>Repo: <code>cts-outbox-worker</code> </li> <li>Lang: Go/TypeScript  </li> <li> <p>Infra: Aurora, SNS FIFO  </p> </li> <li> <p>[ ] Publish to SNS FIFO (GroupId=transferId, DedupId=eventId)  </p> </li> <li>Repo: <code>cts-outbox-worker</code> </li> <li>Lang: Go/TS  </li> <li> <p>Infra: SNS FIFO  </p> </li> <li> <p>[ ] Mark row SENT if publish succeeds  </p> </li> <li>Repo: <code>cts-outbox-worker</code> </li> <li>Lang: Go/TS  </li> <li> <p>Infra: Aurora  </p> </li> <li> <p>[ ] Retry/backoff logic + DLQ  </p> </li> <li>Repo: <code>cts-outbox-worker</code> </li> <li>Lang: Go/TS  </li> <li> <p>Infra: Aurora, SNS  </p> </li> <li> <p>[ ] Metrics: backlog size, publish lag, error count  </p> </li> <li>Repo: <code>cts-outbox-worker</code> </li> <li>Lang: Go/TS  </li> <li>Infra: CloudWatch  </li> </ul>"},{"location":"70-sprints/epics-and-stories/#inbound-consumer-cts-state-manager","title":"\ud83d\udfe6 Inbound Consumer (CTS State Manager)","text":"<ul> <li>[ ] Subscribe to <code>events.transfers.accepted|settled|returned|failed</code> </li> <li>Repo: <code>cts-consumer</code> </li> <li>Lang: Go/TS  </li> <li> <p>Infra: SQS FIFO  </p> </li> <li> <p>[ ] Dedupe by (transferId, type) or inbox table  </p> </li> <li>Repo: <code>cts-consumer</code> </li> <li>Lang: SQL migrations, Go/TS  </li> <li> <p>Infra: Aurora  </p> </li> <li> <p>[ ] Update transfers.state + append to <code>transfer_events</code> </p> </li> <li>Repo: <code>cts-consumer</code> </li> <li>Lang: Go/TS  </li> <li>Infra: Aurora  </li> </ul>"},{"location":"70-sprints/epics-and-stories/#gateway-usdc","title":"\ud83d\udfe6 Gateway \u2014 USDC","text":"<ul> <li>[ ] Consume <code>events.transfers.submitted.usdc</code> </li> <li>Repo: <code>rail-gateway-usdc</code> </li> <li>Lang: Go  </li> <li> <p>Infra: SQS FIFO  </p> </li> <li> <p>[ ] Submit to USDC rail (mock \u2192 real integration)  </p> </li> <li>Repo: <code>rail-gateway-usdc</code> </li> <li>Lang: Go  </li> <li> <p>Infra: Algorand/USDC APIs  </p> </li> <li> <p>[ ] Emit <code>accepted</code> + <code>settled</code> via outbox dispatcher  </p> </li> <li>Repo: <code>rail-gateway-usdc</code> </li> <li>Lang: Go  </li> <li>Infra: Aurora, SNS FIFO  </li> </ul>"},{"location":"70-sprints/epics-and-stories/#ledger-minimal-slice","title":"\ud83d\udfe6 Ledger (Minimal Slice)","text":"<ul> <li>[ ] Create journal schema (double-entry invariants)  </li> <li>Repo: <code>ledger-service</code> </li> <li>Lang: SQL migrations  </li> <li> <p>Infra: Aurora  </p> </li> <li> <p>[ ] Consume <code>events.transfers.settled</code> </p> </li> <li>Repo: <code>ledger-service</code> </li> <li>Lang: Go/TS  </li> <li> <p>Infra: SQS FIFO  </p> </li> <li> <p>[ ] Insert postings idempotently by (transferId, type)  </p> </li> <li>Repo: <code>ledger-service</code> </li> <li>Lang: Go/TS  </li> <li>Infra: Aurora  </li> </ul>"},{"location":"70-sprints/epics-and-stories/#observability-runbooks","title":"\ud83d\udfe6 Observability &amp; Runbooks","text":"<ul> <li>[ ] Structured logs with correlation IDs  </li> <li>Repo: <code>cts-api</code>, <code>cts-outbox-worker</code>, <code>rail-gateway-*</code>, <code>ledger-service</code> </li> <li>Lang: TS/Go  </li> <li> <p>Infra: CloudWatch  </p> </li> <li> <p>[ ] Alerts: backlog &gt; 5k, consumer lag &gt; 5m, API p95 &gt; 1s  </p> </li> <li>Repo: <code>infra-observability</code> </li> <li>Lang: Terraform/CDK  </li> <li> <p>Infra: CloudWatch Alarms  </p> </li> <li> <p>[ ] Runbooks: latency, stuck SUBMITTED, DLQ triage  </p> </li> <li>Repo: <code>docs-ops</code> </li> <li>Lang: Markdown  </li> <li>Infra: None  </li> </ul>"},{"location":"70-sprints/epics-and-stories/#in-progress","title":"\ud83d\udd04 In Progress","text":"<p>(move tasks here as work begins)</p>"},{"location":"70-sprints/epics-and-stories/#review","title":"\ud83d\udc40 Review","text":"<p>(move tasks here when PR/open merge request ready for review)</p>"},{"location":"70-sprints/epics-and-stories/#done","title":"\u2705 Done","text":"<p>(move tasks here when merged/deployed/validated)</p>"},{"location":"70-sprints/epics-and-stories/#critical-path","title":"\ud83d\udd17 Critical Path","text":"<ol> <li><code>infra-stacks</code> \u2192 Infra Foundations  </li> <li><code>storo-specs</code> \u2192 Contracts  </li> <li><code>cts-api</code> \u2192 API skeleton (POST/GET, adapters)  </li> <li><code>cts-outbox-worker</code> \u2192 Dispatcher  </li> <li><code>cts-consumer</code> \u2192 Inbound consumer  </li> <li><code>rail-gateway-usdc</code> \u2192 First rail integration  </li> <li><code>ledger-service</code> \u2192 Journal slice  </li> <li><code>infra-observability</code> \u2192 Alerts &amp; dashboards</li> </ol>"},{"location":"90-templates/TEMPLATE-adr/","title":"ADR-XXXX:  <ul> <li>Status: Proposed / Accepted / Superseded</li> <li>Date: YYYY-MM-DD</li> <li>Owners: team-or-person</li> <li>Context: What problem are we solving?</li> <li>Decision: What did we choose and why?</li> <li>Consequences: Tradeoffs, risks, follow-ups.</li> <li>References: Links, issues, PRs.</li> </ul>","text":""},{"location":"90-templates/TEMPLATE-component/","title":"<p>Purpose One sentence on why this exists.</p>","text":""},{"location":"90-templates/TEMPLATE-component/#responsibilities","title":"Responsibilities","text":"<ul> <li>...</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#interfaces","title":"Interfaces","text":""},{"location":"90-templates/TEMPLATE-component/#inputs","title":"Inputs","text":"<ul> <li>Events: ...</li> <li>HTTP: ...</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#outputs","title":"Outputs","text":"<ul> <li>Events: ...</li> <li>HTTP: ...</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#data-model","title":"Data Model","text":"<ul> <li>Tables / storage / retention / PII</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#algorithms-rules","title":"Algorithms / Rules","text":"<ul> <li>Key flows and validation logic</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#diagrams","title":"Diagrams","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant S as &lt;Component&gt;\n  Client-&gt;&gt;S: Request\n  S--&gt;&gt;Client: Response</code></pre>"},{"location":"90-templates/TEMPLATE-component/#failure-modes-retries","title":"Failure Modes &amp; Retries","text":"<ul> <li>...</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#observability","title":"Observability","text":"<ul> <li>Metrics / logs / traces</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#security","title":"Security","text":"<ul> <li>Secrets / authn/z / PII / PCI</li> </ul>"},{"location":"90-templates/TEMPLATE-component/#runbooks","title":"Runbooks","text":"<ul> <li>...</li> </ul>"}]}